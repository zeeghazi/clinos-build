{"version":3,"sources":["services/integrations.service.js","screens/Client/Setup/Integrations/Integrations.js"],"names":["axios","get","API_BASE","headers","authHeader","then","res","data","put","useStyles","makeStyles","theme","root","flexGrow","padding","formControl","margin","spacing","minWidth","title","paddingBottom","form","display","flexDirection","marginTop","formElments","maxWidth","submit","customSelect","width","type","paper","textField","amount","Integrations","classes","enqueueSnackbar","useSnackbar","useState","labcorpKey","setLabcorpKey","questKey","setQuestKey","doctorsDataId","setDoctorsDataId","doctorsDataPw","setDoctorsDataPw","stripeKey","setStripeKey","updateIntegrations","e","preventDefault","payload","labcorp_api_key","quest_api_key","doctors_data_username","doctors_data_password","stripe_api_key","IntegrationsService","update","message","variant","useEffect","getIntegrations","responseData","className","Grid","container","direction","justify","Typography","component","color","noValidate","onSubmit","item","xs","sm","TextField","autoFocus","label","value","id","onChange","event","target","size","Button","fullWidth"],"mappings":"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","file":"static/js/23.9b67f3ee.chunk.js","sourcesContent":["import axios from \"axios\";\n\nimport { API_BASE } from \"../utils/API_BASE\";\nimport authHeader from \"./auth-header\";\n\nclass AppointmentService {\n  getIntegrations() {\n    return axios\n      .get(`${API_BASE}/integrations`, { headers: authHeader() })\n      .then((res) => res.data);\n  }\n\n  update(data) {\n    return axios.put(`${API_BASE}/integrations/`, data, {\n      headers: authHeader(),\n    });\n  }\n}\n\nexport default new AppointmentService();\n","// Todo: Have to add validation\nimport React, { useEffect, useState } from \"react\";\n\nimport { makeStyles } from \"@material-ui/core\";\nimport Button from \"@material-ui/core/Button\";\nimport Grid from \"@material-ui/core/Grid\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { useSnackbar } from \"notistack\";\n\nimport IntegrationsService from \"../../../../services/integrations.service\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n    padding: \"25px 0px\",\n  },\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: 180,\n  },\n  title: {\n    paddingBottom: theme.spacing(0.5),\n  },\n  form: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    marginTop: theme.spacing(1),\n  },\n  formElments: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    maxWidth: \"500px\",\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n    marginTop: \"20px\",\n    maxWidth: \"440px\",\n  },\n  customSelect: {\n    width: \"200px\",\n  },\n  type: {\n    marginTop: \"20px\",\n  },\n  paper: {\n    maxWidth: \"456px\",\n  },\n  textField: {\n    width: \"200px\",\n  },\n  amount: {\n    marginTop: \"18px\",\n  },\n}));\n\nexport default function Integrations() {\n  const classes = useStyles();\n  const { enqueueSnackbar } = useSnackbar();\n  const [labcorpKey, setLabcorpKey] = useState(\"\");\n  const [questKey, setQuestKey] = useState(\"\");\n  const [doctorsDataId, setDoctorsDataId] = useState(\"\");\n  const [doctorsDataPw, setDoctorsDataPw] = useState(\"\");\n  const [stripeKey, setStripeKey] = useState(\"\");\n\n  const updateIntegrations = (e) => {\n    e.preventDefault();\n    const payload = {\n      data: {\n        labcorp_api_key: labcorpKey,\n        quest_api_key: questKey,\n        doctors_data_username: doctorsDataId,\n        doctors_data_password: doctorsDataPw,\n        stripe_api_key: stripeKey,\n      },\n    };\n    IntegrationsService.update(payload).then((res) => {\n      enqueueSnackbar(`${res.data.message}`, {\n        variant: \"success\",\n      });\n    });\n  };\n\n  useEffect(() => {\n    IntegrationsService.getIntegrations().then((res) => {\n      const responseData = res.data[0];\n      setLabcorpKey(responseData.labcorp_api_key);\n      setQuestKey(responseData.quest_api_key);\n      setDoctorsDataId(responseData.doctors_data_username);\n      setDoctorsDataPw(responseData.doctors_data_password);\n      setStripeKey(responseData.stripe_api_key);\n    });\n  }, []);\n\n  return (\n    <div className={classes.root}>\n      <div className={classes.paper}>\n        <Grid container direction=\"column\" justify=\"center\">\n          <Typography\n            component=\"h1\"\n            variant=\"h2\"\n            color=\"textPrimary\"\n            className={classes.title}\n          >\n            Integrations\n          </Typography>\n          <Typography component=\"p\" variant=\"body2\" color=\"textPrimary\">\n            This page is used to manage third party integrations\n          </Typography>\n          <form\n            className={classes.form}\n            noValidate\n            onSubmit={(e) => updateIntegrations(e)}\n          >\n            <Grid container spacing={0}>\n              <Grid item xs={6} sm={12}>\n                <TextField\n                  autoFocus\n                  // required\n                  variant=\"outlined\"\n                  label=\"Labcorp Key\"\n                  value={labcorpKey}\n                  id=\"labcorpKey\"\n                  className={`${classes.textField} ${classes.amount}`}\n                  onChange={(event) => setLabcorpKey(event.target.value)}\n                  size=\"small\"\n                />\n              </Grid>\n              <Grid item xs={6} sm={12}>\n                <TextField\n                  // required\n                  variant=\"outlined\"\n                  label=\"Quest Key\"\n                  value={questKey}\n                  id=\"questKey\"\n                  className={`${classes.textField} ${classes.amount}`}\n                  onChange={(event) => setQuestKey(event.target.value)}\n                  size=\"small\"\n                />\n              </Grid>\n              <Grid item xs={6} sm={12}>\n                <TextField\n                  // required\n                  variant=\"outlined\"\n                  label=\"Doctors Data ID\"\n                  value={doctorsDataId}\n                  id=\"doctorsDataId\"\n                  className={`${classes.textField} ${classes.amount}`}\n                  onChange={(event) => setDoctorsDataId(event.target.value)}\n                  size=\"small\"\n                />\n              </Grid>\n              <Grid item xs={6} sm={12}>\n                <TextField\n                  // required\n                  variant=\"outlined\"\n                  label=\"Doctors Data PW\"\n                  value={doctorsDataPw}\n                  id=\"doctorsDataPw\"\n                  className={`${classes.textField} ${classes.amount}`}\n                  onChange={(event) => setDoctorsDataPw(event.target.value)}\n                  size=\"small\"\n                />\n              </Grid>\n              <Grid item xs={6} sm={12}>\n                <TextField\n                  // required\n                  variant=\"outlined\"\n                  label=\"Stripe Key\"\n                  value={stripeKey}\n                  id=\"doctorsDataPw\"\n                  className={`${classes.textField} ${classes.amount}`}\n                  onChange={(event) => setStripeKey(event.target.value)}\n                  size=\"small\"\n                />\n              </Grid>\n            </Grid>\n            <Grid item xs={6} sm={3}>\n              <Button\n                fullWidth\n                size=\"small\"\n                type=\"submit\"\n                variant=\"contained\"\n                color=\"primary\"\n                className={classes.submit}\n                onSubmit={() => updateIntegrations()}\n              >\n                Save\n              </Button>\n            </Grid>\n          </form>\n        </Grid>\n      </div>\n    </div>\n  );\n}\n"],"sourceRoot":""}