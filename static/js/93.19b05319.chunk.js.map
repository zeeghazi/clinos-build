{"version":3,"sources":["screens/Client/Setup/CTPcodes/component/CPTform.js","screens/Client/Setup/CTPcodes/component/modal/CptGroupMembersModal.js","screens/Client/Setup/CTPcodes/component/modal/EditCptCodeModal.js","screens/Client/Setup/CTPcodes/component/CPTtable.js","screens/Client/Setup/CTPcodes/CPTcodes.js","services/cpt.service.js"],"names":["useStyles","makeStyles","formControl","minWidth","controlLabel","marginLeft","marginRight","input","padding","formStyle","display","gridMargin","marginBottom","submit","paddingLeft","paddingRight","marginTop","CPTform","labCompanyId","lebCompanyList","fetchCptCodeSearch","handleChangeOfCptId","handleChangeOfCptDescription","handleChangeOfLabCompanyId","handleChangeOfFavorite","handleChangeOfBillable","handleChangeOfSelf","handleChangeOfGroup","classes","handleKeyUp","event","keyCode","style","Grid","className","item","xs","md","TextField","fullWidth","autoFocus","label","variant","size","InputLabelProps","shrink","onChange","onKeyUp","id","select","value","SelectProps","native","aria-label","map","lab","name","FormControlLabel","control","Checkbox","color","labelPlacement","Button","type","onClick","theme","title","backgroundColor","palette","primary","light","content","paddingTop","spacing","paddingBottom","fontSize","minHeight","tableContainer","modalAction","borderTop","background","default","justifyContent","StyledTableCell","withStyles","head","grey","fontWeight","body","TableCell","StyledTableRow","root","action","hover","height","TableRow","CptGroupMembersModal","isOpen","hendleOnClose","groups","Dialog","maxWidth","open","onClose","aria-labelledby","aria-describedby","DialogTitle","DialogContent","TableContainer","component","Paper","Table","table","TableHead","align","TableBody","scope","description","leb","DialogActions","borderColor","colors","orange","margin","noteMargin","flexDirection","alignItems","text","secondary","formHelperText","width","NumberFormatCustom","props","inputRef","other","getInputRef","onValueChange","values","target","thousandSeparator","isNumericString","prefix","EditCptCodeModal","cpt_id","cpt_description","cpt_fee","cpt_favorite","cpt_billable","cpt_notes","handleChangeFee","handleChangeFavorite","handleChangeBillable","handleChangeNotes","handleEditCptCode","DialogContentText","FormControl","disabled","InputProps","inputComponent","FormGroup","Switch","checked","Boolean","multiline","rows","CPTtable","searchResult","enqueueSnackbar","useSnackbar","user","useAuth","useState","errors","setErrors","setIsOpen","groupIsOpen","setGroupIsOpen","setGroups","set_cpt_id","set_cpt_description","set_cpt_favorite","set_cpt_fee","set_cpt_billable","set_cpt_notes","payload","cptId","favorite","billable","fee","notes","error","index","Alert","severity","msg","result","cpt","lab_company","displayType","client_name","cursor","group","getListOfGroup","String","split","data","g","filter","c","trim","list","push","handleGroupIsOpen","cpt_group","length","slice","updated","moment","format","updated_name","IconButton","desc","fav","bill","e","CPTCodesService","updateClientCpt","then","response","setTimeout","message","flexGrow","CTPcodes","setLabCompanyList","setSearchResult","setCptId","cptDescription","setCptDescription","setLabCompanyId","setFavorite","setBillable","self","setSelf","setGroup","useEffect","getLabCompnayList","res","search","CssBaseline","Typography","API_URL","process","CPTCodes","axios","get","headers","authHeader","post","userId"],"mappings":"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","file":"static/js/93.19b05319.chunk.js","sourcesContent":["import React from \"react\";\n\nimport {\n  Button,\n  Checkbox,\n  FormControlLabel,\n  Grid,\n  makeStyles,\n  TextField,\n} from \"@material-ui/core\";\nimport Proptypes from \"prop-types\";\n\n\nconst useStyles = makeStyles(() => ({\n  formControl: {\n    minWidth: \"100%\",\n  },\n  controlLabel: {\n    marginLeft: \"0px\",\n    marginRight: \"15px\",\n  },\n  input: {\n    padding: \"10.5px\",\n  },\n  formStyle: {\n    display: \"flex\",\n  },\n  gridMargin: {\n    marginRight: \"10px\",\n    marginBottom: \"8px\",\n  },\n  submit: {\n    paddingLeft: \"30px\",\n    paddingRight: \"30px\",\n    // fontSize: \"1rem\",\n    marginTop: \"8px\",\n  },\n}));\n\nconst CPTform = ({\n  labCompanyId,\n  lebCompanyList,\n  fetchCptCodeSearch,\n  handleChangeOfCptId,\n  handleChangeOfCptDescription,\n  handleChangeOfLabCompanyId,\n  handleChangeOfFavorite,\n  handleChangeOfBillable,\n  handleChangeOfSelf,\n  handleChangeOfGroup,\n}) => {\n  const classes = useStyles();\n\n  const handleKeyUp = (event) => {\n    if (event.keyCode === 13) {\n      fetchCptCodeSearch();\n    }\n  };\n\n  return (\n    <div style={{ marginTop: \"15px\" }}>\n      <Grid className={classes.formStyle}>\n        <Grid item xs={12} md={1} className={classes.gridMargin}>\n          <TextField\n            fullWidth\n            autoFocus\n            label=\"CPT ID\"\n            variant=\"outlined\"\n            size=\"small\"\n            InputLabelProps={{\n              shrink: true,\n            }}\n            onChange={handleChangeOfCptId}\n            onKeyUp={handleKeyUp}\n          />\n        </Grid>\n        <Grid item xs={12} md={3} className={classes.gridMargin}>\n          <TextField\n            fullWidth\n            label=\"CPT Description\"\n            variant=\"outlined\"\n            size=\"small\"\n            InputLabelProps={{\n              shrink: true,\n            }}\n            onChange={handleChangeOfCptDescription}\n            onKeyUp={handleKeyUp}\n          />\n        </Grid>\n        <Grid item xs={12} md={2} className={classes.gridMargin}>\n          <TextField\n            fullWidth\n            id=\"outlined-select-currency\"\n            select\n            label=\"Lab Company\"\n            value={labCompanyId}\n            onChange={handleChangeOfLabCompanyId}\n            variant=\"outlined\"\n            size=\"small\"\n            InputLabelProps={{\n              shrink: true,\n            }}\n            SelectProps={{\n              native: true,\n            }}\n          >\n            <option aria-label=\"None\" value=\"\" />\n            {lebCompanyList.map((lab) => (\n              <option key={lab.id} value={lab.id}>\n                {lab.name}\n              </option>\n            ))}\n          </TextField>\n        </Grid>\n      </Grid>\n      <FormControlLabel\n        control={(\n          <Checkbox\n            name=\"favorite\"\n            onChange={handleChangeOfFavorite}\n            onKeyUp={handleKeyUp}\n            color=\"primary\"\n            size=\"small\"\n          />\n        )}\n        label=\"Favorites\"\n        labelPlacement=\"start\"\n        className={classes.controlLabel}\n      />\n      <FormControlLabel\n        control={(\n          <Checkbox\n            onChange={handleChangeOfBillable}\n            onKeyUp={handleKeyUp}\n            name=\"billable\"\n            color=\"primary\"\n            size=\"small\"\n          />\n        )}\n        label=\"Billable\"\n        labelPlacement=\"start\"\n        className={classes.controlLabel}\n      />\n      <FormControlLabel\n        control={(\n          <Checkbox\n            onChange={handleChangeOfSelf}\n            onKeyUp={handleKeyUp}\n            name=\"self\"\n            color=\"primary\"\n            size=\"small\"\n          />\n        )}\n        label=\"Self\"\n        labelPlacement=\"start\"\n        className={classes.controlLabel}\n      />\n      <FormControlLabel\n        control={(\n          <Checkbox\n            onChange={handleChangeOfGroup}\n            onKeyUp={handleKeyUp}\n            name=\"group\"\n            color=\"primary\"\n            size=\"small\"\n          />\n        )}\n        label=\"Group\"\n        labelPlacement=\"start\"\n        className={classes.controlLabel}\n      />\n      <br />\n      <Button\n        size=\"medium\"\n        type=\"submit\"\n        variant=\"contained\"\n        color=\"primary\"\n        className={classes.submit}\n        onClick={fetchCptCodeSearch}\n      >\n        Search\n      </Button>\n    </div>\n  );\n};\n\nCPTform.propTypes = {\n  labCompanyId: Proptypes.string.isRequired,\n  lebCompanyList: Proptypes.arrayOf(\n    Proptypes.shape({\n      id: Proptypes.string,\n      name: Proptypes.string,\n    }),\n  ).isRequired,\n  fetchCptCodeSearch: Proptypes.func.isRequired,\n  handleChangeOfCptId: Proptypes.func.isRequired,\n  handleChangeOfCptDescription: Proptypes.func.isRequired,\n  handleChangeOfLabCompanyId: Proptypes.func.isRequired,\n  handleChangeOfFavorite: Proptypes.func.isRequired,\n  handleChangeOfBillable: Proptypes.func.isRequired,\n  handleChangeOfSelf: Proptypes.func.isRequired,\n  handleChangeOfGroup: Proptypes.func.isRequired,\n};\n\nexport default CPTform;\n","import React from \"react\";\n\nimport {\n  colors,\n  Paper,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n} from \"@material-ui/core\";\nimport Button from \"@material-ui/core/Button\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport { makeStyles, withStyles } from \"@material-ui/core/styles\";\nimport Proptypes from \"prop-types\";\n\nconst useStyles = makeStyles((theme) => ({\n  title: {\n    backgroundColor: theme.palette.primary.light,\n    \"& h2\": {\n      color: \"#fff\",\n    },\n  },\n  content: {\n    paddingTop: theme.spacing(2),\n    paddingBottom: theme.spacing(2),\n    fontSize: \"18px\",\n    minHeight: \"450px\",\n  },\n  tableContainer: {\n    minWidth: 450,\n    marginTop: theme.spacing(2),\n  },\n  modalAction: {\n    borderTop: `1px solid ${theme.palette.background.default}`,\n    display: \"flex\",\n    justifyContent: \"space-between\",\n    paddingTop: theme.spacing(2),\n    paddingBottom: theme.spacing(2),\n    paddingLeft: theme.spacing(3),\n    paddingRight: theme.spacing(3),\n  },\n}));\n\nconst StyledTableCell = withStyles((theme) => ({\n  head: {\n    backgroundColor: theme.palette.grey,\n    color: theme.palette.grey,\n    fontSize: \"12px\",\n    fontWeight: 700,\n  },\n  body: {\n    fontSize: 14,\n  },\n}))(TableCell);\n\nconst StyledTableRow = withStyles((theme) => ({\n  root: {\n    fontSize: 14,\n    \"&:nth-of-type(odd)\": {\n      backgroundColor: theme.palette.action.hover,\n    },\n    \"& th\": {\n      fontSize: 12,\n    },\n    \"& td\": {\n      padding: \"6px 16px\",\n      fontSize: 12,\n      height: \"50px\",\n    },\n  },\n}))(TableRow);\n\nconst CptGroupMembersModal = ({ isOpen, hendleOnClose, groups }) => {\n  const classes = useStyles();\n  return (\n    <div>\n      <Dialog\n        fullWidth\n        maxWidth=\"lg\"\n        open={isOpen}\n        onClose={hendleOnClose}\n        aria-labelledby=\"alert-dialog-title\"\n        aria-describedby=\"alert-dialog-description\"\n      >\n        <DialogTitle id=\"alert-dialog-title\" className={classes.title}>\n          CPT Group Members\n        </DialogTitle>\n        <DialogContent className={classes.content}>\n          <TableContainer component={Paper} className={classes.tableContainer}>\n            <Table className={classes.table} aria-label=\"a dense table\">\n              <TableHead>\n                <TableRow>\n                  <StyledTableCell>Code</StyledTableCell>\n                  <StyledTableCell align=\"left\">Description</StyledTableCell>\n                  <StyledTableCell>Lab Company</StyledTableCell>\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                {groups.map((item) => (\n                  <StyledTableRow key={item.id}>\n                    <TableCell component=\"th\" scope=\"row\">\n                      {item.id}\n                    </TableCell>\n                    <TableCell>{item.description}</TableCell>\n                    <TableCell>{item.leb}</TableCell>\n                  </StyledTableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </TableContainer>\n        </DialogContent>\n        <DialogActions className={classes.modalAction}>\n          <Button\n            size=\"small\"\n            variant=\"outlined\"\n            onClick={hendleOnClose}\n            style={{\n              borderColor: colors.orange[600],\n              color: colors.orange[600],\n            }}\n          >\n            Cancel\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n};\n\nCptGroupMembersModal.propTypes = {\n  isOpen: Proptypes.bool.isRequired,\n  hendleOnClose: Proptypes.func.isRequired,\n  groups: Proptypes.arrayOf(\n    Proptypes.shape({\n      id: Proptypes.string,\n      description: Proptypes.string,\n      leb: Proptypes.string,\n    }),\n  ).isRequired,\n};\n\nexport default CptGroupMembersModal;\n","import React from \"react\";\n\nimport {\n  colors, FormControlLabel, FormGroup, Grid,\n} from \"@material-ui/core\";\nimport Button from \"@material-ui/core/Button\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Switch from \"@material-ui/core/Switch\";\nimport TextField from \"@material-ui/core/TextField\";\nimport PropTypes from \"prop-types\";\nimport NumberFormat from \"react-number-format\";\n\nconst useStyles = makeStyles((theme) => ({\n  gridMargin: {\n    margin: \"8px 0px\",\n  },\n  noteMargin: {\n    margin: \"15px 0px\",\n  },\n  title: {\n    backgroundColor: theme.palette.primary.light,\n    \"& h2\": {\n      color: \"#fff\",\n    },\n  },\n  content: {\n    paddingTop: theme.spacing(2),\n    paddingBottom: theme.spacing(2),\n    fontSize: \"18px\",\n  },\n  formControl: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    color: theme.palette.text.secondary,\n    \"& .MuiSelect-select\": {\n      minWidth: 120,\n    },\n  },\n  root: {\n    paddingLeft: \"5px\",\n    \"& .MuiTypography-root\": {\n      marginLeft: \"5px\",\n    },\n  },\n  formHelperText: {\n    width: \"220px\",\n    fontSize: \"12px\",\n    paddingLeft: \"10px\",\n  },\n  modalAction: {\n    borderTop: `1px solid ${theme.palette.background.default}`,\n    display: \"flex\",\n    justifyContent: \"space-between\",\n    paddingTop: theme.spacing(2),\n    paddingBottom: theme.spacing(2),\n    paddingLeft: theme.spacing(3),\n    paddingRight: theme.spacing(3),\n  },\n}));\n\n\nfunction NumberFormatCustom(props) {\n  const { inputRef, onChange, ...other } = props;\n\n  return (\n    <NumberFormat\n      {...other}\n      getInputRef={inputRef}\n      onValueChange={(values) => {\n        onChange({\n          target: {\n            name: props.name,\n            value: values.value,\n          },\n        });\n      }}\n      thousandSeparator\n      isNumericString\n      prefix=\"$\"\n    />\n  );\n}\nNumberFormatCustom.propTypes = {\n  inputRef: PropTypes.func.isRequired,\n  name: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n\nconst EditCptCodeModal = ({\n  isOpen,\n  hendleOnClose,\n  cpt_id,\n  cpt_description,\n  cpt_fee,\n  cpt_favorite,\n  cpt_billable,\n  cpt_notes,\n  handleChangeFee,\n  handleChangeFavorite,\n  handleChangeBillable,\n  handleChangeNotes,\n  handleEditCptCode,\n}) => {\n  const classes = useStyles();\n  const handleKeyUp = (event) => {\n    if (event.keyCode === 13) {\n      handleEditCptCode();\n    }\n  };\n\n  return (\n    <div>\n      <Dialog\n        maxWidth=\"sm\"\n        fullWidth\n        open={isOpen}\n        onClose={hendleOnClose}\n        aria-labelledby=\"alert-dialog-title\"\n        aria-describedby=\"alert-dialog-description\"\n      >\n        <DialogTitle id=\"alert-dialog-title\" className={classes.title}>\n          Edit CPT Code\n        </DialogTitle>\n        <DialogContent className={classes.content}>\n          <DialogContentText id=\"alert-dialog-description\">\n            This page is used to edit cpt code\n          </DialogContentText>\n          <div className={classes.root}>\n            <FormControl component=\"div\" className={classes.formControl}>\n              <Grid item md={3} className={classes.gridMargin}>\n                <TextField\n                  fullWidth\n                  label=\"CPT ID\"\n                  value={cpt_id}\n                  variant=\"outlined\"\n                  size=\"small\"\n                  InputLabelProps={{\n                    shrink: true,\n                  }}\n                  disabled\n                />\n              </Grid>\n              <p className={classes.formHelperText}>The name of the appointm</p>\n            </FormControl>\n            <FormControl component=\"div\" className={classes.formControl}>\n              <Grid item xs={6} md={9} className={classes.gridMargin}>\n                <TextField\n                  fullWidth\n                  label=\"CPT Description\"\n                  value={cpt_description}\n                  variant=\"outlined\"\n                  size=\"small\"\n                  InputLabelProps={{\n                    shrink: true,\n                  }}\n                  disabled\n                />\n              </Grid>\n              <p className={classes.formHelperText}>\n                The name shown in the Appointment\n              </p>\n            </FormControl>\n            <FormControl component=\"div\" className={classes.formControl}>\n              <Grid item md={2} className={classes.gridMargin}>\n                <TextField\n                  fullWidth\n                  autoFocus\n                  label=\"Fee\"\n                  value={cpt_fee || \"\"}\n                  variant=\"outlined\"\n                  size=\"small\"\n                  InputProps={{\n                    inputComponent: NumberFormatCustom,\n                  }}\n                  InputLabelProps={{\n                    shrink: true,\n                  }}\n                  onChange={handleChangeFee}\n                  onKeyUp={handleKeyUp}\n                />\n              </Grid>\n              <p className={classes.formHelperText}>Edit fee here</p>\n            </FormControl>\n            <FormGroup>\n              <FormControlLabel\n                control={(\n                  <Switch\n                    checked={Boolean(cpt_favorite)}\n                    color=\"primary\"\n                    size=\"small\"\n                    name=\"switchBox\"\n                    onChange={handleChangeFavorite}\n                    onKeyUp={handleKeyUp}\n                  />\n                )}\n                label=\"Favorite\"\n                className={classes.root}\n              />\n              <FormControlLabel\n                control={(\n                  <Switch\n                    checked={Boolean(cpt_billable)}\n                    size=\"small\"\n                    color=\"primary\"\n                    name=\"switchBox\"\n                    onChange={handleChangeBillable}\n                    onKeyUp={handleKeyUp}\n                  />\n                )}\n                label=\"Billable\"\n                className={classes.root}\n              />\n            </FormGroup>\n            <FormControl component=\"div\" className={classes.formControl}>\n              <TextField\n                className={classes.noteMargin}\n                fullWidth\n                variant=\"outlined\"\n                multiline\n                name=\"note\"\n                label=\"Notes\"\n                InputLabelProps={{\n                  shrink: true,\n                }}\n                InputProps={{\n                  rows: 8,\n                }}\n                value={cpt_notes}\n                onChange={handleChangeNotes}\n                onKeyUp={handleKeyUp}\n              />\n            </FormControl>\n          </div>\n        </DialogContent>\n        <DialogActions className={classes.modalAction}>\n          <Button\n            size=\"small\"\n            variant=\"outlined\"\n            onClick={hendleOnClose}\n            style={{\n              borderColor: colors.orange[600],\n              color: colors.orange[600],\n            }}\n          >\n            Cancel\n          </Button>\n          <Button\n            variant=\"outlined\"\n            color=\"primary\"\n            size=\"small\"\n            onClick={handleEditCptCode}\n          >\n            Save\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n};\n\nEditCptCodeModal.propTypes = {\n  isOpen: PropTypes.bool.isRequired,\n  hendleOnClose: PropTypes.func.isRequired,\n  cpt_id: PropTypes.string.isRequired,\n  cpt_description: PropTypes.string.isRequired,\n  cpt_fee: PropTypes.string.isRequired,\n  cpt_favorite: PropTypes.string.isRequired,\n  cpt_billable: PropTypes.string.isRequired,\n  cpt_notes: PropTypes.string.isRequired,\n  handleChangeFee: PropTypes.func.isRequired,\n  handleChangeFavorite: PropTypes.func.isRequired,\n  handleChangeBillable: PropTypes.func.isRequired,\n  handleChangeNotes: PropTypes.func.isRequired,\n  handleEditCptCode: PropTypes.func.isRequired,\n};\nexport default EditCptCodeModal;\n","import React, { useState } from \"react\";\n\nimport {\n  IconButton,\n  makeStyles,\n  Paper,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  withStyles,\n} from \"@material-ui/core\";\nimport EditIcon from \"@material-ui/icons/EditOutlined\";\nimport Alert from \"@material-ui/lab/Alert\";\nimport moment from \"moment\";\nimport { useSnackbar } from \"notistack\";\nimport Proptypes from \"prop-types\";\nimport NumberFormat from \"react-number-format\";\n\nimport useAuth from \"../../../../../hooks/useAuth\";\nimport CPTCodesService from \"../../../../../services/cpt.service\";\nimport CptGroupMembersModal from \"./modal/CptGroupMembersModal\";\nimport EditCptCodeModal from \"./modal/EditCptCodeModal\";\n\nconst useStyles = makeStyles((theme) => ({\n  tableContainer: {\n    minWidth: 450,\n    marginTop: theme.spacing(2),\n  },\n}));\n\nconst StyledTableCell = withStyles((theme) => ({\n  head: {\n    backgroundColor: theme.palette.grey,\n    color: theme.palette.grey,\n    fontSize: \"12px\",\n    fontWeight: 700,\n  },\n  body: {\n    fontSize: 14,\n  },\n}))(TableCell);\n\nconst StyledTableRow = withStyles((theme) => ({\n  root: {\n    fontSize: 14,\n    \"&:nth-of-type(odd)\": {\n      backgroundColor: theme.palette.action.hover,\n    },\n    \"& th\": {\n      fontSize: 12,\n    },\n    \"& td\": {\n      padding: \"6px 16px\",\n      fontSize: 12,\n      height: \"50px\",\n    },\n  },\n}))(TableRow);\n\nconst CPTtable = ({ searchResult, fetchCptCodeSearch }) => {\n  const classes = useStyles();\n  const { enqueueSnackbar } = useSnackbar();\n  const { user } = useAuth();\n  const [errors, setErrors] = useState([]);\n  const [isOpen, setIsOpen] = useState(false);\n  const [groupIsOpen, setGroupIsOpen] = useState(false);\n  const [groups, setGroups] = useState([]);\n\n  const [cpt_id, set_cpt_id] = useState(\"\");\n  const [cpt_description, set_cpt_description] = useState(\"\");\n  const [cpt_favorite, set_cpt_favorite] = useState(\"\");\n  const [cpt_fee, set_cpt_fee] = useState(\"\");\n  const [cpt_billable, set_cpt_billable] = useState(\"\");\n  const [cpt_notes, set_cpt_notes] = useState(\"\");\n\n  const payload = {\n    cptId: cpt_id,\n    favorite: cpt_favorite,\n    billable: cpt_billable,\n    fee: cpt_fee,\n    notes: cpt_notes,\n  };\n\n  const handleIsOpen = (id, desc, fee, fav, bill) => {\n    set_cpt_id(id);\n    set_cpt_description(desc);\n    set_cpt_fee(fee);\n    set_cpt_favorite(fav);\n    set_cpt_billable(bill);\n    setIsOpen(true);\n  };\n  const hendleOnClose = () => {\n    setIsOpen(false);\n  };\n\n  const hendleGroupOnClose = () => {\n    setGroupIsOpen(false);\n  };\n\n  const handleGroupIsOpen = (group) => {\n    const getListOfGroup = String(group).split(\";\");\n    const data = [];\n    getListOfGroup.map((g) => {\n      searchResult.filter((c) => {\n        if (String(c.cpt) === g.trim()) {\n          const list = {\n            id: c.id,\n            description: c.cpt,\n            lab: c.lab_company,\n          };\n          data.push(list);\n        }\n        return c;\n      });\n      return g;\n    });\n    setGroups(data);\n    setGroupIsOpen(true);\n  };\n\n  const handleChangeFee = (e) => {\n    set_cpt_fee(e.target.value);\n  };\n  const handleChangeFavorite = (e) => {\n    set_cpt_favorite(e.target.checked);\n  };\n  const handleChangeBillable = (e) => {\n    set_cpt_billable(e.target.checked);\n  };\n\n  const handleChangeNotes = (e) => {\n    set_cpt_notes(e.target.value);\n  };\n\n  const handleEditCptCode = () => {\n    CPTCodesService.updateClientCpt(cpt_id, user.id, payload).then(\n      (response) => {\n        setTimeout(() => {\n          enqueueSnackbar(`${response.data.message}`, {\n            variant: \"success\",\n          });\n        }, 300);\n      },\n      (error) => {\n        setTimeout(() => {\n          setErrors(error.response.error);\n        }, 300);\n      },\n    );\n    setIsOpen(false);\n    setTimeout(() => {\n      fetchCptCodeSearch();\n    }, 200);\n  };\n\n  return (\n    <div>\n      {errors\n        && errors.map((error, index) => (\n          // eslint-disable-next-line react/no-array-index-key\n          <Alert severity=\"error\" key={index}>\n            {error.msg}\n          </Alert>\n        ))}\n      <TableContainer component={Paper} className={classes.tableContainer}>\n        <Table className={classes.table} aria-label=\"a dense table\">\n          <TableHead>\n            <TableRow>\n              <StyledTableCell padding=\"checkbox\" align=\"center\">\n                CPT ID\n              </StyledTableCell>\n              <StyledTableCell padding=\"checkbox\" align=\"center\">\n                CPT Description\n              </StyledTableCell>\n              <StyledTableCell padding=\"checkbox\" align=\"center\">\n                Lab Company\n              </StyledTableCell>\n              <StyledTableCell padding=\"checkbox\" align=\"center\">\n                Favorite\n              </StyledTableCell>\n              <StyledTableCell padding=\"checkbox\" align=\"center\">\n                Billable\n              </StyledTableCell>\n              <StyledTableCell padding=\"checkbox\" align=\"center\">\n                Fee\n              </StyledTableCell>\n              <StyledTableCell padding=\"checkbox\" align=\"center\">\n                Client\n              </StyledTableCell>\n              <StyledTableCell padding=\"checkbox\" align=\"center\">\n                Group\n              </StyledTableCell>\n              <StyledTableCell padding=\"checkbox\" align=\"center\">\n                Updated\n              </StyledTableCell>\n              <StyledTableCell padding=\"checkbox\" align=\"center\">\n                Updated By\n              </StyledTableCell>\n              <StyledTableCell padding=\"checkbox\" align=\"center\">\n                Action\n              </StyledTableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {searchResult.map((result) => (\n              <StyledTableRow key={result.id}>\n                <TableCell\n                  component=\"th\"\n                  scope=\"row\"\n                  padding=\"checkbox\"\n                  align=\"center\"\n                >\n                  {result.id}\n                </TableCell>\n                <TableCell padding=\"checkbox\" align=\"center\">\n                  {result.cpt}\n                </TableCell>\n                <TableCell padding=\"checkbox\" align=\"center\">\n                  {result.lab_company}\n                </TableCell>\n                <TableCell padding=\"checkbox\" align=\"center\">\n                  {result.favorite ? \"Yes\" : \"No\"}\n                </TableCell>\n                <TableCell padding=\"checkbox\" align=\"center\">\n                  {result.billable ? \"Yes\" : \"No\"}\n                </TableCell>\n                <TableCell padding=\"checkbox\" align=\"center\">\n                  <NumberFormat\n                    value={result.fee}\n                    displayType=\"text\"\n                    thousandSeparator\n                    prefix=\"$\"\n                  />\n                </TableCell>\n                <TableCell padding=\"checkbox\" align=\"center\">\n                  {result.client_name}\n                </TableCell>\n                <TableCell\n                  padding=\"checkbox\"\n                  align=\"center\"\n                  style={{ cursor: \"pointer\" }}\n                  onClick={() => handleGroupIsOpen(result.cpt_group)}\n                >\n                  {result.cpt_group\n                    ? String(result.cpt_group).length > 22\n                      ? `${String(result.cpt_group).slice(0, 22)}...`\n                      : String(result.cpt_group)\n                    : \"\"}\n                </TableCell>\n                <TableCell padding=\"checkbox\" align=\"center\">\n                  {result.updated ? moment(result.updated).format(\"lll\") : \"\"}\n                </TableCell>\n                <TableCell padding=\"checkbox\" align=\"center\">\n                  {result.updated_name}\n                </TableCell>\n                <TableCell padding=\"checkbox\" align=\"center\">\n                  <IconButton\n                    aria-label=\"edit\"\n                    onClick={() => handleIsOpen(\n                      result.id,\n                      result.cpt,\n                      result.fee,\n                      result.favorite,\n                      result.billable,\n                    )}\n                  >\n                    <EditIcon fontSize=\"small\" />\n                  </IconButton>\n                </TableCell>\n              </StyledTableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n      <EditCptCodeModal\n        isOpen={isOpen}\n        hendleOnClose={hendleOnClose}\n        cpt_id={cpt_id}\n        cpt_description={cpt_description}\n        cpt_fee={cpt_fee}\n        cpt_favorite={cpt_favorite}\n        cpt_billable={cpt_billable}\n        cpt_notes={cpt_notes}\n        handleChangeFee={handleChangeFee}\n        handleChangeFavorite={handleChangeFavorite}\n        handleChangeBillable={handleChangeBillable}\n        handleChangeNotes={handleChangeNotes}\n        handleEditCptCode={handleEditCptCode}\n      />\n      <CptGroupMembersModal\n        isOpen={groupIsOpen}\n        hendleOnClose={hendleGroupOnClose}\n        groups={groups}\n      />\n    </div>\n  );\n};\n\nCPTtable.propTypes = {\n  searchResult: Proptypes.arrayOf(\n    Proptypes.shape({\n      id: Proptypes.string,\n      cpt: Proptypes.string,\n      lab_company: Proptypes.string,\n      favorite: Proptypes.bool,\n      billable: Proptypes.bool,\n      fee: Proptypes.number,\n      client_name: Proptypes.string,\n      cpt_group: Proptypes.string,\n      updated: Proptypes.string,\n      updated_name: Proptypes.string,\n    }),\n  ).isRequired,\n  fetchCptCodeSearch: Proptypes.func.isRequired,\n};\n\nexport default CPTtable;\n","import React, { useEffect, useState } from \"react\";\n\nimport { CssBaseline, makeStyles } from \"@material-ui/core\";\nimport Typography from \"@material-ui/core/Typography\";\n\nimport CPTCodesService from \"../../../../services/cpt.service\";\nimport CPTform from \"./component/CPTform\";\nimport CPTtable from \"./component/CPTtable\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n    padding: \"25px 0px\",\n  },\n  title: {\n    paddingBottom: theme.spacing(0.5),\n  },\n}));\n\nexport default function CTPcodes() {\n  const classes = useStyles();\n  const [lebCompanyList, setLabCompanyList] = useState([]);\n  const [searchResult, setSearchResult] = useState([]);\n  const [cptId, setCptId] = useState(\"\");\n  const [cptDescription, setCptDescription] = useState(\"\");\n  const [labCompanyId, setLabCompanyId] = useState(\"\");\n  const [favorite, setFavorite] = useState(\"\");\n  const [billable, setBillable] = useState(\"\");\n  const [self, setSelf] = useState(\"\");\n  const [group, setGroup] = useState(\"\");\n  const payload = {\n    cptId,\n    cptDescription,\n    labCompanyId,\n    favorite,\n    billable,\n    self,\n    group,\n  };\n\n  const fetchLabCompanyList = () => {\n    CPTCodesService.getLabCompnayList().then((res) => {\n      setLabCompanyList(res.data);\n    });\n  };\n\n  useEffect(() => {\n    fetchLabCompanyList();\n  }, []);\n\n  const fetchCptCodeSearch = () => {\n    CPTCodesService.search(payload).then((res) => {\n      setSearchResult(res.data.data);\n    });\n  };\n\n  const handleChangeOfCptId = (e) => {\n    setCptId(e.target.value);\n  };\n  const handleChangeOfCptDescription = (e) => {\n    setCptDescription(e.target.value);\n  };\n  const handleChangeOfLabCompanyId = (e) => {\n    setLabCompanyId(e.target.value);\n  };\n  const handleChangeOfFavorite = (e) => {\n    setFavorite(e.target.checked);\n  };\n  const handleChangeOfBillable = (e) => {\n    setBillable(e.target.checked);\n  };\n  const handleChangeOfSelf = (e) => {\n    setSelf(e.target.checked);\n  };\n  const handleChangeOfGroup = (e) => {\n    setGroup(e.target.checked);\n  };\n\n  return (\n    <>\n      <CssBaseline />\n      <div className={classes.root}>\n        <Typography\n          component=\"h1\"\n          variant=\"h2\"\n          color=\"textPrimary\"\n          className={classes.title}\n        >\n          CPT Codes\n        </Typography>\n        <Typography component=\"p\" variant=\"body2\" color=\"textPrimary\">\n          This page is used to manage CTP codes\n        </Typography>\n        <CPTform\n          lebCompanyList={lebCompanyList}\n          fetchCptCodeSearch={fetchCptCodeSearch}\n          handleChangeOfCptId={handleChangeOfCptId}\n          handleChangeOfCptDescription={handleChangeOfCptDescription}\n          handleChangeOfLabCompanyId={handleChangeOfLabCompanyId}\n          handleChangeOfFavorite={handleChangeOfFavorite}\n          handleChangeOfBillable={handleChangeOfBillable}\n          handleChangeOfSelf={handleChangeOfSelf}\n          handleChangeOfGroup={handleChangeOfGroup}\n          labCompanyId={labCompanyId}\n        />\n        {searchResult.length > 0 && (\n          <CPTtable\n            searchResult={searchResult}\n            fetchCptCodeSearch={fetchCptCodeSearch}\n          />\n        )}\n      </div>\n    </>\n  );\n}\n","import axios from \"axios\";\n\nimport authHeader from \"./auth-header\";\n\nconst API_URL = `${process.env.REACT_APP_API_URL}api/v1` || \"http://localhost:5000/api/v1\";\n\nclass CPTCodes {\n  getLabCompnayList() {\n    return axios\n      .get(`${API_URL}/cpt`, { headers: authHeader() })\n      .then((res) => res.data);\n  }\n\n  search(data) {\n    return axios.post(`${API_URL}/cpt/search`, data, { headers: authHeader() });\n  }\n\n  updateClientCpt(id, userId, data) {\n    return axios.post(`${API_URL}/cpt/${id}/${userId}`, data, {\n      headers: authHeader(),\n    });\n  }\n}\n\nexport default new CPTCodes();\n"],"sourceRoot":""}