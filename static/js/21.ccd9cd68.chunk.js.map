{"version":3,"sources":["screens/patient-portal/Appointments/Calendar/index.js","screens/patient-portal/Appointments/Appointments.js","services/patient_portal/patient-portal.service.js","hooks/useDidMountEffect.js"],"names":["renderEventContent","eventInfo","style","color","backgroundColor","event","borderColor","width","padding","borderRadius","cursor","timeText","title","EventCalendar","events","onDayClick","onEventClick","selectedDate","plugins","dayGridPlugin","timeGridPlugin","interactionPlugin","headerToolbar","left","center","right","initialView","weekends","eventContent","dayCellClassNames","arg","dayInfo","selected","date","moment","format","getCellClassName","dateClick","dateStr","eventClick","info","selectable","useStyles","makeStyles","theme","root","flexGrow","paddingBottom","spacing","subTitle","fontSize","inputFix","marginBottom","submitBtn","minWidth","background","minHeight","calendarContainer","marginTop","boxShadow","margin","timingBox","breakpoints","down","currentDate","ml1","marginLeft","noWrap","up","whiteSpace","centerContainer","position","top","transform","errorIcon","messageBox","display","alignItems","lineHeight","tomorrowDate","add","oneYear","Appointments","classes","enqueueSnackbar","useSnackbar","history","useHistory","user","useAuth","useState","errorMessage","setErrorMessage","practitioners","setPractitioners","practitionerDateTimes","setPractitionerDateTimes","timeSlots","setTimeSlots","filteredTimeSlots","setFilteredTimeSlots","bookedAppointments","setBookedAppointments","appointmentTypes","setAppointmentTypes","appointmentLength","setAppointmentLength","showCalendar","setShowCalendar","practitioner","appointmentType","time","userSelection","setUserSelection","isRescheduleAppointment","setIsRescheduleAppointment","location","useLocation","isReschedule","state","appointment","fetchPractitionersAvailableDates","useCallback","practitionerId","PatientPortalService","getPractitionerDates","then","res","filtered","data","filter","x","user_id","fetchAppointmentTypesByPractitioner","reqBody","practitioner_id","getAppointmentTypesByPractitionerId","userSelectionHandler","type","value","fetchPractitioners","getPractitioners","doctors","length","fetchBookedAppointments","params","getBookedAppointments","response","appts","map","booking","start_time","start_dt","end_time","end_dt","useEffect","patient_id","time_start","time_end","prevUserSelection","appointment_type_id","appointment_type_length","useDidMountEffect","setCalendarTime","selectedTime","setCalendarDate","calendarSelectionHandler","timeIntervalSlots","_instance","range","start","lowerDaysDifference","diff","upperDaysDifference","date_end","isPastDate","isTodayDate","dayDateFormat","selectedDay","toLowerCase","selectedTimes","startTime","endTime","filteredSlots","slot","split","trim","ar","find","rm","makeTimeIntervals","increment","toString","parseInt","pad","n","startHr","startMin","endHr","currentHr","currentMin","previous","current","r","push","forEach","item","slots","getTimingLabel","timing","end","getCalendarEvents","holidays","day","capitalize","dateLimit","getDatesArray","getTimingBoxVariant","variant","userSelectedTime","className","Box","mb","Typography","component","Grid","lg","md","sm","xs","TextField","select","required","label","fullWidth","onChange","e","target","option","MenuItem","name","apptLength","id","apptTypeSelectionHandler","disabled","appointment_type","fee","mt","container","Calendar","val","Boolean","Alert","severity","Collapse","in","timeout","index","Button","onClick","timingObject","selectedPractitioner","selectedAppointemntTypeLength","status","reschedule","setTimeout","pathname","appointmentBookingHandler","justify","direction","gutterBottom","axios","get","API_BASE","headers","authHeader","payload","patientId","put","patient","url","client_id","post","appointmentId","pharmacyId","testId","a","delete","func","deps","didMount","useRef"],"mappings":"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","file":"static/js/21.ccd9cd68.chunk.js","sourcesContent":["import React from \"react\";\n\n// eslint-disable-next-line import/order\nimport FullCalendar from \"@fullcalendar/react\"; // this import should be at the top\nimport dayGridPlugin from \"@fullcalendar/daygrid\";\nimport interactionPlugin from \"@fullcalendar/interaction\"; // needed for dayClick\nimport timeGridPlugin from \"@fullcalendar/timegrid\";\nimport moment from \"moment\";\nimport PropTypes from \"prop-types\";\nimport \"./calendar.css\";\n\nfunction renderEventContent(eventInfo) {\n  return (\n    <>\n      <p\n        style={{\n          color: \"#fff\",\n          backgroundColor: eventInfo.event.backgroundColor,\n          borderColor: eventInfo.event.backgroundColor,\n          width: \"100%\",\n          padding: \"3px 5px\",\n          borderRadius: \"3px\",\n          cursor: \"pointer\",\n        }}\n      >\n        {eventInfo.timeText}\n        {\" \"}\n        {eventInfo.event.title}\n      </p>\n    </>\n  );\n}\n\nconst getCellClassName = (dayInfo, selected) => {\n  const { date } = dayInfo;\n  const isSelectedDay = moment(date).format(\"YYYY-MM-DD\") === selected;\n  return isSelectedDay ? \"selected-day\" : \"\";\n};\n\nconst EventCalendar = ({\n  events, onDayClick, onEventClick, selectedDate,\n}) => (\n  <FullCalendar\n    plugins={[dayGridPlugin, timeGridPlugin, interactionPlugin]}\n    headerToolbar={{\n      left: \"title\",\n      center: \"\",\n      right: \"prev next\",\n    }}\n    initialView=\"dayGridMonth\"\n    weekends\n    events={events}\n    eventContent={renderEventContent}\n    dayCellClassNames={(arg) => getCellClassName(arg, selectedDate)}\n    dateClick={(arg) => onDayClick(arg.dateStr)}\n    eventClick={(info) => onEventClick(info)}\n    selectable\n  />\n);\n\nEventCalendar.propTypes = {\n  onDayClick: PropTypes.func.isRequired,\n  onEventClick: PropTypes.func.isRequired,\n  events: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.string.isRequired,\n      date: PropTypes.string.isRequired,\n    }),\n  ).isRequired,\n  selectedDate: PropTypes.string.isRequired,\n};\n\nexport default EventCalendar;\n","import React, { useState, useEffect, useCallback } from \"react\";\n\nimport {\n  makeStyles, Grid, TextField, Typography, MenuItem, Button, Box, Collapse,\n} from \"@material-ui/core\";\nimport Alert from \"@material-ui/lab/Alert\";\nimport moment from \"moment\";\nimport { useSnackbar } from \"notistack\";\nimport { useHistory, useLocation } from \"react-router-dom\";\n\nimport useAuth from \"../../../hooks/useAuth\";\nimport useDidMountEffect from \"../../../hooks/useDidMountEffect\";\nimport PatientPortalService from \"../../../services/patient_portal/patient-portal.service\";\nimport { getDatesArray, capitalize, dayDateFormat } from \"../../../utils/helpers\";\nimport Calendar from \"./Calendar\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n    padding: \"40px 0px\",\n  },\n  title: {\n    paddingBottom: theme.spacing(0.5),\n  },\n  subTitle: {\n    paddingBottom: theme.spacing(1),\n    fontSize: \"14px\",\n  },\n  inputFix: {\n    marginBottom: theme.spacing(1),\n    width: 400,\n  },\n  submitBtn: {\n    minWidth: 120,\n    background: \"#008B00\",\n    minHeight: 50,\n  },\n  calendarContainer: {\n    marginTop: theme.spacing(1),\n    padding: theme.spacing(1),\n    borderRadius: 5,\n    boxShadow: \"-1px 0px 19px -4px rgba(0,17,1,0.45)\",\n    margin: \"0\",\n  },\n  timingBox: {\n    marginBottom: theme.spacing(2),\n    minHeight: 50,\n\n    [theme.breakpoints.down(\"md\")]: {\n      marginBottom: theme.spacing(1),\n      minHeight: 40,\n    },\n  },\n  currentDate: {\n    minHeight: theme.spacing(8),\n  },\n  ml1: {\n    marginLeft: theme.spacing(1),\n  },\n  noWrap: {\n    [theme.breakpoints.up(\"md\")]: {\n      whiteSpace: \"nowrap\",\n    },\n  },\n  centerContainer: {\n    position: \"absolute\",\n    left: \"50%\",\n    top: \"50%\",\n    transform: \"translate(-50%, -50%)\",\n  },\n  errorIcon: {\n    position: \"relative\",\n    top: 5,\n  },\n  messageBox: {\n    display: \"flex\",\n    alignItems: \"center\",\n    marginBottom: theme.spacing(2),\n    backgroundColor: \"rgb(232, 243, 252)\",\n    padding: \"6px 16px\",\n    fontSize: 14,\n    lineHeight: 21,\n    borderRadius: 4,\n    minHeight: 50,\n\n    \"& p\": {\n      color: \"rgb(12, 54, 91)\",\n    },\n  },\n}));\n\nconst currentDate = moment().format(\"YYYY-MM-DD\");\nconst tomorrowDate = moment().add(1, \"days\").format(\"YYYY-MM-DD\");\nconst oneYear = moment().add(365, \"days\").format(\"YYYY-MM-DD\");\n\nconst Appointments = () => {\n  const classes = useStyles();\n  const { enqueueSnackbar } = useSnackbar();\n  const history = useHistory();\n  const { user } = useAuth();\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const [practitioners, setPractitioners] = useState([]);\n  const [practitionerDateTimes, setPractitionerDateTimes] = useState([]);\n  const [timeSlots, setTimeSlots] = useState([]);\n  const [filteredTimeSlots, setFilteredTimeSlots] = useState([]);\n  const [bookedAppointments, setBookedAppointments] = useState([]);\n  const [appointmentTypes, setAppointmentTypes] = useState([]);\n  const [appointmentLength, setAppointmentLength] = useState(null);\n  const [showCalendar, setShowCalendar] = useState(false);\n  const [userSelection, setUserSelection] = useState({\n    practitioner: \"\",\n    appointmentType: \"\",\n    date: null,\n    time: null,\n  });\n  const [isRescheduleAppointment, setIsRescheduleAppointment] = useState(false);\n  const location = useLocation();\n  const isReschedule = location?.state?.appointment;\n\n  const fetchPractitionersAvailableDates = useCallback((practitionerId) => {\n    PatientPortalService.getPractitionerDates().then((res) => {\n      const resData = res.data;\n      const filtered = resData.filter((x) => x.user_id === practitionerId);\n      setPractitionerDateTimes([...filtered]);\n    });\n  }, []);\n\n  const fetchAppointmentTypesByPractitioner = useCallback((practitionerId) => {\n    const reqBody = {\n      data: {\n        practitioner_id: practitionerId,\n      },\n    };\n    PatientPortalService.getAppointmentTypesByPractitionerId(reqBody).then((res) => {\n      setAppointmentTypes(res.data);\n    });\n    fetchPractitionersAvailableDates(practitionerId);\n  }, [fetchPractitionersAvailableDates]);\n\n  const userSelectionHandler = (type, value) => {\n    setUserSelection({\n      ...userSelection,\n      [type]: value,\n    });\n  };\n\n  const fetchPractitioners = useCallback(() => {\n    PatientPortalService.getPractitioners().then((res) => {\n      const doctors = res.data;\n      setPractitioners(doctors);\n      if (doctors.length && !isReschedule) {\n        const practitionerId = 1; // select first user page loads\n        const type = \"practitioner\";\n        setUserSelection({\n          ...userSelection,\n          [type]: practitionerId,\n        });\n        fetchAppointmentTypesByPractitioner(practitionerId);\n      }\n    });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const fetchBookedAppointments = useCallback((practitionerId) => {\n    const params = {\n      practitioner_id: practitionerId,\n    };\n    PatientPortalService.getBookedAppointments(null, params).then((res) => {\n      const response = res.data;\n      if (response.length) {\n        const appts = response.map((booking) => ({\n          start_time: moment(booking.start_dt).format(\"HH:mm\"),\n          end_time: moment(booking.end_dt).format(\"HH:mm\"),\n          ...booking,\n        }));\n        setBookedAppointments(appts);\n      }\n    });\n  }, []);\n\n  useEffect(() => {\n    const appointment = location?.state?.appointment;\n    if (appointment?.patient_id) {\n      const date = moment(appointment.start_dt).format(\"YYYY-MM-DD\");\n      // const minutesFromStartDate = moment(appointment.start_dt).minutes();\n      const startTime = moment(appointment.start_dt).format(\"HH:mm\");\n      const endTime = moment(appointment.end_dt).format(\"HH:mm\");\n      const time = {\n        time_start: startTime,\n        time_end: endTime,\n      };\n      setUserSelection((prevUserSelection) => ({\n        ...prevUserSelection,\n        ...appointment,\n        appointmentType: appointment.appointment_type_id,\n        date,\n        time,\n        practitioner: appointment?.user_id,\n      }));\n      setIsRescheduleAppointment(true);\n      setShowCalendar(true);\n      fetchPractitionersAvailableDates(appointment?.user_id);\n      fetchAppointmentTypesByPractitioner(appointment?.user_id);\n      setAppointmentLength(appointment?.appointment_type_length);\n    }\n  }, [location?.state, fetchPractitionersAvailableDates, fetchAppointmentTypesByPractitioner]);\n\n  useEffect(() => {\n    fetchPractitioners();\n  }, [fetchPractitioners]);\n\n  useDidMountEffect(() => {\n    const practitionerId = userSelection.practitioner;\n    if (practitionerId && !isReschedule) {\n      fetchBookedAppointments(practitionerId);\n    }\n  }, [userSelection.practitioner]);\n\n  const setCalendarTime = (selectedTime) => {\n    const time = \"time\";\n    setUserSelection((prevUserSelection) => ({\n      ...prevUserSelection,\n      [time]: selectedTime,\n    }));\n  };\n\n  const setCalendarDate = (selectedDate) => {\n    const date = \"date\";\n    setUserSelection((prevUserSelection) => ({\n      ...prevUserSelection,\n      [date]: selectedDate,\n    }));\n  };\n\n  const calendarSelectionHandler = (date, timeIntervalSlots) => {\n    let value;\n    if (date?.event) { // event clicked\n      value = moment(date.event._instance.range.start).format(\"YYYY-MM-DD\");\n    } else { // day clicked\n      value = date;\n      const lowerDaysDifference = moment(date).diff(currentDate, \"days\");\n      const upperDaysDifference = moment(date).diff(practitionerDateTimes[0]?.date_end || oneYear, \"days\");\n      const isPastDate = lowerDaysDifference < 0;\n      const isFutureUnAvailableDate = upperDaysDifference > 0;\n      const isTodayDate = lowerDaysDifference === 0;\n      if (isTodayDate || isPastDate || isFutureUnAvailableDate) { // past date or greater than date limit\n        // eslint-disable-next-line max-len\n        setErrorMessage(isPastDate ? \"Can not select a past date.\" : isTodayDate ? `There are no open times on ${dayDateFormat(value)}.` : \"There are no open times on this day.\");\n        setFilteredTimeSlots([]);\n        setCalendarDate(value);\n        setCalendarTime(null);\n        return;\n      }\n    }\n\n    setCalendarDate(value);\n    setErrorMessage(\"\");\n    const selectedDay = moment(value, \"YYYY-MM-DD HH:mm:ss\").format(\"dddd\");\n    const isAvailable = practitionerDateTimes[0][selectedDay.toLowerCase()];\n    if (isAvailable) {\n      // filter time slots for selected date\n      // eslint-disable-next-line max-len\n      const selectedDates = bookedAppointments.filter((x) => moment(x.start_dt).format(\"YYYY-MM-DD\") === value);\n      const selectedTimes = selectedDates.map((time) => ({\n        startTime: time.start_time,\n        endTime: time.end_time,\n      }));\n      const timeSlotsArray = timeIntervalSlots || timeSlots;\n      const timeSlotMap = timeSlotsArray.map((slot) => ({\n        startTime: moment(slot.split(\"-\")[0].trim(), [\"HH.mm\"]).format(\"HH:mm\"),\n        endTime: moment(slot.split(\"-\")[1].trim(), [\"HH.mm\"]).format(\"HH:mm\"),\n      }));\n      // eslint-disable-next-line max-len\n      const filteredSlots = timeSlotMap.filter((ar) => !selectedTimes.find((rm) => (rm.startTime === ar.startTime || ar.endTime === rm.endTime)));\n      // console.log({\n      //   selectedDates, selectedTimes, filteredSlots\n      // })\n      setFilteredTimeSlots([...filteredSlots]);\n      if (!filteredSlots.length) {\n        setErrorMessage(\"There are no open times on this day.\");\n      }\n    } else {\n      setErrorMessage(`There are no open times on ${dayDateFormat(value)}.`);\n      setFilteredTimeSlots([]);\n      setCalendarTime(null);\n    }\n  };\n\n  const appointmentBookingHandler = () => {\n    const selectedPractitioner = practitioners.filter((x) => x.user_id === userSelection.practitioner);\n    let selectedAppointemntTypeLength = userSelection?.appointment_type_length || 0;\n    if (!selectedAppointemntTypeLength) {\n      selectedAppointemntTypeLength = appointmentTypes\n        ?.find((item) => item.id === userSelection.appointmentType)?.length;\n    }\n\n    if (!!userSelection.time && userSelection.date) {\n      const reqBody = {\n        data: {\n          user_id: selectedPractitioner?.[0]?.user_id,\n          // do something with app status because it's going to server each time.\n          ...(!isRescheduleAppointment && { status: \"R\" }),\n          start_dt: `${moment(userSelection.date).format(\"YYYY-MM-DD\")} ${userSelection.time.time_start}`,\n          end_dt: `${moment(userSelection.date).format(\"YYYY-MM-DD\")} ${userSelection.time.time_end}`,\n          patient_id: user?.id,\n          reschedule: isRescheduleAppointment,\n          appointment_type_id: userSelection.appointmentType,\n        },\n      };\n      PatientPortalService[isRescheduleAppointment\n        ? \"updateAppointment\"\n        : \"bookAppointment\"](reqBody, userSelection?.id).then(() => {\n        setTimeout(() => {\n          setShowCalendar(false);\n          setAppointmentTypes([]);\n          setUserSelection({\n            ...userSelection,\n            practitioner: \"\",\n            appointmentType: \"\",\n            date: null,\n            time: null,\n          });\n          history.push({\n            pathname: \"/patient/appointments/confirmation\",\n            state: {\n              practitioner: selectedPractitioner?.[0]?.name,\n              appointmentLength: selectedAppointemntTypeLength,\n              date: userSelection?.date,\n              time: userSelection?.time,\n              reschedule: isRescheduleAppointment,\n            },\n          });\n        }, 1000);\n        enqueueSnackbar(\n          `Appointment ${isRescheduleAppointment ? \"rescheduled\" : \"requested\"} successfully`, {\n            variant: \"success\",\n          },\n        );\n      });\n    } else {\n      setErrorMessage(\"Date & Time selection is required\");\n    }\n  };\n\n  /* eslint-disable */\n  const makeTimeIntervals = (startTime, endTime, increment) => {\n    startTime = startTime.toString().split(\":\");\n    endTime = endTime.toString().split(\":\");\n    increment = parseInt(increment, 10);\n\n    var pad = (n) => { return (n < 10) ? \"0\" + n.toString() : n; },\n      startHr = parseInt(startTime[0], 10),\n      startMin = parseInt(startTime[1], 10),\n      endHr = parseInt(endTime[0], 10),\n      currentHr = startHr,\n      currentMin = startMin,\n      previous = pad(currentHr) + \":\" + pad(currentMin),\n      current = \"\",\n      r = [];\n\n    do {\n      currentMin += increment;\n      if ((currentMin % 60) === 0 || currentMin > 60) {\n        currentMin = (currentMin === 60) ? 0 : currentMin - 60;\n        currentHr += 1;\n      }\n      current = currentHr + \":\" + pad(currentMin);\n      r.push(previous + \" - \" + current);\n      previous = current;\n    } while (currentHr !== endHr);\n\n    return r;\n  };\n  /* eslint-enable */\n\n  useDidMountEffect(() => {\n    if (practitionerDateTimes.length && appointmentLength) {\n      let timeIntervalSlots = [];\n      practitionerDateTimes.forEach((item) => {\n        const slots = makeTimeIntervals(item.time_start, item.time_end, appointmentLength);\n        timeIntervalSlots = [...timeIntervalSlots, ...slots];\n      });\n      setTimeSlots([...timeIntervalSlots]);\n      calendarSelectionHandler(userSelection.date, timeIntervalSlots);\n    }\n  }, [practitionerDateTimes, appointmentLength]);\n\n  const apptTypeSelectionHandler = (value) => {\n    const name = \"appointmentType\";\n    setUserSelection((prevUserSelection) => ({\n      ...prevUserSelection,\n      [name]: value,\n    }));\n    let apptLength = appointmentTypes.find((item) => item.id === value)?.length;\n    apptLength = apptLength === 45 ? 60 : apptLength;\n    setAppointmentLength(apptLength);\n\n    if (practitionerDateTimes.length) {\n      // generating time slots\n      let timeIntervalSlots = [];\n      practitionerDateTimes.forEach((item) => {\n        const slots = makeTimeIntervals(item.time_start, item.time_end, apptLength);\n        timeIntervalSlots = [...timeIntervalSlots, ...slots];\n      });\n      setTimeSlots([...timeIntervalSlots]);\n      const selectedDate = userSelection.date;\n      if (selectedDate) {\n        calendarSelectionHandler(selectedDate, timeIntervalSlots); // selected date by default\n      } else { // when calendar first loads\n        calendarSelectionHandler(tomorrowDate, timeIntervalSlots); // select tomorrow date by default\n      }\n    }\n    if (!showCalendar) { // show calendar if not visible\n      setShowCalendar(true);\n    }\n  };\n\n  const getTimingLabel = (timing) => {\n    const start = timing.startTime;\n    const end = timing.endTime;\n    const startTime = moment(start, [\"HH.mm\"]).format(\"h:mm A\");\n    const endTime = moment(end, [\"HH.mm\"]).format(\"h:mm A\");\n    return `${startTime} - ${endTime}`;\n  };\n\n  const getCalendarEvents = useCallback(() => {\n    const holidays = [\"Saturday\", \"Sunday\"];\n    const days = [\"monday\", \"tuesday\", \"wednesday\", \"thursday\", \"friday\"];\n    if (practitionerDateTimes.length) {\n      days.forEach((day) => {\n        if (!practitionerDateTimes[0][day]) {\n          holidays.push(capitalize(day));\n        }\n      });\n    }\n    const dateLimit = practitionerDateTimes[0].date_end || oneYear;\n    // using tomorrowDate: allow user to book appts from tomorrow\n    const availableDates = getDatesArray(tomorrowDate, dateLimit, holidays).map((date) => ({\n      title: \"Available\",\n      date,\n      backgroundColor: \"#008B00\",\n    }));\n    return availableDates;\n  }, [practitionerDateTimes]);\n\n  const getTimingBoxVariant = useCallback((timing) => {\n    let variant = \"outlined\";\n    const userSelectedTime = userSelection?.time;\n    const { startTime, endTime } = timing;\n    if (userSelectedTime?.time_start === startTime && userSelectedTime?.time_end === endTime) {\n      variant = \"contained\";\n    }\n    return variant;\n  }, [userSelection.time]);\n\n  return (\n    <div className={classes.root}>\n      <Box mb={2}>\n        <Typography\n          component=\"h1\"\n          variant=\"h2\"\n          color=\"textPrimary\"\n          className={classes.title}\n        >\n          Appointments\n        </Typography>\n        <Typography\n          variant=\"h5\"\n          color=\"textPrimary\"\n          className={classes.subTitle}\n        >\n          Please select a date and time\n        </Typography>\n      </Box>\n      <Grid item lg={3} md={4} sm={6} xs={12}>\n        <TextField\n          select\n          required\n          variant=\"outlined\"\n          label=\"Select Practitioner\"\n          margin=\"dense\"\n          fullWidth\n          value={userSelection.practitioner}\n          className={classes.inputFix}\n          onChange={(e) => userSelectionHandler(\"practitioner\", e.target.value)}\n        >\n          {practitioners.map((option) => (\n            <MenuItem key={option.user_id} value={option.user_id}>\n              {option.name}\n            </MenuItem>\n          ))}\n        </TextField>\n        <TextField\n          select\n          required\n          variant=\"outlined\"\n          label=\"Select Appointment Type\"\n          margin=\"dense\"\n          fullWidth\n          value={userSelection.appointmentType}\n          className={classes.inputFix}\n          onChange={(e) => apptTypeSelectionHandler(e.target.value)}\n          disabled={!appointmentTypes.length}\n        >\n          {appointmentTypes.map((option) => (\n            <MenuItem key={option.id} value={option.id}>\n              {`${option.appointment_type} - ${option.length} minutes - $${option.fee}`}\n            </MenuItem>\n          ))}\n        </TextField>\n      </Grid>\n      {showCalendar && (\n        practitionerDateTimes.length ? (\n          <Box mt={3}>\n            <Grid item lg={9} md={9} sm={12} xs={12}>\n              <Grid\n                container\n                className={classes.calendarContainer}\n                spacing={3}\n              >\n                <Grid item lg={9} md={9} sm={9} xs={9}>\n                  <Calendar\n                    events={getCalendarEvents()}\n                    onDayClick={(val) => calendarSelectionHandler(val)}\n                    onEventClick={(val) => calendarSelectionHandler(val)}\n                    selectedDate={userSelection.date}\n                  />\n                </Grid>\n                <Grid item lg={3} md={3} sm={3} xs={3}>\n                  <Grid className={classes.currentDate}>\n                    <Typography\n                      variant=\"h4\"\n                      component=\"h1\"\n                      color=\"textPrimary\"\n                    >\n                      <span className={classes.noWrap}>\n                        {userSelection.date\n                          ? moment(userSelection.date).format(\"dddd, MMM D YYYY\")\n                          : \"\"}\n                      </span>\n                    </Typography>\n                  </Grid>\n                  {Boolean(errorMessage.length) && (\n                    <Alert severity=\"info\">\n                      {errorMessage}\n                    </Alert>\n                  )}\n                  <Collapse\n                    in={Boolean(userSelection?.date && filteredTimeSlots.length)}\n                    timeout={500}\n                  >\n                    <Grid className={classes.messageBox}>\n                      <Typography>\n                        Please select one of the following times.\n                      </Typography>\n                    </Grid>\n                    {\n                      userSelection?.date && filteredTimeSlots.map((timing, index) => (\n                        <Button\n                          key={`${timing.startTime}-${timing.endTime}`}\n                          onClick={() => {\n                            const timingObject = {\n                              id: index,\n                              time_start: timing.startTime,\n                              time_end: timing.endTime,\n                            };\n                            userSelectionHandler(\"time\", timingObject);\n                          }}\n                          className={classes.timingBox}\n                          variant={getTimingBoxVariant(timing)}\n                          color=\"primary\"\n                          fullWidth\n                        >\n                          {getTimingLabel(timing)}\n                        </Button>\n                      ))\n                    }\n                    <Button\n                      fullWidth\n                      type=\"submit\"\n                      color=\"secondary\"\n                      variant=\"contained\"\n                      className={classes.submitBtn}\n                      onClick={() => appointmentBookingHandler()}\n                    >\n                      {isRescheduleAppointment ? \"Reschedule Appointment\" : \"Book Appointment\"}\n                    </Button>\n                  </Collapse>\n                </Grid>\n              </Grid>\n            </Grid>\n          </Box>\n        ) : (\n          <Grid\n            container\n            justify=\"center\"\n            alignItems=\"center\"\n            direction=\"column\"\n            className={classes.centerContainer}\n          >\n            <Typography variant=\"h3\" gutterBottom>\n              No time slots available for this practitioner\n            </Typography>\n          </Grid>\n        ))}\n    </div>\n  );\n};\n\nexport default Appointments;\n","import axios from \"axios\";\n\nimport { API_BASE } from \"../../utils/API_BASE\";\nimport authHeader from \"../auth-header\";\n\nclass PatientPortalService {\n  // patient profile\n  getProfile() {\n    return axios.get(`${API_BASE}/client-portal/patient`, { headers: authHeader() }).then((res) => res.data);\n  }\n\n  updateProfile(payload, patientId) {\n    return axios.put(`${API_BASE}/client-portal/patient/${patientId}`, payload, {\n      headers: authHeader(),\n    });\n  }\n\n  // appointments\n  getPractitioners(patient) {\n    let url = `${API_BASE}/client-portal/practitioners`;\n    if (patient) {\n      // eslint-disable-next-line max-len\n      url = `${API_BASE}/client-portal/practitioners/?patient_id=${patient.id}&client_id=${patient.client_id}`;\n    }\n    return axios\n      .get(url, {\n        headers: authHeader(),\n      })\n      .then((res) => res.data);\n  }\n\n  getPractitionerDates(patient) {\n    let url = `${API_BASE}/client-portal/practitioner-dates`;\n    if (patient) {\n      // eslint-disable-next-line max-len\n      url = `${API_BASE}/client-portal/practitioner-dates/?patient_id=${patient.id}&client_id=${patient.client_id}`;\n    }\n    return axios\n      .get(url, {\n        headers: authHeader(),\n      })\n      .then((res) => res.data);\n  }\n\n  getBookedAppointments(patient, params) {\n    let url = `${API_BASE}/client-portal/booked-appointments`;\n    if (patient) {\n      // eslint-disable-next-line max-len\n      url = `${API_BASE}/client-portal/booked-appointments?patient_id=${patient.id}&client_id=${patient.client_id}`;\n    }\n    return axios\n      .get(url, {\n        headers: authHeader(),\n        params,\n      })\n      .then((res) => res.data);\n  }\n\n  getAppointmentTypesByPractitionerId(data) {\n    return axios\n      .post(`${API_BASE}/client-portal/appointment-types`, data, {\n        headers: authHeader(),\n      })\n      .then((res) => res.data);\n  }\n\n  bookAppointment(data) {\n    return axios\n      .post(`${API_BASE}/client-portal/appointment`, data, {\n        headers: authHeader(),\n      })\n      .then((res) => res.data);\n  }\n\n  updateAppointment(payload, appointmentId) {\n    return axios\n      .put(`${API_BASE}/client-portal/appointment/${appointmentId}`, payload, {\n        headers: authHeader(),\n      })\n      .then((res) => res.data);\n  }\n\n  // encounters\n  getEncounters(patient) {\n    let url = `${API_BASE}/client-portal/encounters`;\n    if (patient) {\n      // eslint-disable-next-line max-len\n      url = `${API_BASE}/client-portal/encounters/?patient_id=${patient.id}&client_id=${patient.client_id}`;\n    }\n    return axios\n      .get(url, {\n        headers: authHeader(),\n      })\n      .then((res) => res.data);\n  }\n\n  // lab/documents\n  getLabDocuments(patient) {\n    let url = `${API_BASE}/client-portal/labs`;\n    if (patient) {\n      // eslint-disable-next-line max-len\n      url = `${API_BASE}/client-portal/labs/?patient_id=${patient.id}&client_id=${patient.client_id}`;\n    }\n    return axios\n      .get(url, {\n        headers: authHeader(),\n      })\n      .then((res) => res.data);\n  }\n\n  createLabDocuments(patient, reqBody) {\n    let url = `${API_BASE}/client-portal/labs`;\n    if (patient) {\n      // eslint-disable-next-line max-len\n      url = `${API_BASE}/client-portal/labs/?patient_id=${patient.id}&client_id=${patient.client_id}`;\n    }\n    return axios\n      .post(url, reqBody, {\n        headers: authHeader(),\n      })\n      .then((res) => res.data);\n  }\n\n  // Billings\n  getBillings(patient) {\n    let url = `${API_BASE}/client-portal/billings`;\n    if (patient) {\n      // eslint-disable-next-line max-len\n      url = `${API_BASE}/client-portal/billings/?patient_id=${patient.id}&client_id=${patient.client_id}`;\n    }\n\n    return axios\n      .get(url, {\n        headers: authHeader(),\n      })\n      .then((res) => res.data);\n  }\n\n  createBilling(data) {\n    return axios\n      .post(`${API_BASE}/client-portal/billings`, data, {\n        headers: authHeader(),\n      })\n      .then((res) => res.data);\n  }\n\n  getBalance(patient) {\n    let url = `${API_BASE}/client-portal/balance`;\n    if (patient) {\n      // eslint-disable-next-line max-len\n      url = `${API_BASE}/client-portal/balance/?patient_id=${patient.id}&client_id=${patient.client_id}`;\n    }\n    return axios\n      .get(url, {\n        headers: authHeader(),\n      })\n      .then((res) => res.data);\n  }\n\n  // Payment Methods\n  getPaymentMethods(patient) {\n    let url = `${API_BASE}/patient-portal/payment-methods`;\n    if (patient) {\n      // eslint-disable-next-line max-len\n      url = `${API_BASE}/patient-portal/payment-methods/?patient_id=${patient.id}&client_id=${patient.client_id}`;\n    }\n    return axios\n      .get(url, {\n        headers: authHeader(),\n      })\n      .then((res) => res.data);\n  }\n\n  // Pharmacies\n  getPharmacies() {\n    return axios\n      .get(`${API_BASE}/client-portal/pharmacy`, {\n        headers: authHeader(),\n      })\n      .then((res) => res.data);\n  }\n\n  searchPharmacies(data) {\n    return axios\n      .post(`${API_BASE}/client-portal/pharmacy/search`, data, {\n        headers: authHeader(),\n      })\n      .then((res) => res.data);\n  }\n\n  updatePharmacy(pharmacyId, payload) {\n    return axios.put(`${API_BASE}/client-portal/pharmacy/${pharmacyId}`, payload, {\n      headers: authHeader(),\n    })\n      .then((res) => res.data);\n  }\n\n  // Requisitions\n  getRequisitions(patient) {\n    let url = `${API_BASE}/client-portal/lab_requisitions`;\n    if (patient) {\n      // eslint-disable-next-line max-len\n      url = `${API_BASE}/client-portal/lab_requisitions/?patient_id=${patient.id}&client_id=${patient.client_id}`;\n    }\n    return axios\n      .get(url, {\n        headers: authHeader(),\n      })\n      .then((res) => res.data);\n  }\n\n  // Lab billing\n  getLabBilling(patient) {\n    let url = `${API_BASE}/client-portal/lab_billing`;\n    if (patient) {\n        // eslint-disable-next-line max-len\n      url = `${API_BASE}/client-portal/lab_billing/?patient_id=${patient.id}&client_id=${patient.client_id}`;\n    }\n    return axios\n      .get(url, {\n        headers: authHeader(),\n      })\n      .then((res) => res.data);\n  }\n\n\n  // test list\n  getTestList(patient) {\n    let url = `${API_BASE}/client-portal/lab_requisitions/test-list`;\n    if (patient) {\n      // eslint-disable-next-line max-len\n      url = `${API_BASE}/client-portal/lab_requisitions/?patient_id=${patient.id}&client_id=${patient.client_id}`;\n    }\n    return axios\n      .get(url, {\n        headers: authHeader(),\n      })\n      .then((res) => res.data);\n  }\n\n  async getTestProfileInfo(testId) {\n    const url = `${API_BASE}/client-portal/lab_requisitions/test-profile-info?testId=${testId}`;\n\n    const res = await axios.get(url, {\n      headers: authHeader(),\n    });\n    return res.data;\n  }\n\n  async getProfileTests(testId) {\n    const url = `${API_BASE}/client-portal/lab_requisitions/profile-tests?testId=${testId}`;\n\n    const res = await axios.get(url, {\n      headers: authHeader(),\n    });\n\n    return res.data;\n  }\n\n  // Handouts\n  getHandouts() {\n    return axios\n      .get(`${API_BASE}/client-portal/handouts`, {\n        headers: authHeader(),\n      })\n      .then((res) => res.data);\n  }\n\n  createHandouts() {\n    return axios\n      .post(`${API_BASE}/client-portal/handouts`, {\n        headers: authHeader(),\n      })\n      .then((res) => res.data);\n  }\n\n  deleteHandout(id) {\n    return axios\n      .delete(`${API_BASE}/client-portal/handouts/${id}`, {\n        headers: authHeader(),\n      })\n      .then((res) => res.data);\n  }\n\n  // Prescriptions\n  getPrescriptions() {\n    return axios\n      .get(`${API_BASE}/client-portal/prescription`, {\n        headers: authHeader(),\n      })\n      .then((res) => res.data);\n  }\n}\n\nexport default new PatientPortalService();\n","import { useEffect, useRef } from \"react\";\n\nconst useDidMountEffect = (func, deps) => {\n  const didMount = useRef(false);\n\n  useEffect(() => {\n    if (didMount.current) func();\n    else didMount.current = true;\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, deps);\n};\n\nexport default useDidMountEffect;\n"],"sourceRoot":""}