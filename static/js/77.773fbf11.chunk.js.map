{"version":3,"sources":["screens/patient-portal/ResetPassword.js","components/common/Error.js","services/patient_portal/auth.service.js","screens/patient-portal/auth/ForgotPassword/Success.js"],"names":["useStyles","makeStyles","theme","root","marginTop","spacing","paper","display","flexDirection","alignItems","pageTitle","marginBottom","resetPasswordFormSentWrapper","resetPasswordFormWrapper","submit","margin","PatientResetPassword","classes","enqueueSnackbar","useSnackbar","useParams","patientId","token","useState","password","setPassword","confirmPassword","setConfirmPassword","client","setClient","fieldErrors","setFieldErrors","success","setSuccess","component","maxWidth","className","avatar","lockIcon","variant","errors","header","loginText","form","noValidate","value","required","fullWidth","name","label","type","id","autoComplete","onChange","event","target","onBlur","length","msg","param","validatePasswod","disabled","color","onClick","preventDefault","AuthService","resetPassword","then","response","data","message","error","status","Error","children","map","index","severity","defaultProps","PatientAuthService","user","a","axios","post","API_BASE","client_id","email","loginResponse","accessToken","localStorage","setItem","JSON","stringify","clientCode","get","res","patient","textAlign","fontSize","lineHeight","Success","href","code"],"mappings":"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","file":"static/js/77.773fbf11.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n\nimport Avatar from \"@material-ui/core/Avatar\";\nimport Button from \"@material-ui/core/Button\";\nimport Container from \"@material-ui/core/Container\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Typography from \"@material-ui/core/Typography\";\nimport LockOutlinedIcon from \"@material-ui/icons/LockOutlined\";\nimport { useSnackbar } from \"notistack\";\nimport { useParams } from \"react-router-dom\";\n\nimport Error from \"../../components/common/Error\";\nimport AuthService from \"../../services/patient_portal/auth.service\";\nimport Success from \"./auth/ForgotPassword/Success\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    marginTop: theme.spacing(8),\n  },\n  paper: {\n    marginTop: theme.spacing(8),\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n  },\n  pageTitle: {\n    marginBottom: theme.spacing(3),\n  },\n  resetPasswordFormSentWrapper: {},\n  resetPasswordFormWrapper: {},\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n}));\n\nconst PatientResetPassword = () => {\n  const classes = useStyles();\n  const { enqueueSnackbar } = useSnackbar();\n  const { patientId, token } = useParams();\n  const [password, setPassword] = useState(\"\");\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\n  const [client, setClient] = useState(\"\");\n  const [fieldErrors, setFieldErrors] = useState([]);\n  const [success, setSuccess] = useState(false);\n\n  const handlePasswordReset = (e) => {\n    e.preventDefault();\n    AuthService.resetPassword(patientId, token, password).then(\n      (response) => {\n        enqueueSnackbar(`${response.data.message}`, {\n          variant: \"success\",\n        });\n        setClient(response.data.data.client);\n        setSuccess(true);\n      },\n      (error) => {\n        if (!error.response) {\n          return;\n        }\n        setSuccess(false);\n        const { data, status } = error.response;\n\n        if (status === 400) {\n          setFieldErrors(data.message);\n        } else {\n          setFieldErrors([]);\n        }\n      },\n    );\n    setPassword(\"\");\n    setConfirmPassword(\"\");\n  };\n\n  const validatePasswod = (event) => {\n    if (event.target.value.length < 8) {\n      setFieldErrors([\n        {\n          value: event.target.value,\n          msg: \"Too Weak. Must be atleast 8 Characters\",\n          param: \"user.password\",\n        },\n      ]);\n    } else {\n      setFieldErrors([]);\n    }\n  };\n  const validatePasswodConfirm = () => {\n    if (confirmPassword !== password) {\n      setFieldErrors([\n        {\n          value: `password: ${password} confirmPassword ${confirmPassword}`,\n          msg: \"Password and ConfirmPassword must be same!\",\n        },\n      ]);\n    }\n    if (confirmPassword === password) {\n      setFieldErrors([]);\n    }\n  };\n\n  return (\n    <Container component=\"main\" maxWidth=\"xs\" className={classes.root}>\n      <CssBaseline />\n      <div className={classes.paper}>\n        <Avatar className={classes.avatar}>\n          <LockOutlinedIcon className={classes.lockIcon} />\n        </Avatar>\n        <Typography component=\"h1\" variant=\"h2\" className={classes.pageTitle}>\n          Update your password\n        </Typography>\n        <Error errors={fieldErrors} />\n        {success && client && (\n          <Success\n            header=\"Your password has been saved.\"\n            loginText=\"Sign back in\"\n            client={client}\n          />\n        )}\n        {!success && (\n          <div className={classes.resetPasswordFormWrapper}>\n            <form className={classes.form} noValidate>\n              <TextField\n                value={password}\n                variant=\"outlined\"\n                margin=\"normal\"\n                required\n                fullWidth\n                name=\"password\"\n                label=\"Password\"\n                type=\"password\"\n                id=\"password\"\n                autoComplete=\"current-password\"\n                onChange={(event) => setPassword(event.target.value)}\n                onBlur={(event) => validatePasswod(event)}\n              />\n              <TextField\n                value={confirmPassword}\n                variant=\"outlined\"\n                margin=\"normal\"\n                required\n                fullWidth\n                name=\"password\"\n                label=\"Confirm Password\"\n                type=\"password\"\n                id=\"confirmPassword\"\n                autoComplete=\"confirm-password\"\n                onChange={(event) => setConfirmPassword(event.target.value)}\n                onBlur={(event) => validatePasswodConfirm(event)}\n              />\n              <Button\n                fullWidth\n                disabled={\n                  !password || !confirmPassword || password !== confirmPassword\n                }\n                variant=\"contained\"\n                color=\"primary\"\n                className={classes.submit}\n                onClick={(event) => handlePasswordReset(event)}\n              >\n                Submit\n              </Button>\n            </form>\n          </div>\n        )}\n      </div>\n    </Container>\n  );\n};\n\nexport default PatientResetPassword;\n","import React from \"react\";\n\nimport Alert from \"@material-ui/lab/Alert\";\nimport PropTypes from \"prop-types\";\n\nconst Error = ({ errors, variant, children }) => (\n  <>\n    {errors\n      && errors.map((error, index) => (\n        // eslint-disable-next-line react/no-array-index-key\n        <Alert severity=\"error\" variant={variant} key={index}>\n          {error.msg}\n          {children}\n        </Alert>\n      ))}\n  </>\n);\n\nError.defaultProps = {\n  errors: null,\n  children: null,\n  variant: \"outlined\",\n};\n\nError.propTypes = {\n  errors: PropTypes.arrayOf(\n    PropTypes.shape({\n      msg: PropTypes.string.isRequired,\n    }),\n  ),\n  variant: PropTypes.string,\n  children: PropTypes.node,\n};\nexport default Error;\n","import axios from \"axios\";\n\nimport { API_BASE } from \"../../utils/API_BASE\";\n\nclass PatientAuthService {\n  async login(user) {\n    const loginResponse = await axios.post(`${API_BASE}/auth/patient/login`, {\n      client_id: user.client_id,\n      email: user.email,\n      password: user.password,\n    });\n    if (loginResponse.data) {\n      if (loginResponse.data.data.accessToken) {\n        localStorage.setItem(\"user\", JSON.stringify(loginResponse.data.data));\n      }\n      return loginResponse.data;\n    }\n    return false;\n  }\n\n  getClientCode(clientCode) {\n    return axios\n      .get(`${API_BASE}/auth/patient/client/?c=${clientCode}`)\n      .then((res) => res.data);\n  }\n\n  validate(data) {\n    return axios.post(`${API_BASE}/auth/field/validate`, data);\n  }\n\n  register(patient) {\n    return axios.post(`${API_BASE}/auth/patient/signup`, patient);\n  }\n\n  passwordChangeRequest(email, data) {\n    return axios.post(`${API_BASE}/auth/patient/reset_password/${email}`, data);\n  }\n\n  resetPassword(patientId, token, password) {\n    return axios.post(`${API_BASE}/auth/patient/reset/${patientId}/${token}`, {\n      password,\n    });\n  }\n}\n\nexport default new PatientAuthService();\n","import React from \"react\";\n\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Link from \"@material-ui/core/Link\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport PropTypes from \"prop-types\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    margin: theme.spacing(3),\n    textAlign: \"center\",\n    fontSize: \"15px\",\n    lineHeight: \"24px\",\n  },\n}));\n\nconst Success = ({ header, loginText, client }) => {\n  const classes = useStyles();\n  return (\n    <Card className={classes.root} variant=\"outlined\">\n      <CardContent>\n        <p>\n          {header}\n          {\" \"}\n          <Link href={`/login/${client.code}`}>{loginText}</Link>\n        </p>\n      </CardContent>\n    </Card>\n  );\n};\n\nSuccess.defaultProps = {\n  client: null,\n};\n\nSuccess.propTypes = {\n  loginText: PropTypes.string.isRequired,\n  header: PropTypes.string.isRequired,\n  client: PropTypes.arrayOf(\n    PropTypes.shape({\n      client_id: PropTypes.string,\n      name: PropTypes.string,\n      code: PropTypes.string.isRequired,\n    }),\n  ),\n};\n\nexport default Success;\n"],"sourceRoot":""}