{"version":3,"sources":["screens/corporate-portal/Auth/ResetPassword.js","components/common/Error.js","services/corporate_portal/auth.service.js","screens/corporate-portal/Auth/ForgetPassword/Success.js"],"names":["useStyles","makeStyles","theme","root","marginTop","spacing","paper","display","flexDirection","alignItems","pageTitle","marginBottom","resetPasswordFormSentWrapper","resetPasswordFormWrapper","submit","margin","ResetPassword","classes","enqueueSnackbar","useSnackbar","useParams","corporateId","token","useState","password","setPassword","confirmPassword","setConfirmPassword","fieldErrors","setFieldErrors","success","setSuccess","component","maxWidth","className","avatar","lockIcon","variant","errors","header","loginText","form","noValidate","value","required","fullWidth","name","label","type","id","autoComplete","onChange","event","target","onBlur","length","msg","param","validatePasswod","disabled","color","onClick","preventDefault","AuthService","resetPassword","then","response","data","message","error","status","Error","children","map","index","severity","defaultProps","email","axios","post","API_BASE","textAlign","fontSize","lineHeight","Success","href"],"mappings":"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","file":"static/js/76.dbf5b794.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n\nimport Avatar from \"@material-ui/core/Avatar\";\nimport Button from \"@material-ui/core/Button\";\nimport Container from \"@material-ui/core/Container\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Typography from \"@material-ui/core/Typography\";\nimport LockOutlinedIcon from \"@material-ui/icons/LockOutlined\";\nimport { useSnackbar } from \"notistack\";\nimport { useParams } from \"react-router-dom\";\n\nimport Error from \"../../../components/common/Error\";\nimport AuthService from \"../../../services/corporate_portal/auth.service\";\nimport Success from \"./ForgetPassword/Success\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    marginTop: theme.spacing(8),\n  },\n  paper: {\n    marginTop: theme.spacing(8),\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n  },\n  pageTitle: {\n    marginBottom: theme.spacing(3),\n  },\n  resetPasswordFormSentWrapper: {},\n  resetPasswordFormWrapper: {},\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n}));\n\nconst ResetPassword = () => {\n  const classes = useStyles();\n  const { enqueueSnackbar } = useSnackbar();\n  const { corporateId, token } = useParams();\n  const [password, setPassword] = useState(\"\");\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\n  const [fieldErrors, setFieldErrors] = useState([]);\n  const [success, setSuccess] = useState(false);\n\n  const handlePasswordReset = (e) => {\n    e.preventDefault();\n    AuthService.resetPassword(corporateId, token, password).then(\n      (response) => {\n        enqueueSnackbar(`${response.data.message}`, {\n          variant: \"success\",\n        });\n        setSuccess(true);\n      },\n      (error) => {\n        if (!error.response) {\n          return;\n        }\n        const { data, status } = error.response;\n\n        if (status === 400) {\n          setFieldErrors(data.message);\n        } else {\n          setFieldErrors([]);\n        }\n      },\n    );\n    setPassword(\"\");\n    setConfirmPassword(\"\");\n  };\n\n  const validatePasswod = (event) => {\n    if (event.target.value.length < 8) {\n      setFieldErrors([\n        {\n          value: event.target.value,\n          msg: \"Too Weak. Must be atleast 8 Characters\",\n          param: \"user.password\",\n        },\n      ]);\n    } else {\n      setFieldErrors([]);\n    }\n  };\n  const validatePasswodConfirm = () => {\n    if (confirmPassword !== password) {\n      setFieldErrors([\n        {\n          value: `password: ${password} confirmPassword ${confirmPassword}`,\n          msg: \"Password and ConfirmPassword must be same!\",\n        },\n      ]);\n    }\n    if (confirmPassword === password) {\n      setFieldErrors([]);\n    }\n  };\n\n  return (\n    <Container component=\"main\" maxWidth=\"xs\" className={classes.root}>\n      <CssBaseline />\n      <div className={classes.paper}>\n        <Avatar className={classes.avatar}>\n          <LockOutlinedIcon className={classes.lockIcon} />\n        </Avatar>\n        <Typography component=\"h1\" variant=\"h2\" className={classes.pageTitle}>\n          Update your password\n        </Typography>\n        <Error errors={fieldErrors} />\n        {success && (\n          <Success\n            header=\"Your password has been saved.\"\n            loginText=\"Sign back in\"\n          />\n        )}\n        {!success && (\n          <div className={classes.resetPasswordFormWrapper}>\n            <form className={classes.form} noValidate>\n              <TextField\n                value={password}\n                variant=\"outlined\"\n                margin=\"normal\"\n                required\n                fullWidth\n                name=\"password\"\n                label=\"Password\"\n                type=\"password\"\n                id=\"password\"\n                autoComplete=\"current-password\"\n                onChange={(event) => setPassword(event.target.value)}\n                onBlur={(event) => validatePasswod(event)}\n              />\n              <TextField\n                value={confirmPassword}\n                variant=\"outlined\"\n                margin=\"normal\"\n                required\n                fullWidth\n                name=\"password\"\n                label=\"Confirm Password\"\n                type=\"password\"\n                id=\"confirmPassword\"\n                autoComplete=\"confirm-password\"\n                onChange={(event) => setConfirmPassword(event.target.value)}\n                onBlur={(event) => validatePasswodConfirm(event)}\n              />\n              <Button\n                fullWidth\n                disabled={\n                  !password || !confirmPassword || password !== confirmPassword\n                }\n                variant=\"contained\"\n                color=\"primary\"\n                className={classes.submit}\n                onClick={(event) => handlePasswordReset(event)}\n              >\n                Submit\n              </Button>\n            </form>\n          </div>\n        )}\n      </div>\n    </Container>\n  );\n};\n\nexport default ResetPassword;\n","import React from \"react\";\n\nimport Alert from \"@material-ui/lab/Alert\";\nimport PropTypes from \"prop-types\";\n\nconst Error = ({ errors, variant, children }) => (\n  <>\n    {errors\n      && errors.map((error, index) => (\n        // eslint-disable-next-line react/no-array-index-key\n        <Alert severity=\"error\" variant={variant} key={index}>\n          {error.msg}\n          {children}\n        </Alert>\n      ))}\n  </>\n);\n\nError.defaultProps = {\n  errors: null,\n  children: null,\n  variant: \"outlined\",\n};\n\nError.propTypes = {\n  errors: PropTypes.arrayOf(\n    PropTypes.shape({\n      msg: PropTypes.string.isRequired,\n    }),\n  ),\n  variant: PropTypes.string,\n  children: PropTypes.node,\n};\nexport default Error;\n","import axios from \"axios\";\n\nimport { API_BASE } from \"../../utils/API_BASE\";\n\nclass AuthService {\n  passwordChangeRequest(email) {\n    return axios.post(`${API_BASE}/auth/reset_password/corporate/${email}`);\n  }\n\n  resetPassword(corporateId, token, password) {\n    return axios.post(`${API_BASE}/auth/reset/corporate/${corporateId}/${token}`, {\n      password,\n    });\n  }\n}\n\nexport default new AuthService();\n","import React from \"react\";\n\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Link from \"@material-ui/core/Link\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Proptypes from \"prop-types\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    margin: theme.spacing(3),\n    textAlign: \"center\",\n    fontSize: \"15px\",\n    lineHeight: \"24px\",\n  },\n}));\n\nconst Success = ({ header, loginText }) => {\n  const classes = useStyles();\n  return (\n    <Card className={classes.root} variant=\"outlined\">\n      <CardContent>\n        <p>\n          {header}\n          {\" \"}\n          <Link href=\"/login_corp\">{loginText}</Link>\n        </p>\n      </CardContent>\n    </Card>\n  );\n};\n\nSuccess.defaultProps = {\n  header: null,\n  loginText: null,\n};\n\nSuccess.propTypes = {\n  header: Proptypes.string,\n  loginText: Proptypes.string,\n};\nexport default Success;\n"],"sourceRoot":""}