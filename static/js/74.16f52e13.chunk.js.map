{"version":3,"sources":["static/patient-portal/ProfileFormFields.js","screens/patient-portal/Profile/Form/index.js","screens/patient-portal/Profile/Profile.js","services/patient_portal/patient-portal.service.js","components/common/CountrySelect.js","components/common/RegionSelect.js"],"names":["ProfileFormFields","name","id","label","baseType","type","options","readOnly","value","InsuranceForm","PortalForm","useStyles","makeStyles","theme","inputRow","marginBottom","spacing","sectionCard","padding","halfSectionCard","minHeight","root","border","margin","borderRadius","inputTextRow","select","lineHeight","table","background","submitBtn","marginTop","minWidth","ml1","marginLeft","ProfileForm","classes","user","useAuth","enqueueSnackbar","useSnackbar","FirstRow","SecondRow","ThirdRow","useState","country","setCountry","region","setRegion","firstname","middlename","lastname","gender","phone_home","phone_cell","phone_work","phone_other","phone_note","ssn","address","address2","city","postal","insurance_name","insurance_group","insurance_member","insurance_phone","insurance_desc","email","password","formFields","setFormFields","useEffect","selectedCountry","CountryRegionData","filter","countryArray","length","selectedRegion","split","map","regionPair","x","state","fetchProfile","useCallback","PatientPortalService","getProfile","then","res","profile","data","formFieldValues","dob","moment","format","formatformFeilds","handleInputChange","e","target","handleCountryRegion","identifier","Grid","container","item","xs","Paper","className","variant","md","TextField","fullWidth","onChange","InputProps","placeholder","option","MenuItem","alignItems","lg","CountrySelect","error","helperText","handleChange","RegionSelect","Button","onClick","code","role","login_url","provider","payload","updateProfile","message","onFormSubmit","color","flexGrow","title","paddingBottom","subTitle","Profile","Typography","component","axios","get","API_BASE","headers","authHeader","patientId","put","patient","url","client_id","params","post","appointmentId","reqBody","pharmacyId","testId","a","delete","CountryRegionMUISelectors","props","size","outlined","defaultProps","getRegions","RegionMUISelectors"],"mappings":"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","file":"static/js/74.16f52e13.chunk.js","sourcesContent":["export const ProfileFormFields = {\n  firstRow: [\n    {\n      name: \"firstname\",\n      id: \"firstname\",\n      label: \"First Name\",\n      baseType: \"input\",\n      type: \"text\",\n      options: [],\n      readOnly: true,\n    },\n    {\n      name: \"middlename\",\n      id: \"middlename\",\n      label: \"Middle Name\",\n      baseType: \"input\",\n      type: \"text\",\n      options: [],\n      readOnly: true,\n    },\n    {\n      name: \"lastname\",\n      id: \"lastName\",\n      label: \"Last Name\",\n      baseType: \"input\",\n      type: \"text\",\n      options: [],\n      readOnly: true,\n    },\n    {\n      name: \"gender\",\n      id: \"gender\",\n      label: \"Gender\",\n      baseType: \"select\",\n      type: null,\n      options: [\n        {\n          label: \"Male\",\n          value: \"M\",\n        },\n        {\n          label: \"Female\",\n          value: \"F\",\n        },\n      ],\n    },\n  ],\n  secondRow: [\n    {\n      name: \"phone_home\",\n      id: \"homePhone\",\n      label: \"Home Phone\",\n      baseType: \"input\",\n      type: \"text\",\n      options: [],\n    },\n    {\n      name: \"phone_cell\",\n      id: \"cellPhone\",\n      label: \"Cell Phone\",\n      baseType: \"input\",\n      type: \"text\",\n      options: [],\n    },\n    {\n      name: \"phone_work\",\n      id: \"workPhone\",\n      label: \"Work Phone\",\n      baseType: \"input\",\n      type: \"text\",\n      options: [],\n    },\n    {\n      name: \"phone_other\",\n      id: \"otherPhone\",\n      label: \"Other Phone\",\n      baseType: \"input\",\n      type: \"text\",\n      options: [],\n    },\n  ],\n  thirdRow: [\n    {\n      name: \"phone_note\",\n      id: \"phoneNotes\",\n      label: \"Phone Notes\",\n      baseType: \"input\",\n      type: \"text\",\n      options: [],\n    },\n    {\n      name: \"ssn\",\n      id: \"socialSecurity\",\n      label: \"Social Security\",\n      baseType: \"input\",\n      type: \"text\",\n      options: [],\n    },\n  ],\n};\n\nexport const InsuranceForm = [\n  {\n    name: \"insurance_name\",\n    id: \"insurance_name\",\n    label: \"Insurance Plan Name\",\n    baseType: \"input\",\n    type: \"text\",\n    options: [],\n  },\n  {\n    name: \"insurance_group\",\n    id: \"insurance_group\",\n    label: \"Group Name\",\n    baseType: \"input\",\n    type: \"text\",\n    options: [],\n  },\n  {\n    name: \"insurance_member\",\n    id: \"insurance_member\",\n    label: \"Member Id\",\n    baseType: \"input\",\n    type: \"number\",\n    options: [],\n  },\n  {\n    name: \"insurance_phone\",\n    id: \"insurance_phone\",\n    label: \"Plan Phone No\",\n    baseType: \"input\",\n    type: \"number\",\n    options: [],\n  },\n  {\n    name: \"insurance_desc\",\n    id: \"insurance_desc\",\n    label: \"Plan Description\",\n    baseType: \"input\",\n    type: \"text\",\n    options: [],\n  },\n];\n\nexport const AddressForm = [\n  {\n    name: \"city\",\n    id: \"planName\",\n    label: \"Plan Name\",\n    baseType: \"input\",\n    type: \"text\",\n    options: [],\n  },\n  {\n    name: \"state\",\n    id: \"planName\",\n    label: \"Plan Name\",\n    baseType: \"input\",\n    type: \"text\",\n    options: [],\n  },\n  {\n    name: \"postal\",\n    id: \"planName\",\n    label: \"Plan Name\",\n    baseType: \"input\",\n    type: \"text\",\n    options: [],\n  },\n];\n\nexport const PortalForm = [\n  {\n    name: \"email\",\n    id: \"portal-email\",\n    label: \"Email\",\n    baseType: \"input\",\n    type: \"email\",\n    options: [],\n  },\n  {\n    name: \"password\",\n    id: \"portal-password\",\n    label: \"Password\",\n    baseType: \"input\",\n    type: \"password\",\n    options: [],\n  },\n];\n","import React, { useState, useEffect, useCallback } from \"react\";\n\nimport {\n  Grid,\n  Paper,\n  TextField,\n  Button,\n  MenuItem,\n} from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport moment from \"moment\";\nimport { useSnackbar } from \"notistack\";\nimport { CountryRegionData } from \"react-country-region-selector\";\n\nimport CountrySelect from \"../../../../components/common/CountrySelect\";\nimport RegionSelect from \"../../../../components/common/RegionSelect\";\nimport useAuth from \"../../../../hooks/useAuth\";\nimport PatientPortalService from \"../../../../services/patient_portal/patient-portal.service\";\nimport {\n  ProfileFormFields,\n  InsuranceForm,\n  PortalForm,\n} from \"../../../../static/patient-portal/ProfileFormFields\";\n\n\nconst useStyles = makeStyles((theme) => ({\n  inputRow: {\n    marginBottom: theme.spacing(1),\n  },\n  sectionCard: {\n    padding: theme.spacing(1.5, 1),\n  },\n  halfSectionCard: {\n    padding: theme.spacing(1.5, 1),\n    minHeight: 198,\n  },\n  root: {\n    border: \"1px solid\",\n    margin: theme.spacing(0, 0, 1, 0),\n    borderRadius: 0,\n  },\n  inputTextRow: {\n    marginBottom: theme.spacing(3),\n  },\n  select: {\n    lineHeight: \"2.30em\",\n  },\n  table: {\n    background: \"white\",\n  },\n  submitBtn: {\n    marginTop: theme.spacing(2),\n    minWidth: 120,\n  },\n  ml1: {\n    marginLeft: theme.spacing(1),\n  },\n}));\n\nconst ProfileForm = () => {\n  const classes = useStyles();\n  const { user } = useAuth();\n  const { enqueueSnackbar } = useSnackbar();\n\n  const FirstRow = ProfileFormFields.firstRow;\n  const SecondRow = ProfileFormFields.secondRow;\n  const ThirdRow = ProfileFormFields.thirdRow;\n\n  const [country, setCountry] = useState(\"\");\n  const [region, setRegion] = useState(\"\");\n  const [formFields, setFormFields] = useState({\n    firstname: \"\",\n    middlename: \"\",\n    lastname: \"\",\n    gender: \"\",\n    phone_home: \"\",\n    phone_cell: \"\",\n    phone_work: \"\",\n    phone_other: \"\",\n    phone_note: \"\",\n    ssn: \"\",\n    address: \"\",\n    address2: \"\",\n    city: \"\",\n    postal: \"\",\n    insurance_name: \"\",\n    insurance_group: \"\",\n    insurance_member: \"\",\n    insurance_phone: \"\",\n    insurance_desc: \"\",\n    email: \"\",\n    password: \"\",\n\n  });\n\n  function formatformFeilds(data = {}) {\n    return {\n      ...data,\n      ...(data.gender && { gender: data.gender ? data.gender : \"M\" }),\n      ...(data.dob && { dob: data.dob ? data.dob : moment().format(\"YYYY-MM-DD\") }),\n    };\n  }\n\n  useEffect(() => {\n    const selectedCountry = CountryRegionData.filter(\n      (countryArray) => countryArray[1] === formFields.country,\n    );\n    if (selectedCountry.length) { // country and state is present in the db\n      setCountry(selectedCountry[0]);\n      const regions = selectedCountry[0][2].split(\"|\").map((regionPair) => {\n        const [regionName = null, regionInShort] = regionPair.split(\"~\");\n        return [regionName, regionInShort];\n      });\n      const selectedRegion = regions.filter((x) => x[1] === formFields.state);\n      setRegion(selectedRegion[0][1]);\n    }\n  }, [formFields]);\n\n  const fetchProfile = useCallback(() => {\n    PatientPortalService.getProfile().then((res) => {\n      const profile = res.data?.[0];\n      setFormFields((formFieldValues) => ({\n        ...formFieldValues,\n        ...formatformFeilds(profile),\n      }));\n    });\n  }, []);\n\n  useEffect(() => {\n    fetchProfile();\n  }, [fetchProfile]);\n\n  const handleInputChange = (e) => {\n    const { value, name } = e.target;\n    setFormFields({\n      ...formFields,\n      [name]: value,\n    });\n  };\n\n  const handleCountryRegion = (identifier, value) => {\n    if (identifier === \"country\") {\n      setCountry(value);\n    } else if (identifier === \"region\") {\n      setRegion(value);\n    }\n  };\n\n  const onFormSubmit = () => {\n    // * Deleting these fields as they don't exists in database structure.\n    delete formFields.code;\n    delete formFields.role;\n    delete formFields.login_url;\n    delete formFields.dob;\n    delete formFields.provider;\n\n    // * status is in need to be formated back to it's original state.\n    // formFields.status = formFields?.status === \"active\" ? \"A\" : null;\n\n    const payload = {\n      data: {\n        ...formFields,\n        country: country[1],\n        state: region,\n      },\n    };\n\n    PatientPortalService.updateProfile(payload, user.id).then(\n      (res) => {\n        enqueueSnackbar(res.data.message, {\n          variant: \"success\",\n        });\n      },\n      () => {\n        enqueueSnackbar(\"Unable to update profile\", {\n          variant: \"error\",\n        });\n      },\n    );\n  };\n\n  return (\n    <>\n      <Grid container>\n        <Grid item xs={12}>\n          <Paper className={classes.root} variant=\"outlined\">\n            <Grid className={classes.sectionCard}>\n              <Grid container spacing={1} className={classes.inputRow}>\n                {FirstRow.map((item) => (\n                  <Grid key={item.name} item md={3}>\n                    {item.baseType === \"input\" ? (\n                      <TextField\n                        label={item.label}\n                        name={item.name}\n                        value={formFields[item.name]}\n                        id={item.id}\n                        type={item.type}\n                        fullWidth\n                        onChange={(e) => handleInputChange(e)}\n                        InputProps={{\n                          readOnly: item.readOnly,\n                        }}\n                      />\n                    ) : (\n                      <TextField\n                        select\n                        placeholder={item.label}\n                        label={item.label}\n                        id={item.id}\n                        name={item.name}\n                        value={formFields[item.name]}\n                        fullWidth\n                        onChange={(e) => handleInputChange(e)}\n                      >\n                        {item.options.map((option) => (\n                          <MenuItem key={option.value} value={option.value}>\n                            {option.label}\n                          </MenuItem>\n                        ))}\n                      </TextField>\n                    )}\n                  </Grid>\n                ))}\n              </Grid>\n              <Grid container spacing={1} className={classes.inputRow} alignItems=\"flex-end\">\n                {SecondRow.map((item) => (\n                  <Grid key={item.name} item md={3}>\n                    {item.baseType === \"input\" ? (\n                      <TextField\n                        label={item.label}\n                        name={item.name}\n                        value={\n                          item.type === \"date\"\n                            ? moment(formFields[item.name]).format(\"YYYY-MM-DD\")\n                            : formFields[item.name]\n                        }\n                        id={item.id}\n                        type={item.type}\n                        fullWidth\n                        onChange={(e) => handleInputChange(e)}\n                      />\n                    ) : (\n                      <TextField\n                        select\n                        placeholder={item.label}\n                        label={item.label}\n                        id={item.id}\n                        name={item.name}\n                        value={formFields[item.name]}\n                        fullWidth\n                        onChange={(e) => handleInputChange(e)}\n                      >\n                        {item.options.map((option) => (\n                          <MenuItem key={option.value} value={option.value}>\n                            {option.label}\n                          </MenuItem>\n                        ))}\n                      </TextField>\n                    )}\n                  </Grid>\n                ))}\n              </Grid>\n              <Grid container spacing={1} className={classes.inputRow}>\n                {ThirdRow.map((item) => (\n                  <Grid key={item.name} item md={3}>\n                    {item.baseType === \"input\" ? (\n                      <TextField\n                        label={item.label}\n                        name={item.name}\n                        value={formFields[item.name]}\n                        id={item.id}\n                        type={item.type}\n                        fullWidth\n                        onChange={(e) => handleInputChange(e)}\n                      />\n                    ) : (\n                      <TextField\n                        select\n                        placeholder={item.label}\n                        label={item.label}\n                        id={item.id}\n                        name={item.name}\n                        value={formFields[item.name]}\n                        fullWidth\n                        onChange={(e) => handleInputChange(e)}\n                      >\n                        {item.options.map((option) => (\n                          <MenuItem key={option.value} value={option.value}>\n                            {option.label}\n                          </MenuItem>\n                        ))}\n                      </TextField>\n                    )}\n                  </Grid>\n                ))}\n              </Grid>\n            </Grid>\n          </Paper>\n        </Grid>\n      </Grid>\n\n      <Grid container>\n        <Grid item xs={12}>\n          <Paper className={classes.root} variant=\"outlined\">\n            <Grid item xs={10} className={classes.halfSectionCard}>\n              <Grid container spacing={1}>\n                <Grid item lg={12}>\n                  <TextField\n                    label=\"Address\"\n                    name=\"address\"\n                    value={formFields.address}\n                    fullWidth\n                    onChange={(e) => handleInputChange(e)}\n                  />\n                </Grid>\n                <Grid item lg={12}>\n                  <TextField\n                    label=\"Address Line 2\"\n                    name=\"address2\"\n                    value={formFields.address2}\n                    fullWidth\n                    onChange={(e) => handleInputChange(e)}\n                  />\n                </Grid>\n                <Grid item lg={3}>\n                  <TextField\n                    label=\"City\"\n                    name=\"city\"\n                    value={formFields.city}\n                    fullWidth\n                    onChange={(e) => handleInputChange(e)}\n                  />\n                </Grid>\n                <Grid item lg={3}>\n                  <TextField\n                    label=\"Zip/Postal\"\n                    name=\"postal\"\n                    value={formFields.postal}\n                    fullWidth\n                    onChange={(e) => handleInputChange(e)}\n                  />\n                </Grid>\n                <Grid item lg={3}>\n                  <CountrySelect\n                    id=\"country-select\"\n                    error={null}\n                    name=\"country-select\"\n                    helperText=\"\"\n                    label=\"Country\"\n                    handleChange={(identifier, value) => handleCountryRegion(identifier, value)}\n                    country={country}\n                    margin=\"dense\"\n                  />\n                </Grid>\n                <Grid item lg={3}>\n                  <RegionSelect\n                    id=\"state-select\"\n                    error={null}\n                    name=\"state-select\"\n                    helperText=\"\"\n                    label=\"State\"\n                    handleChange={(identifier, value) => handleCountryRegion(identifier, value)}\n                    country={country}\n                    region={region}\n                    margin=\"dense\"\n                  />\n                </Grid>\n              </Grid>\n            </Grid>\n          </Paper>\n        </Grid>\n      </Grid>\n\n      <Grid container>\n        <Grid item xs={12}>\n          <Paper className={classes.root} variant=\"outlined\">\n            <Grid className={classes.sectionCard}>\n              <Grid container spacing={1} className={classes.inputRow}>\n                {InsuranceForm.map((item) => (\n                  <Grid key={item.name} item md={3}>\n                    <TextField\n                      label={item.label}\n                      name={item.name}\n                      id={item.id}\n                      type={item.type}\n                      value={formFields[item.name]}\n                      fullWidth\n                      onChange={(e) => handleInputChange(e)}\n                    />\n                  </Grid>\n                ))}\n              </Grid>\n            </Grid>\n          </Paper>\n        </Grid>\n      </Grid>\n\n      {/* <Grid container>  //TODO:: might be used later\n        <Grid item xs={12}>\n          <Paper className={classes.root} variant=\"outlined\">\n            <Grid className={classes.sectionCard}>\n              <Typography variant=\"h5\" color=\"textPrimary\">\n                Payment Methods\n                <span className={classes.ml1}>\n                  <Button size=\"small\" variant=\"outlined\">\n                    New\n                  </Button>\n                </span>\n              </Typography>\n              <Table size=\"small\" className={classes.table} aria-label=\"simple table\">\n                <TableHead>\n                  <TableRow>\n                    <TableCell>Type</TableCell>\n                    <TableCell align=\"center\">Last Four</TableCell>\n                    <TableCell align=\"center\">Expires</TableCell>\n                    <TableCell align=\"center\">Actions</TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {PaymentData.map((row) => (\n                    <TableRow key={row.type}>\n                      <TableCell component=\"th\" scope=\"row\">\n                        {row.type}\n                      </TableCell>\n                      <TableCell align=\"center\">{row.lastFour}</TableCell>\n                      <TableCell align=\"center\">{row.expires}</TableCell>\n                      <TableCell align=\"center\">\n                        <Button>Edit</Button>\n                        <Button>Delete</Button>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </Grid>\n          </Paper>\n        </Grid>\n      </Grid>\n */}\n      <Grid container>\n        <Grid item xs={12}>\n          <Paper className={classes.root} variant=\"outlined\">\n            <Grid className={classes.sectionCard}>\n              <Grid container spacing={1} className={classes.inputRow}>\n                {PortalForm.map((item) => (\n                  <Grid key={item.name} item md={3}>\n                    <TextField\n                      label={item.label}\n                      name={item.name}\n                      id={item.id}\n                      type={item.type}\n                      value={formFields[item.name]}\n                      fullWidth\n                      onChange={(e) => handleInputChange(e)}\n                    />\n                  </Grid>\n                ))}\n              </Grid>\n            </Grid>\n          </Paper>\n        </Grid>\n      </Grid>\n\n      <Button\n        onClick={() => onFormSubmit()}\n        variant=\"contained\"\n        color=\"primary\"\n        className={classes.submitBtn}\n      >\n        Save\n      </Button>\n    </>\n  );\n};\n\nexport default ProfileForm;\n","import React from \"react\";\n\nimport { makeStyles } from \"@material-ui/core\";\nimport Typography from \"@material-ui/core/Typography\";\n\nimport ProfileForm from \"./Form\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n    padding: \"40px 0px\",\n  },\n  title: {\n    paddingBottom: theme.spacing(0.5),\n  },\n  subTitle: {\n    paddingBottom: theme.spacing(2),\n  },\n}));\n\nconst Profile = () => {\n  const classes = useStyles();\n  return (\n    <div className={classes.root}>\n      <Typography\n        component=\"h1\"\n        variant=\"h2\"\n        color=\"textPrimary\"\n        className={classes.title}\n      >\n        Profile\n      </Typography>\n      <Typography\n        component=\"h5\"\n        variant=\"body1\"\n        color=\"textPrimary\"\n        className={classes.subTitle}\n      >\n        This page is used to set your own personal information.\n      </Typography>\n      <ProfileForm />\n    </div>\n  );\n};\n\nexport default Profile;\n","import axios from \"axios\";\n\nimport { API_BASE } from \"../../utils/API_BASE\";\nimport authHeader from \"../auth-header\";\n\nclass PatientPortalService {\n  // patient profile\n  getProfile() {\n    return axios.get(`${API_BASE}/client-portal/patient`, { headers: authHeader() }).then((res) => res.data);\n  }\n\n  updateProfile(payload, patientId) {\n    return axios.put(`${API_BASE}/client-portal/patient/${patientId}`, payload, {\n      headers: authHeader(),\n    });\n  }\n\n  // appointments\n  getPractitioners(patient) {\n    let url = `${API_BASE}/client-portal/practitioners`;\n    if (patient) {\n      // eslint-disable-next-line max-len\n      url = `${API_BASE}/client-portal/practitioners/?patient_id=${patient.id}&client_id=${patient.client_id}`;\n    }\n    return axios\n      .get(url, {\n        headers: authHeader(),\n      })\n      .then((res) => res.data);\n  }\n\n  getPractitionerDates(patient) {\n    let url = `${API_BASE}/client-portal/practitioner-dates`;\n    if (patient) {\n      // eslint-disable-next-line max-len\n      url = `${API_BASE}/client-portal/practitioner-dates/?patient_id=${patient.id}&client_id=${patient.client_id}`;\n    }\n    return axios\n      .get(url, {\n        headers: authHeader(),\n      })\n      .then((res) => res.data);\n  }\n\n  getBookedAppointments(patient, params) {\n    let url = `${API_BASE}/client-portal/booked-appointments`;\n    if (patient) {\n      // eslint-disable-next-line max-len\n      url = `${API_BASE}/client-portal/booked-appointments?patient_id=${patient.id}&client_id=${patient.client_id}`;\n    }\n    return axios\n      .get(url, {\n        headers: authHeader(),\n        params,\n      })\n      .then((res) => res.data);\n  }\n\n  getAppointmentTypesByPractitionerId(data) {\n    return axios\n      .post(`${API_BASE}/client-portal/appointment-types`, data, {\n        headers: authHeader(),\n      })\n      .then((res) => res.data);\n  }\n\n  bookAppointment(data) {\n    return axios\n      .post(`${API_BASE}/client-portal/appointment`, data, {\n        headers: authHeader(),\n      })\n      .then((res) => res.data);\n  }\n\n  updateAppointment(payload, appointmentId) {\n    return axios\n      .put(`${API_BASE}/client-portal/appointment/${appointmentId}`, payload, {\n        headers: authHeader(),\n      })\n      .then((res) => res.data);\n  }\n\n  // encounters\n  getEncounters(patient) {\n    let url = `${API_BASE}/client-portal/encounters`;\n    if (patient) {\n      // eslint-disable-next-line max-len\n      url = `${API_BASE}/client-portal/encounters/?patient_id=${patient.id}&client_id=${patient.client_id}`;\n    }\n    return axios\n      .get(url, {\n        headers: authHeader(),\n      })\n      .then((res) => res.data);\n  }\n\n  // lab/documents\n  getLabDocuments(patient) {\n    let url = `${API_BASE}/client-portal/labs`;\n    if (patient) {\n      // eslint-disable-next-line max-len\n      url = `${API_BASE}/client-portal/labs/?patient_id=${patient.id}&client_id=${patient.client_id}`;\n    }\n    return axios\n      .get(url, {\n        headers: authHeader(),\n      })\n      .then((res) => res.data);\n  }\n\n  createLabDocuments(patient, reqBody) {\n    let url = `${API_BASE}/client-portal/labs`;\n    if (patient) {\n      // eslint-disable-next-line max-len\n      url = `${API_BASE}/client-portal/labs/?patient_id=${patient.id}&client_id=${patient.client_id}`;\n    }\n    return axios\n      .post(url, reqBody, {\n        headers: authHeader(),\n      })\n      .then((res) => res.data);\n  }\n\n  // Billings\n  getBillings(patient) {\n    let url = `${API_BASE}/client-portal/billings`;\n    if (patient) {\n      // eslint-disable-next-line max-len\n      url = `${API_BASE}/client-portal/billings/?patient_id=${patient.id}&client_id=${patient.client_id}`;\n    }\n\n    return axios\n      .get(url, {\n        headers: authHeader(),\n      })\n      .then((res) => res.data);\n  }\n\n  createBilling(data) {\n    return axios\n      .post(`${API_BASE}/client-portal/billings`, data, {\n        headers: authHeader(),\n      })\n      .then((res) => res.data);\n  }\n\n  getBalance(patient) {\n    let url = `${API_BASE}/client-portal/balance`;\n    if (patient) {\n      // eslint-disable-next-line max-len\n      url = `${API_BASE}/client-portal/balance/?patient_id=${patient.id}&client_id=${patient.client_id}`;\n    }\n    return axios\n      .get(url, {\n        headers: authHeader(),\n      })\n      .then((res) => res.data);\n  }\n\n  // Payment Methods\n  getPaymentMethods(patient) {\n    let url = `${API_BASE}/patient-portal/payment-methods`;\n    if (patient) {\n      // eslint-disable-next-line max-len\n      url = `${API_BASE}/patient-portal/payment-methods/?patient_id=${patient.id}&client_id=${patient.client_id}`;\n    }\n    return axios\n      .get(url, {\n        headers: authHeader(),\n      })\n      .then((res) => res.data);\n  }\n\n  // Pharmacies\n  getPharmacies() {\n    return axios\n      .get(`${API_BASE}/client-portal/pharmacy`, {\n        headers: authHeader(),\n      })\n      .then((res) => res.data);\n  }\n\n  searchPharmacies(data) {\n    return axios\n      .post(`${API_BASE}/client-portal/pharmacy/search`, data, {\n        headers: authHeader(),\n      })\n      .then((res) => res.data);\n  }\n\n  updatePharmacy(pharmacyId, payload) {\n    return axios.put(`${API_BASE}/client-portal/pharmacy/${pharmacyId}`, payload, {\n      headers: authHeader(),\n    })\n      .then((res) => res.data);\n  }\n\n  // Requisitions\n  getRequisitions(patient) {\n    let url = `${API_BASE}/client-portal/lab_requisitions`;\n    if (patient) {\n      // eslint-disable-next-line max-len\n      url = `${API_BASE}/client-portal/lab_requisitions/?patient_id=${patient.id}&client_id=${patient.client_id}`;\n    }\n    return axios\n      .get(url, {\n        headers: authHeader(),\n      })\n      .then((res) => res.data);\n  }\n\n  // Lab billing\n  getLabBilling(patient) {\n    let url = `${API_BASE}/client-portal/lab_billing`;\n    if (patient) {\n        // eslint-disable-next-line max-len\n      url = `${API_BASE}/client-portal/lab_billing/?patient_id=${patient.id}&client_id=${patient.client_id}`;\n    }\n    return axios\n      .get(url, {\n        headers: authHeader(),\n      })\n      .then((res) => res.data);\n  }\n\n\n  // test list\n  getTestList(patient) {\n    let url = `${API_BASE}/client-portal/lab_requisitions/test-list`;\n    if (patient) {\n      // eslint-disable-next-line max-len\n      url = `${API_BASE}/client-portal/lab_requisitions/?patient_id=${patient.id}&client_id=${patient.client_id}`;\n    }\n    return axios\n      .get(url, {\n        headers: authHeader(),\n      })\n      .then((res) => res.data);\n  }\n\n  async getTestProfileInfo(testId) {\n    const url = `${API_BASE}/client-portal/lab_requisitions/test-profile-info?testId=${testId}`;\n\n    const res = await axios.get(url, {\n      headers: authHeader(),\n    });\n    return res.data;\n  }\n\n  async getProfileTests(testId) {\n    const url = `${API_BASE}/client-portal/lab_requisitions/profile-tests?testId=${testId}`;\n\n    const res = await axios.get(url, {\n      headers: authHeader(),\n    });\n\n    return res.data;\n  }\n\n  // Handouts\n  getHandouts() {\n    return axios\n      .get(`${API_BASE}/client-portal/handouts`, {\n        headers: authHeader(),\n      })\n      .then((res) => res.data);\n  }\n\n  createHandouts() {\n    return axios\n      .post(`${API_BASE}/client-portal/handouts`, {\n        headers: authHeader(),\n      })\n      .then((res) => res.data);\n  }\n\n  deleteHandout(id) {\n    return axios\n      .delete(`${API_BASE}/client-portal/handouts/${id}`, {\n        headers: authHeader(),\n      })\n      .then((res) => res.data);\n  }\n\n  // Prescriptions\n  getPrescriptions() {\n    return axios\n      .get(`${API_BASE}/client-portal/prescription`, {\n        headers: authHeader(),\n      })\n      .then((res) => res.data);\n  }\n}\n\nexport default new PatientPortalService();\n","import React from \"react\";\n\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport TextField from \"@material-ui/core/TextField\";\nimport PropTypes from \"prop-types\";\nimport { CountryRegionData } from \"react-country-region-selector\";\n\nfunction CountryRegionMUISelectors(props) {\n  const {\n    country, size, handleChange, outlined, margin,\n  } = props;\n  return (\n    <TextField\n      size={size}\n      id=\"country\"\n      label=\"Country\"\n      value={country}\n      select\n      onChange={(e) => handleChange(\"country\", e.target.value)}\n      fullWidth\n      variant={outlined ? \"outlined\" : \"standard\"}\n      margin={margin || \"none\"}\n    >\n      {CountryRegionData.map((option) => (\n        <MenuItem key={option[0]} value={option}>\n          {option[0]}\n        </MenuItem>\n      ))}\n    </TextField>\n  );\n}\n\nCountryRegionMUISelectors.defaultProps = {\n  size: \"medium\",\n  country: null,\n  outlined: true,\n  margin: \"none\",\n};\n\nCountryRegionMUISelectors.propTypes = {\n  size: PropTypes.string,\n  country: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.array,\n  ]),\n  handleChange: PropTypes.func.isRequired,\n  outlined: PropTypes.bool,\n  margin: PropTypes.string,\n};\n\nexport default CountryRegionMUISelectors;\n","import React from \"react\";\n\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport TextField from \"@material-ui/core/TextField\";\nimport PropTypes from \"prop-types\";\n\nconst getRegions = (country) => {\n  if (!country) {\n    return [];\n  }\n  return country[2].split(\"|\").map((regionPair) => {\n    const [regionName = null, regionInShort] = regionPair.split(\"~\");\n    return [regionName, regionInShort];\n  });\n};\n\nfunction RegionMUISelectors(props) {\n  const {\n    size, label, region, handleChange, outlined, country, margin,\n  } = props;\n  return (\n    <TextField\n      size={size}\n      id=\"state\"\n      label={label}\n      value={region}\n      select\n      onChange={(e) => handleChange(\"region\", e.target.value)}\n      fullWidth\n      variant={outlined ? \"outlined\" : \"standard\"}\n      margin={margin || \"none\"}\n    >\n      {getRegions(country).map((option) => (\n        <MenuItem key={option[0]} value={option[1]}>\n          {option[0]}\n        </MenuItem>\n      ))}\n    </TextField>\n  );\n}\n\nRegionMUISelectors.defaultProps = {\n  size: \"medium\",\n  outlined: true,\n  margin: \"none\",\n};\n\nRegionMUISelectors.propTypes = {\n  size: PropTypes.string,\n  outlined: PropTypes.bool,\n  label: PropTypes.string.isRequired,\n  region: PropTypes.string.isRequired,\n  handleChange: PropTypes.func.isRequired,\n  country: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.array,\n  ]).isRequired,\n  margin: PropTypes.string,\n};\n\nexport default RegionMUISelectors;\n"],"sourceRoot":""}