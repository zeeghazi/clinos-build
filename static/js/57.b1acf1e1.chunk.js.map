{"version":3,"sources":["screens/patient-portal/PaymentMethods/components/PaymentMethodsForm/index.js","screens/patient-portal/PaymentMethods/PaymentMethods.js","services/patient_portal/patient-portal.service.js","hooks/useDidMountEffect.js","components/common/CountrySelect.js","components/common/RegionSelect.js","components/common/MaskInput.js","services/patient_portal/payment-method.service.js"],"names":["useStyles","makeStyles","theme","title","backgroundColor","palette","primary","light","color","closeButton","position","right","spacing","top","formContainer","margin","gutterBottom","marginBottom","customLabel","fontSize","circularProgress","textAlign","left","modalConentBelow","opacity","contentWithLoading","buttonsContainer","cancelButton","borderColor","colors","orange","PaymentMethodsForm","props","classes","user","useAuth","enqueueSnackbar","useSnackbar","isOpen","onClose","reloadData","cardData","isEdit","Boolean","useState","cardType","cardNumber","cvv","expiryDate","address","address2","city","postal","formFields","setFormFields","country","setCountry","region","setRegion","isLoading","setIsLoading","useEffect","selectedCountry","CountryRegionData","filter","countryArray","length","selectedRegion","split","map","regionPair","x","state","fetchProfile","useCallback","PatientPortalService","getProfile","then","res","profile","data","formFieldValues","paymentMethodType","type","account_number","exp","updateFormState","key","value","handleInputChange","e","target","name","handleCountryRegion","identifier","useDidMountEffect","cardFirstDigit","getCardType","Dialog","open","fullWidth","maxWidth","aria-labelledby","aria-describedby","DialogTitle","id","className","IconButton","aria-label","onClick","DialogContent","content","CircularProgress","clsx","onSubmit","preventDefault","reqBody","replace","cvc","replaceAll","stripe_customer_id","corp_stripe_customer_id","paymentMethodId","updateFormData","corp_stripe_payment_method_token","stripe_payment_method_token","PaymentMethodService","updatePaymentMethod","response","message","variant","createPaymentMethod","Grid","MaskInput","required","autoFocus","disabled","label","mask","onChange","Typography","TextField","CountrySelect","error","helperText","handleChange","RegionSelect","container","justify","Button","size","defaultProps","root","flexGrow","padding","titleSection","display","alignItems","paddingBottom","btn","marginLeft","actionButtonStyle","minWidth","StyledTableCell","withStyles","head","whiteSpace","fontWeight","borderBottom","body","TableCell","StyledTableRow","lineHeight","background","TableRow","PaymentMethods","lastVisitedPatient","paymentMethods","setPaymentMethods","paymentMethodDialog","setNewPaymentDialog","selectedPaymentMethod","setSelectedPayment","fetchPaymentMethods","getPaymentMethods","component","item","md","sm","xs","TableContainer","tableContainer","Table","table","TableHead","TableBody","moment","created","format","disableRipple","onItemEdit","deletePaymentMethod","onItemDelete","axios","get","API_BASE","headers","authHeader","payload","patientId","put","patient","url","client_id","params","post","appointmentId","pharmacyId","testId","a","delete","func","deps","didMount","useRef","current","CountryRegionMUISelectors","outlined","select","option","getRegions","RegionMUISelectors","inputProps"],"mappings":"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","file":"static/js/57.b1acf1e1.chunk.js","sourcesContent":["import React, { useEffect, useState, useCallback } from \"react\";\n\nimport {\n  TextField, Button, Grid, Typography, colors,\n} from \"@material-ui/core\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport CloseIcon from \"@material-ui/icons/CloseOutlined\";\nimport clsx from \"clsx\";\nimport { useSnackbar } from \"notistack\";\nimport PropTypes from \"prop-types\";\nimport { CountryRegionData } from \"react-country-region-selector\";\n\nimport CountrySelect from \"../../../../../components/common/CountrySelect\";\nimport MaskInput from \"../../../../../components/common/MaskInput\";\nimport RegionSelect from \"../../../../../components/common/RegionSelect\";\nimport useAuth from \"../../../../../hooks/useAuth\";\nimport useDidMountEffect from \"../../../../../hooks/useDidMountEffect\";\nimport PatientPortalService from \"../../../../../services/patient_portal/patient-portal.service\";\nimport PaymentMethodService from \"../../../../../services/patient_portal/payment-method.service\";\nimport { paymentMethodType } from \"../../../../../utils/helpers\";\n\nconst useStyles = makeStyles((theme) => ({\n  title: {\n    backgroundColor: theme.palette.primary.light,\n    \"& h2\": {\n      color: \"#fff\",\n    },\n  },\n  closeButton: {\n    position: \"absolute\",\n    right: theme.spacing(1 / 2),\n    top: theme.spacing(1 / 2),\n    color: \"#ffffff\",\n  },\n  formContainer: {\n    margin: theme.spacing(3, 0),\n  },\n  gutterBottom: {\n    marginBottom: theme.spacing(1),\n  },\n  customLabel: {\n    fontSize: 16,\n    color: \"#37474f\",\n    marginBottom: theme.spacing(2),\n  },\n  circularProgress: {\n    position: \"absolute\",\n    textAlign: \"center\",\n    left: \"50%\",\n  },\n  modalConentBelow: { opacity: \"1\" },\n  contentWithLoading: {\n    opacity: \"0.5\",\n  },\n  buttonsContainer: {\n    margin: theme.spacing(3, 0),\n  },\n  cancelButton: {\n    borderColor: colors.orange[600],\n    color: colors.orange[600],\n  },\n}));\n\nconst PaymentMethodsForm = (props) => {\n  const classes = useStyles();\n  const { user } = useAuth();\n  const { enqueueSnackbar } = useSnackbar();\n  const {\n    isOpen, onClose, reloadData, cardData,\n  } = props;\n\n  const isEdit = Boolean(cardData);\n\n  const [formFields, setFormFields] = useState({\n    cardType: \"\",\n    cardNumber: \"\",\n    cvv: \"\",\n    expiryDate: \"\",\n    address: \"\",\n    address2: \"\",\n    city: \"\",\n    postal: \"\",\n  });\n\n  const [country, setCountry] = useState(\"\");\n  const [region, setRegion] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    const selectedCountry = CountryRegionData.filter(\n      (countryArray) => countryArray[1] === formFields.country,\n    );\n    if (selectedCountry.length) { // country and state is present in the db\n      setCountry(selectedCountry[0]);\n      const regions = selectedCountry[0][2].split(\"|\").map((regionPair) => {\n        const [regionName = null, regionInShort] = regionPair.split(\"~\");\n        return [regionName, regionInShort];\n      });\n      const selectedRegion = regions.filter((x) => x[1] === formFields.state);\n      setRegion(selectedRegion[0][1]);\n    }\n  }, [formFields]);\n\n  const fetchProfile = useCallback(() => {\n    PatientPortalService.getProfile().then((res) => {\n      const profile = res.data?.[0];\n      setFormFields((formFieldValues) => ({\n        ...formFieldValues,\n        ...profile,\n      }));\n    });\n  }, []);\n\n\n  useEffect(() => {\n    fetchProfile();\n  }, [fetchProfile]);\n\n  const updateFields = () => {\n    formFields.cardType = paymentMethodType(cardData.type);\n    if (isEdit) {\n      formFields.cardNumber = `____/____/____/${cardData.account_number}`;\n    } else {\n      formFields.cardNumber = cardData.account_number;\n    }\n    formFields.expiryDate = cardData.exp;\n    setFormFields({ ...formFields });\n  };\n\n  useEffect(() => {\n    if (cardData) {\n      updateFields();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [cardData]);\n\n  const updateFormState = (key, value) => {\n    setFormFields({\n      ...formFields,\n      [key]: value,\n    });\n  };\n\n  const handleInputChange = (e) => {\n    const { value, name } = e.target;\n    updateFormState(name, value);\n  };\n\n  const handleCountryRegion = (identifier, value) => {\n    if (identifier === \"country\") {\n      setCountry(value);\n    } else if (identifier === \"region\") {\n      setRegion(value);\n    }\n  };\n\n  const onFormSubmit = (e) => {\n    e.preventDefault();\n    setIsLoading(true);\n    const reqBody = {\n      data: {\n        exp: formFields.expiryDate.replace(\"/\", \"\"),\n        type: formFields.cardType[0] || \"V\",\n        cvc: formFields.cvv,\n        account_number: formFields.cardNumber.replaceAll(\"/\", \"\"),\n        stripe_customer_id: user.stripe_customer_id,\n        corp_stripe_customer_id: user.corp_stripe_customer_id,\n        address: formFields.address,\n        address2: formFields.address2,\n        city: formFields.city,\n        postal: formFields.postal,\n        country: country[1],\n        state: region,\n      },\n    };\n\n    if (isEdit) {\n      const paymentMethodId = cardData.id;\n      const updateFormData = {\n        ...reqBody,\n        data: {\n          ...reqBody.data,\n          corp_stripe_payment_method_token: cardData.corp_stripe_payment_method_token,\n          stripe_payment_method_token: cardData.stripe_payment_method_token,\n        },\n      };\n      PaymentMethodService.updatePaymentMethod(paymentMethodId, updateFormData).then((response) => {\n        enqueueSnackbar(`${response.message}`, { variant: \"success\" });\n        reloadData();\n        onClose();\n      });\n    } else {\n      PaymentMethodService.createPaymentMethod(reqBody).then((response) => {\n        enqueueSnackbar(`${response.message}`, { variant: \"success\" });\n        reloadData();\n        setIsLoading(false);\n        onClose();\n      });\n    }\n  };\n\n  const getCardType = () => {\n    const { cardNumber } = formFields;\n    const cardFirstDigit = cardNumber[0];\n    const cardType = \"cardType\";\n\n    if (cardFirstDigit === \"3\") {\n      updateFormState(cardType, \"American Express\");\n    } else if (cardFirstDigit === \"4\") {\n      updateFormState(cardType, \"Visa\");\n    } else if (cardFirstDigit === \"5\") {\n      updateFormState(cardType, \"Master\");\n    } else {\n      updateFormState(cardType, \"\");\n    }\n  };\n\n  useDidMountEffect(() => {\n    getCardType();\n  }, [formFields.cardNumber]);\n\n  return (\n    <Dialog\n      open={isOpen}\n      onClose={onClose}\n      fullWidth\n      maxWidth=\"xs\"\n      aria-labelledby=\"alert-dialog-title\"\n      aria-describedby=\"alert-dialog-description\"\n    >\n      <DialogTitle id=\"alert-dialog-title\" className={classes.title}>\n        {`${isEdit ? \"Edit\" : \"Add\"} Payment Method`}\n        <IconButton aria-label=\"Close\" className={classes.closeButton} onClick={onClose}>\n          <CloseIcon />\n        </IconButton>\n      </DialogTitle>\n      <DialogContent className={classes.content}>\n        {isLoading && (\n          <div className={classes.circularProgress}>\n            <CircularProgress />\n          </div>\n        )}\n        <div\n          className={clsx({\n            [classes.modalConentBelow]: true, // always apply\n            [classes.contentWithLoading]: isLoading, // only when isLoading === true\n          })}\n        >\n          <form onSubmit={onFormSubmit}>\n            <Grid className={classes.formContainer}>\n              <Grid>\n                <MaskInput\n                  required\n                  fullWidth\n                  autoFocus={!isEdit}\n                  disabled={isEdit}\n                  className={classes.gutterBottom}\n                  type=\"text\"\n                  name=\"cardNumber\"\n                  label=\"Card Number\"\n                  margin=\"dense\"\n                  variant=\"outlined\"\n                  value={formFields.cardNumber}\n                  mask=\"9999/9999/9999/9999\"\n                  onChange={(e) => handleInputChange(e)}\n                />\n                {!!formFields.cardType && formFields.cardType.length ? (\n                  <Typography gutterBottom>{formFields.cardType}</Typography>\n                )\n                  : null}\n              </Grid>\n              <Grid>\n                <TextField\n                  required\n                  disabled={isEdit}\n                  variant=\"outlined\"\n                  margin=\"dense\"\n                  name=\"cvv\"\n                  id=\"cvv\"\n                  type=\"text\"\n                  label=\"CVV\"\n                  className={classes.gutterBottom}\n                  value={formFields.cvv}\n                  onChange={(e) => handleInputChange(e)}\n                />\n              </Grid>\n\n              <Grid>\n                <MaskInput\n                  required\n                  autoFocus={isEdit}\n                  className={classes.gutterBottom}\n                  type=\"text\"\n                  name=\"expiryDate\"\n                  label=\"Expiration\"\n                  margin=\"dense\"\n                  variant=\"outlined\"\n                  value={formFields.expiryDate}\n                  mask=\"99/99\"\n                  onChange={(e) => handleInputChange(e)}\n                />\n              </Grid>\n              <Grid>\n                <TextField\n                  className={classes.gutterBottom}\n                  label=\"Address\"\n                  name=\"address\"\n                  value={formFields.address}\n                  fullWidth\n                  onChange={(e) => handleInputChange(e)}\n                  margin=\"dense\"\n                  variant=\"outlined\"\n                />\n              </Grid>\n              <Grid>\n                <TextField\n                  className={classes.gutterBottom}\n                  label=\"Address Line 2\"\n                  name=\"address2\"\n                  value={formFields.address2}\n                  fullWidth\n                  onChange={(e) => handleInputChange(e)}\n                  margin=\"dense\"\n                  variant=\"outlined\"\n                />\n              </Grid>\n              <Grid>\n                <TextField\n                  className={classes.gutterBottom}\n                  label=\"City\"\n                  name=\"city\"\n                  value={formFields.city}\n                  fullWidth\n                  onChange={(e) => handleInputChange(e)}\n                  margin=\"dense\"\n                  variant=\"outlined\"\n                />\n              </Grid>\n              <Grid>\n                <TextField\n                  className={classes.gutterBottom}\n                  label=\"Zip/Postal\"\n                  name=\"postal\"\n                  value={formFields.postal}\n                  fullWidth\n                  onChange={(e) => handleInputChange(e)}\n                  margin=\"dense\"\n                  variant=\"outlined\"\n                />\n              </Grid>\n              <Grid>\n                <CountrySelect\n                  id=\"country-select\"\n                  error={null}\n                  name=\"country-select\"\n                  helperText=\"\"\n                  label=\"Country\"\n                  handleChange={(identifier, value) => handleCountryRegion(identifier, value)}\n                  country={country}\n                  margin=\"dense\"\n                  variant=\"outlined\"\n                />\n              </Grid>\n              <Grid>\n                <RegionSelect\n                  id=\"state-select\"\n                  error={null}\n                  name=\"state-select\"\n                  helperText=\"\"\n                  label=\"State\"\n                  handleChange={(identifier, value) => handleCountryRegion(identifier, value)}\n                  country={country}\n                  region={region}\n                  margin=\"dense\"\n                  variant=\"outlined\"\n                />\n              </Grid>\n            </Grid>\n\n            <Grid container className={classes.buttonsContainer} justify=\"space-between\">\n              <Button color=\"primary\" variant=\"outlined\" type=\"submit\">\n                {`${isEdit ? \"Edit\" : \"Add\"} Method`}\n              </Button>\n              <Button\n                size=\"small\"\n                variant=\"outlined\"\n                onClick={() => onClose()}\n                className={classes.cancelButton}\n              >\n                Cancel\n              </Button>\n            </Grid>\n          </form>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n};\n\nPaymentMethodsForm.defaultProps = {\n  cardData: null,\n};\n\nPaymentMethodsForm.propTypes = {\n  isOpen: PropTypes.bool.isRequired,\n  onClose: PropTypes.func.isRequired,\n  reloadData: PropTypes.func.isRequired,\n  cardData: PropTypes.shape({\n    id: PropTypes.number,\n    type: PropTypes.string,\n    exp: PropTypes.string,\n    account_number: PropTypes.string,\n    corp_stripe_payment_method_token: PropTypes.string,\n    stripe_payment_method_token: PropTypes.string,\n  }),\n};\n\nexport default PaymentMethodsForm;\n","import React, { useState, useEffect, useCallback } from \"react\";\n\nimport { Button, makeStyles, withStyles } from \"@material-ui/core\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Typography from \"@material-ui/core/Typography\";\nimport moment from \"moment\";\nimport { useSnackbar } from \"notistack\";\n\nimport useAuth from \"../../../hooks/useAuth\";\nimport PaymentMethodService from \"../../../services/patient_portal/payment-method.service\";\nimport { paymentMethodType } from \"../../../utils/helpers\";\nimport PaymentMethodsForm from \"./components/PaymentMethodsForm\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n    padding: \"40px 0px\",\n  },\n  titleSection: {\n    display: \"flex\",\n    alignItems: \"center\",\n  },\n  title: {\n    paddingBottom: theme.spacing(0.5),\n  },\n  btn: {\n    fontSize: \"14px\",\n    marginLeft: theme.spacing(4),\n    marginBottom: theme.spacing(1),\n  },\n  actionButtonStyle: {\n    minWidth: 0,\n  },\n}));\n\nconst StyledTableCell = withStyles(() => ({\n  head: {\n    whiteSpace: \"nowrap\",\n    fontSize: \"14px\",\n    fontWeight: 700,\n    padding: \"6px 24px 2px 2px\",\n    borderBottom: \"unset\",\n  },\n  body: {\n    fontSize: 14,\n    borderBottom: \"unset\",\n  },\n}))(TableCell);\n\nconst StyledTableRow = withStyles(() => ({\n  root: {\n    fontSize: 14,\n    \"& th\": {\n      fontSize: 14,\n      whiteSpace: \"nowrap\",\n      padding: \"0px 16px 2px 2px\",\n      lineHeight: \"16px\",\n    },\n    \"& td\": {\n      fontSize: 14,\n      whiteSpace: \"nowrap\",\n      padding: \"0px 16px 2px 2px\",\n      lineHeight: \"16px\",\n    },\n    \"& button\": {\n      padding: 0,\n      fontSize: 14,\n      lineHeight: \"16px\",\n      fontWeight: \"normal\",\n\n      \"&:hover\": {\n        background: \"transparent\",\n      },\n    },\n  },\n}))(TableRow);\n\nconst PaymentMethods = () => {\n  const classes = useStyles();\n  const { enqueueSnackbar } = useSnackbar();\n  const { lastVisitedPatient } = useAuth();\n  const [paymentMethods, setPaymentMethods] = useState([]);\n  const [paymentMethodDialog, setNewPaymentDialog] = useState(false);\n  const [selectedPaymentMethod, setSelectedPayment] = useState(null);\n\n  const fetchPaymentMethods = useCallback(() => {\n    PaymentMethodService.getPaymentMethods(lastVisitedPatient).then((res) => {\n      setPaymentMethods(res.data);\n    });\n  }, [lastVisitedPatient]);\n\n  useEffect(() => {\n    fetchPaymentMethods();\n  }, [fetchPaymentMethods]);\n\n  const onItemEdit = (item) => {\n    setSelectedPayment(item);\n    setNewPaymentDialog(true);\n  };\n\n  const onItemDelete = (item) => {\n    PaymentMethodService.deletePaymentMethod(item.id).then(() => {\n      enqueueSnackbar(`Payment method deleted successfully!`, {\n        variant: \"success\",\n      });\n      fetchPaymentMethods();\n    });\n  };\n\n  const closeDialog = () => {\n    setNewPaymentDialog(false);\n    if (selectedPaymentMethod) {\n      setSelectedPayment(null);\n    }\n  };\n\n  return (\n    <>\n      {!!paymentMethodDialog && (\n        <PaymentMethodsForm\n          isOpen={paymentMethodDialog}\n          onClose={closeDialog}\n          reloadData={fetchPaymentMethods}\n          cardData={selectedPaymentMethod}\n        />\n      )}\n      <div className={classes.root}>\n        <div className={classes.titleSection}>\n          <Typography\n            component=\"h1\"\n            variant=\"h2\"\n            color=\"textPrimary\"\n            className={classes.title}\n          >\n            Payment Methods\n          </Typography>\n          <Button\n            variant=\"outlined\"\n            color=\"primary\"\n            className={classes.btn}\n            onClick={() => setNewPaymentDialog(true)}\n          >\n            New\n          </Button>\n        </div>\n        <Typography\n          component=\"h5\"\n          variant=\"body1\"\n          color=\"textPrimary\"\n          className={classes.title}\n        >\n          This page is used to manage credit cards or bank accounts used to pay invoices.\n        </Typography>\n        <Grid item md={6} sm={8} xs={12}>\n          {Boolean(paymentMethods.length) && (\n            <TableContainer className={classes.tableContainer}>\n              <Table size=\"small\" className={classes.table}>\n                <TableHead>\n                  <TableRow>\n                    <StyledTableCell>Date</StyledTableCell>\n                    <StyledTableCell>Type</StyledTableCell>\n                    <StyledTableCell>Card Number</StyledTableCell>\n                    <StyledTableCell>Edit</StyledTableCell>\n                    <StyledTableCell>Delete</StyledTableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {paymentMethods.map((item) => (\n                    <StyledTableRow key={item.id}>\n                      <StyledTableCell>\n                        {moment(item.created).format(\"MMM D YYYY\")}\n                      </StyledTableCell>\n                      <StyledTableCell>{paymentMethodType(item.type)}</StyledTableCell>\n                      <StyledTableCell>\n                        Ending in\n                        {\" \"}\n                        {item.account_number}\n                      </StyledTableCell>\n                      <StyledTableCell>\n                        <Button\n                          disableRipple\n                          variant=\"text\"\n                          onClick={() => onItemEdit(item)}\n                          className={classes.actionButtonStyle}\n                        >\n                          Edit\n                        </Button>\n                      </StyledTableCell>\n                      <StyledTableCell>\n                        <Button\n                          disableRipple\n                          variant=\"text\"\n                          onClick={() => onItemDelete(item)}\n                          className={classes.actionButtonStyle}\n                        >\n                          Delete\n                        </Button>\n                      </StyledTableCell>\n                    </StyledTableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </TableContainer>\n          )}\n        </Grid>\n      </div>\n    </>\n  );\n};\n\nexport default PaymentMethods;\n","import axios from \"axios\";\n\nimport { API_BASE } from \"../../utils/API_BASE\";\nimport authHeader from \"../auth-header\";\n\nclass PatientPortalService {\n  // patient profile\n  getProfile() {\n    return axios.get(`${API_BASE}/client-portal/patient`, { headers: authHeader() }).then((res) => res.data);\n  }\n\n  updateProfile(payload, patientId) {\n    return axios.put(`${API_BASE}/client-portal/patient/${patientId}`, payload, {\n      headers: authHeader(),\n    });\n  }\n\n  // appointments\n  getPractitioners(patient) {\n    let url = `${API_BASE}/client-portal/practitioners`;\n    if (patient) {\n      // eslint-disable-next-line max-len\n      url = `${API_BASE}/client-portal/practitioners/?patient_id=${patient.id}&client_id=${patient.client_id}`;\n    }\n    return axios\n      .get(url, {\n        headers: authHeader(),\n      })\n      .then((res) => res.data);\n  }\n\n  getPractitionerDates(patient) {\n    let url = `${API_BASE}/client-portal/practitioner-dates`;\n    if (patient) {\n      // eslint-disable-next-line max-len\n      url = `${API_BASE}/client-portal/practitioner-dates/?patient_id=${patient.id}&client_id=${patient.client_id}`;\n    }\n    return axios\n      .get(url, {\n        headers: authHeader(),\n      })\n      .then((res) => res.data);\n  }\n\n  getBookedAppointments(patient, params) {\n    let url = `${API_BASE}/client-portal/booked-appointments`;\n    if (patient) {\n      // eslint-disable-next-line max-len\n      url = `${API_BASE}/client-portal/booked-appointments?patient_id=${patient.id}&client_id=${patient.client_id}`;\n    }\n    return axios\n      .get(url, {\n        headers: authHeader(),\n        params,\n      })\n      .then((res) => res.data);\n  }\n\n  getAppointmentTypesByPractitionerId(data) {\n    return axios\n      .post(`${API_BASE}/client-portal/appointment-types`, data, {\n        headers: authHeader(),\n      })\n      .then((res) => res.data);\n  }\n\n  bookAppointment(data) {\n    return axios\n      .post(`${API_BASE}/client-portal/appointment`, data, {\n        headers: authHeader(),\n      })\n      .then((res) => res.data);\n  }\n\n  updateAppointment(payload, appointmentId) {\n    return axios\n      .put(`${API_BASE}/client-portal/appointment/${appointmentId}`, payload, {\n        headers: authHeader(),\n      })\n      .then((res) => res.data);\n  }\n\n  // encounters\n  getEncounters(patient) {\n    let url = `${API_BASE}/client-portal/encounters`;\n    if (patient) {\n      // eslint-disable-next-line max-len\n      url = `${API_BASE}/client-portal/encounters/?patient_id=${patient.id}&client_id=${patient.client_id}`;\n    }\n    return axios\n      .get(url, {\n        headers: authHeader(),\n      })\n      .then((res) => res.data);\n  }\n\n  // lab/documents\n  getLabDocuments(patient) {\n    let url = `${API_BASE}/client-portal/labs`;\n    if (patient) {\n      // eslint-disable-next-line max-len\n      url = `${API_BASE}/client-portal/labs/?patient_id=${patient.id}&client_id=${patient.client_id}`;\n    }\n    return axios\n      .get(url, {\n        headers: authHeader(),\n      })\n      .then((res) => res.data);\n  }\n\n  createLabDocuments(patient, reqBody) {\n    let url = `${API_BASE}/client-portal/labs`;\n    if (patient) {\n      // eslint-disable-next-line max-len\n      url = `${API_BASE}/client-portal/labs/?patient_id=${patient.id}&client_id=${patient.client_id}`;\n    }\n    return axios\n      .post(url, reqBody, {\n        headers: authHeader(),\n      })\n      .then((res) => res.data);\n  }\n\n  // Billings\n  getBillings(patient) {\n    let url = `${API_BASE}/client-portal/billings`;\n    if (patient) {\n      // eslint-disable-next-line max-len\n      url = `${API_BASE}/client-portal/billings/?patient_id=${patient.id}&client_id=${patient.client_id}`;\n    }\n\n    return axios\n      .get(url, {\n        headers: authHeader(),\n      })\n      .then((res) => res.data);\n  }\n\n  createBilling(data) {\n    return axios\n      .post(`${API_BASE}/client-portal/billings`, data, {\n        headers: authHeader(),\n      })\n      .then((res) => res.data);\n  }\n\n  getBalance(patient) {\n    let url = `${API_BASE}/client-portal/balance`;\n    if (patient) {\n      // eslint-disable-next-line max-len\n      url = `${API_BASE}/client-portal/balance/?patient_id=${patient.id}&client_id=${patient.client_id}`;\n    }\n    return axios\n      .get(url, {\n        headers: authHeader(),\n      })\n      .then((res) => res.data);\n  }\n\n  // Payment Methods\n  getPaymentMethods(patient) {\n    let url = `${API_BASE}/patient-portal/payment-methods`;\n    if (patient) {\n      // eslint-disable-next-line max-len\n      url = `${API_BASE}/patient-portal/payment-methods/?patient_id=${patient.id}&client_id=${patient.client_id}`;\n    }\n    return axios\n      .get(url, {\n        headers: authHeader(),\n      })\n      .then((res) => res.data);\n  }\n\n  // Pharmacies\n  getPharmacies() {\n    return axios\n      .get(`${API_BASE}/client-portal/pharmacy`, {\n        headers: authHeader(),\n      })\n      .then((res) => res.data);\n  }\n\n  searchPharmacies(data) {\n    return axios\n      .post(`${API_BASE}/client-portal/pharmacy/search`, data, {\n        headers: authHeader(),\n      })\n      .then((res) => res.data);\n  }\n\n  updatePharmacy(pharmacyId, payload) {\n    return axios.put(`${API_BASE}/client-portal/pharmacy/${pharmacyId}`, payload, {\n      headers: authHeader(),\n    })\n      .then((res) => res.data);\n  }\n\n  // Requisitions\n  getRequisitions(patient) {\n    let url = `${API_BASE}/client-portal/lab_requisitions`;\n    if (patient) {\n      // eslint-disable-next-line max-len\n      url = `${API_BASE}/client-portal/lab_requisitions/?patient_id=${patient.id}&client_id=${patient.client_id}`;\n    }\n    return axios\n      .get(url, {\n        headers: authHeader(),\n      })\n      .then((res) => res.data);\n  }\n\n  // Lab billing\n  getLabBilling(patient) {\n    let url = `${API_BASE}/client-portal/lab_billing`;\n    if (patient) {\n        // eslint-disable-next-line max-len\n      url = `${API_BASE}/client-portal/lab_billing/?patient_id=${patient.id}&client_id=${patient.client_id}`;\n    }\n    return axios\n      .get(url, {\n        headers: authHeader(),\n      })\n      .then((res) => res.data);\n  }\n\n\n  // test list\n  getTestList(patient) {\n    let url = `${API_BASE}/client-portal/lab_requisitions/test-list`;\n    if (patient) {\n      // eslint-disable-next-line max-len\n      url = `${API_BASE}/client-portal/lab_requisitions/?patient_id=${patient.id}&client_id=${patient.client_id}`;\n    }\n    return axios\n      .get(url, {\n        headers: authHeader(),\n      })\n      .then((res) => res.data);\n  }\n\n  async getTestProfileInfo(testId) {\n    const url = `${API_BASE}/client-portal/lab_requisitions/test-profile-info?testId=${testId}`;\n\n    const res = await axios.get(url, {\n      headers: authHeader(),\n    });\n    return res.data;\n  }\n\n  async getProfileTests(testId) {\n    const url = `${API_BASE}/client-portal/lab_requisitions/profile-tests?testId=${testId}`;\n\n    const res = await axios.get(url, {\n      headers: authHeader(),\n    });\n\n    return res.data;\n  }\n\n  // Handouts\n  getHandouts() {\n    return axios\n      .get(`${API_BASE}/client-portal/handouts`, {\n        headers: authHeader(),\n      })\n      .then((res) => res.data);\n  }\n\n  createHandouts() {\n    return axios\n      .post(`${API_BASE}/client-portal/handouts`, {\n        headers: authHeader(),\n      })\n      .then((res) => res.data);\n  }\n\n  deleteHandout(id) {\n    return axios\n      .delete(`${API_BASE}/client-portal/handouts/${id}`, {\n        headers: authHeader(),\n      })\n      .then((res) => res.data);\n  }\n\n  // Prescriptions\n  getPrescriptions() {\n    return axios\n      .get(`${API_BASE}/client-portal/prescription`, {\n        headers: authHeader(),\n      })\n      .then((res) => res.data);\n  }\n}\n\nexport default new PatientPortalService();\n","import { useEffect, useRef } from \"react\";\n\nconst useDidMountEffect = (func, deps) => {\n  const didMount = useRef(false);\n\n  useEffect(() => {\n    if (didMount.current) func();\n    else didMount.current = true;\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, deps);\n};\n\nexport default useDidMountEffect;\n","import React from \"react\";\n\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport TextField from \"@material-ui/core/TextField\";\nimport PropTypes from \"prop-types\";\nimport { CountryRegionData } from \"react-country-region-selector\";\n\nfunction CountryRegionMUISelectors(props) {\n  const {\n    country, size, handleChange, outlined, margin,\n  } = props;\n  return (\n    <TextField\n      size={size}\n      id=\"country\"\n      label=\"Country\"\n      value={country}\n      select\n      onChange={(e) => handleChange(\"country\", e.target.value)}\n      fullWidth\n      variant={outlined ? \"outlined\" : \"standard\"}\n      margin={margin || \"none\"}\n    >\n      {CountryRegionData.map((option) => (\n        <MenuItem key={option[0]} value={option}>\n          {option[0]}\n        </MenuItem>\n      ))}\n    </TextField>\n  );\n}\n\nCountryRegionMUISelectors.defaultProps = {\n  size: \"medium\",\n  country: null,\n  outlined: true,\n  margin: \"none\",\n};\n\nCountryRegionMUISelectors.propTypes = {\n  size: PropTypes.string,\n  country: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.array,\n  ]),\n  handleChange: PropTypes.func.isRequired,\n  outlined: PropTypes.bool,\n  margin: PropTypes.string,\n};\n\nexport default CountryRegionMUISelectors;\n","import React from \"react\";\n\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport TextField from \"@material-ui/core/TextField\";\nimport PropTypes from \"prop-types\";\n\nconst getRegions = (country) => {\n  if (!country) {\n    return [];\n  }\n  return country[2].split(\"|\").map((regionPair) => {\n    const [regionName = null, regionInShort] = regionPair.split(\"~\");\n    return [regionName, regionInShort];\n  });\n};\n\nfunction RegionMUISelectors(props) {\n  const {\n    size, label, region, handleChange, outlined, country, margin,\n  } = props;\n  return (\n    <TextField\n      size={size}\n      id=\"state\"\n      label={label}\n      value={region}\n      select\n      onChange={(e) => handleChange(\"region\", e.target.value)}\n      fullWidth\n      variant={outlined ? \"outlined\" : \"standard\"}\n      margin={margin || \"none\"}\n    >\n      {getRegions(country).map((option) => (\n        <MenuItem key={option[0]} value={option[1]}>\n          {option[0]}\n        </MenuItem>\n      ))}\n    </TextField>\n  );\n}\n\nRegionMUISelectors.defaultProps = {\n  size: \"medium\",\n  outlined: true,\n  margin: \"none\",\n};\n\nRegionMUISelectors.propTypes = {\n  size: PropTypes.string,\n  outlined: PropTypes.bool,\n  label: PropTypes.string.isRequired,\n  region: PropTypes.string.isRequired,\n  handleChange: PropTypes.func.isRequired,\n  country: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.array,\n  ]).isRequired,\n  margin: PropTypes.string,\n};\n\nexport default RegionMUISelectors;\n","import React from \"react\";\n\nimport { TextField } from \"@material-ui/core\";\nimport PropTypes from \"prop-types\";\nimport InputMask from \"react-input-mask\";\n\nconst MaskInput = (props) => {\n  const {\n    className,\n    disabled,\n    required,\n    fullWidth,\n    type,\n    name,\n    label,\n    autoFocus,\n    margin,\n    variant,\n    value,\n    mask,\n    onChange,\n  } = props;\n\n  return (\n    <InputMask\n      disabled={disabled}\n      mask={mask}\n      value={value}\n      onChange={onChange}\n    >\n      {(inputProps) => (\n        <TextField\n          {...inputProps}\n          disabled={disabled}\n          autoFocus={autoFocus}\n          required={required}\n          fullWidth={fullWidth}\n          name={name}\n          label={label}\n          margin={margin}\n          type={type}\n          className={className}\n          variant={variant}\n        />\n      )}\n    </InputMask>\n  );\n};\n\nMaskInput.defaultProps = {\n  className: \"\",\n  type: \"text\",\n  name: \"\",\n  label: \"Label\",\n  margin: \"normal\",\n  variant: \"outlined\",\n  value: \"\",\n  mask: \"\",\n  autoFocus: false,\n  required: false,\n  disabled: false,\n  fullWidth: false,\n};\n\nMaskInput.propTypes = {\n  className: PropTypes.string,\n  type: PropTypes.string,\n  name: PropTypes.string,\n  label: PropTypes.string,\n  margin: PropTypes.string,\n  variant: PropTypes.string,\n  value: PropTypes.string,\n  mask: PropTypes.string,\n  autoFocus: PropTypes.bool,\n  disabled: PropTypes.bool,\n  required: PropTypes.bool,\n  fullWidth: PropTypes.bool,\n  onChange: PropTypes.func.isRequired,\n};\n\nexport default MaskInput;\n","import axios from \"axios\";\n\nimport { API_BASE } from \"../../utils/API_BASE\";\nimport authHeader from \"../auth-header\";\n\nclass PaymentMethodService {\n  // patient profile\n  getPaymentMethods() {\n    return axios\n      .get(`${API_BASE}/patient-portal/payment-methods`, { headers: authHeader() })\n      .then((res) => res.data);\n  }\n\n  createPaymentMethod(data) {\n    return axios\n      .post(`${API_BASE}/patient-portal/payment-methods`, data, { headers: authHeader() })\n      .then((res) => res.data);\n  }\n\n  updatePaymentMethod(paymentMethodId, data) {\n    return axios\n      .put(\n        `${API_BASE}/patient-portal/payment-methods/${paymentMethodId}`,\n        data,\n        { headers: authHeader() },\n      )\n      .then((res) => res.data);\n  }\n\n  deletePaymentMethod(id) {\n    return axios\n      .delete(`${API_BASE}/patient-portal/payment-methods/${id}`, { headers: authHeader() })\n      .then((res) => res.data);\n  }\n}\n\nexport default new PaymentMethodService();\n"],"sourceRoot":""}