{"version":3,"sources":["services/supportStatus.service.js","screens/Client/Manage/Support/components/CaseDialog/CaseDialog.js","screens/Client/Manage/Support/Support.js","components/common/StyledTable.js","components/Dialog/index.js","components/common/CustomTooltip.js"],"names":["getStatus","axios","get","API_BASE","headers","authHeader","getSuport","status","data","post","useStyles","makeStyles","theme","formInput","marginBottom","spacing","NewMessage","props","classes","enqueueSnackbar","useSnackbar","isOpen","onClose","useState","subject","message","formFields","setFormFields","handleInputChange","e","target","value","name","Dialog","open","title","onSubmit","preventDefault","reqBody","SupportAPI","createCase","then","response","variant","Grid","className","item","md","TextField","required","autoFocus","id","label","type","fullWidth","onChange","lg","Typography","gutterBottom","color","multiline","rows","Button","cancelForm","hideActions","size","root","flexGrow","padding","paddingBottom","tableContainer","marginTop","actions","textAlign","display","border","fontSize","customSelect","width","margin","submit","overFlowControl","maxWidth","textOverflow","overflow","whiteSpace","statusGroup","Support","cases","setCases","caseStatus","setCaseStatus","searchResults","setSearchResults","noData","setNodata","showDialog","setShowDialog","toggleDialog","prevState","fetchStatusSupport","useCallback","res","length","useEffect","CaseDialog","container","direction","xs","justify","component","onClick","sm","RadioGroup","row","event","defaultValue","aria-label","map","FormControlLabel","control","Radio","Math","random","TableContainer","Paper","Table","table","TableHead","StyledTable","TableBody","result","scope","client_name","case_status","moment","created","format","created_user","updated","StyledTableCellLg","withStyles","head","backgroundColor","palette","grey","fontWeight","body","TableCell","StyledTableCellSm","borderBottom","background","StyledTableRowSm","lineHeight","action","hover","TableRow","StyledTableRowLg","height","createStyles","titleContainer","minHeight","content","maxHeight","fullScreenContent","fullHeight","buttonClose","position","right","top","save","success","minWidth","cancel","error","DialogForm","applyForm","applyButtonText","cancelButtonText","fullScreen","transitionComponent","Boolean","TransitionComponent","disableTypography","clsx","align","defaultProps","undefined","CustomTooltip","tooltip","common","white","boxShadow","shadows","Tooltip"],"mappings":"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","file":"static/js/72.6c72c6f2.chunk.js","sourcesContent":["import axios from \"axios\";\n\nimport { API_BASE } from \"../utils/API_BASE\";\nimport authHeader from \"./auth-header\";\n\nclass SupportAPI {\n  getStatus = () => axios.get(`${API_BASE}/support/status`, {\n    headers: authHeader(),\n  });\n\n  getSuport = (status) => axios.get(`${API_BASE}/support?cStatus=${status}`, {\n    headers: authHeader(),\n  });\n\n  createCase(data) {\n    return axios.post(`${API_BASE}/support`, data, {\n      headers: authHeader(),\n    });\n  }\n}\n\nexport default new SupportAPI();\n","import React, { useState } from \"react\";\n\nimport {\n  TextField, Button, Grid, Typography,\n} from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { useSnackbar } from \"notistack\";\nimport PropTypes from \"prop-types\";\n\nimport Dialog from \"../../../../../../components/Dialog\";\nimport SupportAPI from \"../../../../../../services/supportStatus.service\";\n\nconst useStyles = makeStyles((theme) => ({\n  formInput: {\n    marginBottom: theme.spacing(4),\n  },\n}));\n\nconst NewMessage = (props) => {\n  const classes = useStyles();\n  const { enqueueSnackbar } = useSnackbar();\n  const { isOpen, onClose } = props;\n\n  const [formFields, setFormFields] = useState({\n    subject: \"\",\n    message: \"\",\n  });\n\n  const handleInputChange = (e) => {\n    const { value, name } = e.target;\n    setFormFields({\n      ...formFields,\n      [name]: value,\n    });\n  };\n\n  const onFormSubmit = (e) => {\n    e.preventDefault();\n    const reqBody = {\n      data: {\n        message: formFields.message,\n        subject: formFields.subject,\n      },\n    };\n    SupportAPI.createCase(reqBody)\n      .then((response) => {\n        enqueueSnackbar(`${response.message}`, { variant: \"success\" });\n        onClose();\n      });\n  };\n\n  return (\n    <Dialog\n      open={isOpen}\n      title=\"New Case\"\n      message={(\n        <form onSubmit={onFormSubmit}>\n          <Grid className={classes.formInput} item md={4}>\n            <TextField\n              required\n              autoFocus\n              variant=\"standard\"\n              name=\"subject\"\n              id=\"subject\"\n              label=\"Subject\"\n              type=\"text\"\n              fullWidth\n              value={formFields.subject}\n              onChange={(e) => handleInputChange(e)}\n            />\n          </Grid>\n          <Grid item lg={2}>\n            <Typography gutterBottom variant=\"body1\" color=\"textPrimary\">\n              Message\n            </Typography>\n          </Grid>\n          <Grid className={classes.formInput} item md={12}>\n            <TextField\n              required\n              variant=\"outlined\"\n              name=\"message\"\n              id=\"message\"\n              type=\"text\"\n              fullWidth\n              value={formFields.message}\n              onChange={(e) => handleInputChange(e)}\n              multiline\n              rows={5}\n            />\n          </Grid>\n\n          <Grid>\n            <Button variant=\"outlined\" type=\"submit\">\n              Save\n            </Button>\n          </Grid>\n        </form>\n      )}\n      cancelForm={() => onClose()}\n      hideActions\n      size=\"md\"\n    />\n  );\n};\n\nNewMessage.propTypes = {\n  isOpen: PropTypes.bool.isRequired,\n  onClose: PropTypes.func.isRequired,\n};\n\nexport default NewMessage;\n","import React, { useState, useEffect, useCallback } from \"react\";\n\nimport {\n  makeStyles,\n  RadioGroup,\n  Radio,\n  FormControlLabel,\n  Button,\n} from \"@material-ui/core\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport Typography from \"@material-ui/core/Typography\";\nimport moment from \"moment\";\n\nimport LightTooltip from \"../../../../components/common/CustomTooltip\";\nimport { StyledTableRowSm, StyledTableCellSm } from \"../../../../components/common/StyledTable\";\nimport SupportAPI from \"../../../../services/supportStatus.service\";\nimport CaseDialog from \"./components/CaseDialog\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n    padding: \"25px 0px\",\n  },\n  title: {\n    paddingBottom: theme.spacing(0.5),\n  },\n\n  tableContainer: {\n    marginTop: theme.spacing(2),\n  },\n\n  actions: {\n    textAlign: \"center\",\n    display: \"flex\",\n    border: \"none\",\n    \"& button\": {\n      fontSize: \"12px\",\n    },\n  },\n  customSelect: {\n    width: \"185px\",\n    margin: theme.spacing(2, 0, 0, 0),\n  },\n  submit: {\n    margin: theme.spacing(2, 0, 2),\n    width: \"185px\",\n  },\n  overFlowControl: {\n    maxWidth: \"130px\",\n    textOverflow: \"ellipsis\",\n    overflow: \"hidden\",\n    whiteSpace: \"nowrap\",\n  },\n  statusGroup: {\n    marginTop: theme.spacing(2),\n    marginBottom: theme.spacing(2),\n  },\n}));\n\nexport default function Support() {\n  const classes = useStyles();\n  const [cases, setCases] = useState(\"\");\n  const [caseStatus, setCaseStatus] = useState([]);\n  const [searchResults, setSearchResults] = useState([]);\n  const [noData, setNodata] = useState(\"\");\n  const [showDialog, setShowDialog] = useState(false);\n\n  const toggleDialog = () => setShowDialog((prevState) => !prevState);\n\n  const fetchStatus = () => {\n    SupportAPI.getStatus().then((res) => setCaseStatus(res.data.data));\n  };\n\n  const fetchStatusSupport = useCallback(() => {\n    SupportAPI.getSuport(cases).then((res) => {\n      if (res.data.data.length > 0) {\n        setSearchResults(res.data.data);\n      } else {\n        setSearchResults([]);\n        setNodata(\"None Found\");\n      }\n    });\n  }, [cases]);\n\n  useEffect(() => {\n    fetchStatusSupport();\n  }, [cases, fetchStatusSupport]);\n\n  useEffect(() => {\n    fetchStatus();\n  }, []);\n\n  return (\n    <>\n      {!!showDialog && (\n        <CaseDialog\n          isOpen={showDialog}\n          onClose={toggleDialog}\n        />\n      )}\n      <div className={classes.root}>\n        <Grid container direction=\"column\">\n          <Grid item md={4} xs={12}>\n            <Grid container justify=\"space-between\">\n              <Typography component=\"h1\" variant=\"h2\" color=\"textPrimary\" className={classes.title}>\n                Technical Support\n              </Typography>\n              <Button\n                variant=\"outlined\"\n                color=\"primary\"\n                onClick={() => toggleDialog()}\n              >\n                New\n              </Button>\n            </Grid>\n\n            <Typography component=\"p\" variant=\"body2\" color=\"textPrimary\">\n              This page is used for support\n            </Typography>\n          </Grid>\n          <Grid item xs={12} sm={12}>\n            <RadioGroup\n              className={classes.statusGroup}\n              row\n              value={cases}\n              onChange={(event) => setCases(event.target.value)}\n              name=\"generic\"\n              defaultValue=\"all\"\n              aria-label=\"position\"\n            >\n              {caseStatus.map((status) => (\n                <FormControlLabel\n                  key={status.id}\n                  value={status.id}\n                  label={status.name}\n                  control={<Radio color=\"primary\" />}\n                />\n              ))}\n              <FormControlLabel\n                key={Math.random()}\n                value=\"\"\n                label=\"All\"\n                control={<Radio color=\"primary\" />}\n              />\n            </RadioGroup>\n          </Grid>\n        </Grid>\n\n        {searchResults.length > 0 ? (\n          <TableContainer component={Paper} className={classes.tableContainer}>\n            <Table size=\"small\" className={classes.table} aria-label=\"a dense table\">\n              <TableHead>\n                <StyledTableRowSm>\n                  <StyledTableCellSm padding=\"checkbox\">Case ID</StyledTableCellSm>\n                  <StyledTableCellSm padding=\"checkbox\">Client</StyledTableCellSm>\n                  <StyledTableCellSm padding=\"checkbox\">Subject</StyledTableCellSm>\n                  <StyledTableCellSm padding=\"checkbox\">Status</StyledTableCellSm>\n                  <StyledTableCellSm padding=\"checkbox\">Created</StyledTableCellSm>\n                  <StyledTableCellSm padding=\"checkbox\">Created By</StyledTableCellSm>\n                  <StyledTableCellSm padding=\"checkbox\">Updated</StyledTableCellSm>\n                </StyledTableRowSm>\n              </TableHead>\n              <TableBody>\n                {searchResults.map((result) => (\n                  <StyledTableRowSm key={result.id}>\n                    <StyledTableCellSm padding=\"checkbox\" component=\"th\" scope=\"row\">\n                      {result.id}\n                    </StyledTableCellSm>\n                    <StyledTableCellSm padding=\"checkbox\" component=\"th\" scope=\"row\">\n                      {result.client_name}\n                    </StyledTableCellSm>\n                    {result.subject.length > 40 ? (\n                      <LightTooltip className={classes.overFlowControl} title={result.subject}>\n                        <StyledTableCellSm padding=\"checkbox\" component=\"th\" scope=\"row\">\n                          {result.subject}\n                        </StyledTableCellSm>\n                      </LightTooltip>\n                    ) : (\n                      <StyledTableCellSm\n                        padding=\"checkbox\"\n                        className={classes.overFlowControl}\n                        component=\"th\"\n                        scope=\"row\"\n                      >\n                        {result.subject}\n                      </StyledTableCellSm>\n                    )}\n                    <StyledTableCellSm padding=\"checkbox\" component=\"th\" scope=\"row\">\n                      {result.case_status}\n                    </StyledTableCellSm>\n                    <StyledTableCellSm padding=\"checkbox\" component=\"th\" scope=\"row\">\n                      {moment(result.created).format(\"lll\")}\n                    </StyledTableCellSm>\n                    <StyledTableCellSm padding=\"checkbox\" component=\"th\" scope=\"row\">\n                      {result.created_user}\n                    </StyledTableCellSm>\n                    <StyledTableCellSm padding=\"checkbox\" component=\"th\" scope=\"row\">\n                      {moment(result.updated).format(\"lll\")}\n                    </StyledTableCellSm>\n                  </StyledTableRowSm>\n                ))}\n              </TableBody>\n            </Table>\n          </TableContainer>\n        ) : (\n          <Typography component=\"p\" variant=\"body2\" color=\"textPrimary\">\n            {noData}\n          </Typography>\n        )}\n      </div>\n    </>\n  );\n}\n","import {\n  TableRow,\n  TableCell,\n  withStyles,\n} from \"@material-ui/core\";\n\nexport const StyledTableCellLg = withStyles((theme) => ({\n  head: {\n    backgroundColor: theme.palette.grey,\n    color: theme.palette.grey,\n    fontSize: \"12px\",\n    fontWeight: 700,\n  },\n  body: {\n    fontSize: 14,\n  },\n}))(TableCell);\n\nexport const StyledTableCellSm = withStyles(() => ({\n  head: {\n    whiteSpace: \"nowrap\",\n    fontSize: \"12px\",\n    fontWeight: 700,\n    padding: \"6px 24px 6px 2px\",\n    borderBottom: \"unset\",\n    background: \"white\",\n  },\n  body: {\n    fontSize: 12,\n    borderBottom: \"unset\",\n  },\n}))(TableCell);\n\nexport const StyledTableRowSm = withStyles((theme) => ({\n  root: {\n    \"& p\": {\n      fontSize: 12,\n      lineHeight: \"21px\",\n    },\n    fontSize: 14,\n    \"&:nth-of-type(odd)\": {\n      backgroundColor: theme.palette.action.hover,\n    },\n    \"& th\": {\n      fontSize: 12,\n      whiteSpace: \"nowrap\",\n      padding: \"2px 16px 2px 2px\",\n    },\n    \"& td\": {\n      fontSize: 12,\n      whiteSpace: \"nowrap\",\n      padding: \"2px 16px 2px 2px\",\n    },\n  },\n}))(TableRow);\n\nexport const StyledTableRowLg = withStyles((theme) => ({\n  root: {\n    fontSize: 14,\n    \"&:nth-of-type(odd)\": {\n      backgroundColor: theme.palette.action.hover,\n    },\n    \"& th\": {\n      fontSize: 12,\n    },\n    \"& td\": {\n      fontSize: 12,\n      height: \"50px\",\n    },\n  },\n}))(TableRow);\n","import React from \"react\";\n\nimport { IconButton, Button, Typography } from \"@material-ui/core\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport { createStyles, makeStyles } from \"@material-ui/core/styles\";\nimport CloseIcon from \"@material-ui/icons/CloseOutlined\";\nimport clsx from \"clsx\";\nimport PropTypes from \"prop-types\";\n\nconst useStyles = makeStyles((theme) => createStyles({\n  titleContainer: {\n    textAlign: \"center\",\n    borderBottom: \"1px solid #ddd\",\n    minHeight: 53,\n  },\n  content: {\n    padding: \"1rem 2rem\",\n    maxHeight: \"86vh\",\n  },\n  fullScreenContent: {\n    maxHeight: \"unset\",\n  },\n  fullHeight: {\n    minHeight: \"86vh\",\n  },\n  buttonClose: {\n    position: \"absolute\",\n    right: theme.spacing(1),\n    top: theme.spacing(1),\n    padding: theme.spacing(1),\n  },\n  save: {\n    background: theme.palette.success,\n    minWidth: 100,\n  },\n  cancel: {\n    background: theme.palette.error,\n    minWidth: 100,\n  },\n}));\n\nconst DialogForm = ({\n  title,\n  open,\n  message,\n  applyForm,\n  cancelForm,\n  hideActions,\n  applyButtonText,\n  cancelButtonText,\n  size,\n  fullScreen,\n  fullHeight,\n  transitionComponent,\n}) => {\n  const classes = useStyles();\n  return (\n    <div>\n      <Dialog\n        fullScreen={Boolean(fullScreen)}\n        open={open}\n        onClose={cancelForm}\n        fullWidth\n        maxWidth={size}\n        TransitionComponent={transitionComponent}\n      // disableBackdropClick //enable esc button close and backdrop click\n      >\n        {cancelForm && (\n          <IconButton\n            className={classes.buttonClose}\n            onClick={cancelForm}\n            aria-label=\"close\"\n          >\n            <CloseIcon fontSize=\"small\" />\n          </IconButton>\n        )}\n        <DialogTitle disableTypography className={classes.titleContainer} id=\"form-dialog-title\">\n          <Typography variant=\"h5\">{title}</Typography>\n        </DialogTitle>\n        <DialogContent\n          className={clsx({\n            [classes.content]: true, // always apply\n            [classes.fullHeight]: fullHeight, // only when fullHeight === true\n            [classes.fullScreenContent]: fullScreen, // only when fullScreen === true\n          })}\n        >\n          {message}\n        </DialogContent>\n        {hideActions ? null : (\n          <>\n            <DialogActions align=\"center\">\n              {applyForm && (\n                <Button\n                  className={classes.save}\n                  onClick={applyForm}\n                  color=\"primary\"\n                  type=\"submit\"\n                  variant=\"contained\"\n                >\n                  {applyButtonText}\n                </Button>\n              )}\n              {cancelForm && (\n                <Button\n                  className={classes.cancel}\n                  onClick={cancelForm}\n                  color=\"secondary\"\n                  type=\"submit\"\n                  variant=\"contained\"\n                >\n                  {cancelButtonText}\n                </Button>\n              )}\n            </DialogActions>\n          </>\n        )}\n      </Dialog>\n    </div>\n  );\n};\n\nDialogForm.defaultProps = {\n  title: \"\",\n  message: null,\n  applyForm: () => { },\n  cancelForm: () => { },\n  hideActions: true,\n  applyButtonText: \"Continue\",\n  cancelButtonText: \"Cancel\",\n  size: \"lg\",\n  fullScreen: false,\n  fullHeight: false,\n  transitionComponent: undefined,\n};\n\nDialogForm.propTypes = {\n  title: PropTypes.string,\n  open: PropTypes.bool.isRequired,\n  message: PropTypes.node,\n  applyForm: PropTypes.func,\n  cancelForm: PropTypes.func,\n  hideActions: PropTypes.bool,\n  applyButtonText: PropTypes.string,\n  cancelButtonText: PropTypes.string,\n  size: PropTypes.string,\n  fullScreen: PropTypes.bool,\n  fullHeight: PropTypes.bool,\n  transitionComponent: PropTypes.node,\n};\n\nexport default DialogForm;\n","import { Tooltip } from \"@material-ui/core\";\nimport { withStyles } from \"@material-ui/core/styles\";\n\nconst CustomTooltip = withStyles((theme) => ({\n  tooltip: {\n    backgroundColor: theme.palette.common.white,\n    color: \"rgba(0, 0, 0, 0.87)\",\n    boxShadow: theme.shadows[1],\n    fontSize: 13,\n  },\n}))(Tooltip);\n\n\nexport default CustomTooltip;\n"],"sourceRoot":""}