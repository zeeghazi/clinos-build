{"version":3,"sources":["services/appointmentTypeUser.service.js","screens/Client/Setup/AppointmentTypesUser/AppointmentTypesUser.js"],"names":["axios","get","API_BASE","headers","authHeader","then","res","data","useStyles","makeStyles","theme","root","flexGrow","padding","labels","fontWeight","fontSize","color","palette","text","primary","box","minHeight","display","alignItems","feesInput","maxWidth","AppointmentTypesUser","classes","useState","transformedData","setTransformedData","users","setUsers","appointments","setAppointments","fetchAppointmentTypes","useCallback","AppointmentTypeUserService","getAll","appointmentTypes","_","orderBy","appointment_types","usersArray","user","groupedByUser","mapValues","groupBy","useEffect","userColumns","useMemo","Object","keys","getUserName","usersState","key","name","nameArray","filter","x","String","id","length","Container","className","Box","mb","Typography","component","variant","gutterBottom","Grid","container","spacing","item","xs","map","appt","appointment_type","Math","random","index","appointment_type_id","TextField","value","amount","margin","label","onChange","e","event","target","tempData","updateFeesHandler","FormControlLabel","control","Switch","checked","Boolean","active","updateStatusHandler","labelPlacement"],"mappings":"mUAae,M,sFAPb,WACE,OAAOA,IACJC,IADI,UACGC,IADH,4BACuC,CAAEC,QAASC,gBACtDC,MAAK,SAACC,GAAD,OAASA,EAAIC,Y,aCMnBC,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJC,SAAU,EACVC,QAAS,YAEXC,OAAQ,CACNC,WAAY,IACZC,SAAU,GACVC,MAAOP,EAAMQ,QAAQC,KAAKC,SAE5BC,IAAK,CACHC,UAAW,GACXC,QAAS,OACTC,WAAY,UAEdC,UAAW,CACTC,SAAU,QAqICC,EAjIc,WAC3B,IAAMC,EAAUpB,IADiB,EAEaqB,mBAAS,IAFtB,mBAE1BC,EAF0B,KAETC,EAFS,OAGPF,mBAAS,IAHF,mBAG1BG,EAH0B,KAGnBC,EAHmB,OAIOJ,mBAAS,IAJhB,mBAI1BK,EAJ0B,KAIZC,EAJY,KAM3BC,EAAwBC,uBAAY,WACxCC,EAA2BC,SAASlC,MAAK,SAACC,GAAS,IACzCC,EAASD,EAAIC,KAAbA,KACFiC,EAAmBC,IAAEC,QAAQpC,EAAIC,KAAKoC,kBAAmB,MACzDC,EAAatC,EAAIC,KAAKsC,KAEtBC,EAAgBL,IAAEM,UAAUN,IAAEO,QAAQzC,EAAM,YAClD0B,EAAS,YAAIW,IACbT,EAAgB,YAAIK,IACpBT,EAAmB,eAAKe,SAEzB,IAEHG,qBAAU,WACRb,MACC,CAACA,IAEJ,IAcMc,EAAcC,mBAAQ,kBAAMC,OAAOC,KAAKvB,KAAkB,CAACA,IAE3DwB,EAAc,SAACC,EAAYC,GAC/B,IAAIC,EAAO,GACLC,EAAYH,EAAWI,QAAO,SAACC,GAAD,OAAOC,OAAOD,EAAEE,MAAQD,OAAOL,MAInE,OAHIE,EAAUK,SACZN,EAAOC,EAAU,GAAGD,MAEfA,GAGT,OACE,eAACO,EAAA,EAAD,CAAWtC,UAAU,EAAOuC,UAAWrC,EAAQjB,KAA/C,UACE,eAACuD,EAAA,EAAD,CAAKC,GAAI,EAAT,UACE,cAACC,EAAA,EAAD,CACEC,UAAU,KACVC,QAAQ,KACRrD,MAAM,cACNsD,cAAY,EAJd,+CAQA,cAACH,EAAA,EAAD,CAAYC,UAAU,IAAIC,QAAQ,QAAQrD,MAAM,cAAcsD,cAAY,EAA1E,gGAKF,eAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAzB,UACE,eAACF,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAf,UACE,cAACJ,EAAA,EAAD,CAAMP,UAAWrC,EAAQP,MAEvBa,EAAa2C,KAAI,SAACC,GAAD,OACf,cAACN,EAAA,EAAD,CAAMP,UAAWrC,EAAQP,IAAzB,SACE,cAAC+C,EAAA,EAAD,CAAYH,UAAWrC,EAAQd,OAA/B,SAAwCgE,EAAKC,oBADZD,EAAKhB,IAAMkB,KAAKC,gBAOvD/B,EAAYa,OACRb,EAAY2B,KAAI,SAACrB,GAAD,OAChB,eAACgB,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAf,UACE,cAACJ,EAAA,EAAD,CAAMP,UAAWrC,EAAQP,IAAzB,SACE,cAAC+C,EAAA,EAAD,CAAYH,UAAWrC,EAAQd,OAA/B,SACGwC,EAAYtB,EAAOwB,OAGvB1B,EAAgB0B,GAAKqB,KAAI,SAACF,EAAMO,GAE/B,OADiBP,EAAKQ,sBAAwBjD,EAAagD,GAAOpB,GAI5D,eAACU,EAAA,EAAD,CACEC,WAAS,EACTjD,WAAW,SACXyC,UAAWrC,EAAQP,IAHrB,UAME,cAAC+D,EAAA,EAAD,CACEC,MAAOV,EAAKW,OACZhB,QAAQ,WACRiB,OAAO,QACPC,MAAM,MACNvB,UAAWrC,EAAQH,UACnBgE,SAAU,SAACC,GAAD,OAvEV,SAACC,EAAOnC,EAAK0B,GAAW,IACxCG,EAAUM,EAAMC,OAAhBP,MACFQ,EAAQ,eAAQ/D,GACtB+D,EAASrC,GAAK0B,GAAOI,OAASD,EAC9BtD,EAAmB,eAAK8D,IAmEiBC,CAAkBJ,EAAGlC,EAAK0B,MAE7C,cAACa,EAAA,EAAD,CACEV,MAAM,MACNW,QACE,cAACC,EAAA,EAAD,CACEhF,MAAM,UACNiF,QAASC,QAAQxB,EAAKyB,QACtBX,SAAU,SAACC,GAAD,OAtFZ,SAACC,EAAOnC,EAAK0B,GAAW,IAC1CgB,EAAYP,EAAMC,OAAlBM,QACFL,EAAQ,eAAQ/D,GACtB+D,EAASrC,GAAK0B,GAAOkB,OAASF,EAAU,EAAI,EAC5CnE,EAAmB,eAAK8D,IAkFqBQ,CAAoBX,EAAGlC,EAAK0B,MAGjDM,MAAOb,EAAKyB,OAAS,SAAW,WAChCE,eAAe,UAxBnB,UAIU9C,EAJV,YAIiBmB,EAAKQ,sBAwBtB,QAvCa3B,MA4CvB","file":"static/js/22.83ff77b7.chunk.js","sourcesContent":["import axios from \"axios\";\n\nimport { API_BASE } from \"../utils/API_BASE\";\nimport authHeader from \"./auth-header\";\n\nclass AppointmentService {\n  getAll() {\n    return axios\n      .get(`${API_BASE}/appointment-types/users`, { headers: authHeader() })\n      .then((res) => res.data);\n  }\n}\n\nexport default new AppointmentService();\n","import React, {\n  useEffect, useCallback, useState, useMemo,\n} from \"react\";\n\nimport {\n  Box, Typography, TextField, FormControlLabel,\n} from \"@material-ui/core\";\nimport Container from \"@material-ui/core/Container\";\nimport Grid from \"@material-ui/core/Grid\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Switch from \"@material-ui/core/Switch\";\nimport _ from \"lodash\";\n\nimport AppointmentTypeUserService from \"../../../../services/appointmentTypeUser.service\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n    padding: \"25px 0px\",\n  },\n  labels: {\n    fontWeight: 500,\n    fontSize: 15,\n    color: theme.palette.text.primary,\n  },\n  box: {\n    minHeight: 75,\n    display: \"flex\",\n    alignItems: \"center\",\n  },\n  feesInput: {\n    maxWidth: 80,\n  },\n}));\n\nconst AppointmentTypesUser = () => {\n  const classes = useStyles();\n  const [transformedData, setTransformedData] = useState([]);\n  const [users, setUsers] = useState([]);\n  const [appointments, setAppointments] = useState([]);\n\n  const fetchAppointmentTypes = useCallback(() => {\n    AppointmentTypeUserService.getAll().then((res) => {\n      const { data } = res.data;\n      const appointmentTypes = _.orderBy(res.data.appointment_types, \"id\");\n      const usersArray = res.data.user;\n\n      const groupedByUser = _.mapValues(_.groupBy(data, \"user_id\"));\n      setUsers([...usersArray]);\n      setAppointments([...appointmentTypes]);\n      setTransformedData({ ...groupedByUser });\n    });\n  }, []);\n\n  useEffect(() => {\n    fetchAppointmentTypes();\n  }, [fetchAppointmentTypes]);\n\n  const updateStatusHandler = (event, key, index) => {\n    const { checked } = event.target;\n    const tempData = { ...transformedData };\n    tempData[key][index].active = checked ? 1 : 0;\n    setTransformedData({ ...tempData });\n  };\n\n  const updateFeesHandler = (event, key, index) => {\n    const { value } = event.target;\n    const tempData = { ...transformedData };\n    tempData[key][index].amount = value;\n    setTransformedData({ ...tempData });\n  };\n\n  const userColumns = useMemo(() => Object.keys(transformedData), [transformedData]);\n\n  const getUserName = (usersState, key) => {\n    let name = \"\";\n    const nameArray = usersState.filter((x) => String(x.id) === String(key));\n    if (nameArray.length) {\n      name = nameArray[0].name;\n    }\n    return name;\n  };\n\n  return (\n    <Container maxWidth={false} className={classes.root}>\n      <Box mb={2}>\n        <Typography\n          component=\"h1\"\n          variant=\"h2\"\n          color=\"textPrimary\"\n          gutterBottom\n        >\n          Appointment Types User Assignment\n        </Typography>\n        <Typography component=\"p\" variant=\"body2\" color=\"textPrimary\" gutterBottom>\n          This page is used to select which appointment types are used by\n          which providers\n        </Typography>\n      </Box>\n      <Grid container spacing={1}>\n        <Grid item xs={2}>\n          <Grid className={classes.box} />\n          {\n            appointments.map((appt) => (\n              <Grid className={classes.box} key={appt.id || Math.random()}>\n                <Typography className={classes.labels}>{appt.appointment_type}</Typography>\n              </Grid>\n            ))\n          }\n        </Grid>\n        {\n          userColumns.length\n            ? userColumns.map((key) => (\n              <Grid item xs={2} key={key}>\n                <Grid className={classes.box}>\n                  <Typography className={classes.labels}>\n                    {getUserName(users, key)}\n                  </Typography>\n                </Grid>\n                {transformedData[key].map((item, index) => {\n                  const hasValue = item.appointment_type_id === appointments[index].id;\n                  return (\n                    hasValue\n                      ? (\n                        <Grid\n                          container\n                          alignItems=\"center\"\n                          className={classes.box}\n                          key={`${key}_${item.appointment_type_id}`}\n                        >\n                          <TextField\n                            value={item.amount}\n                            variant=\"outlined\"\n                            margin=\"dense\"\n                            label=\"Fee\"\n                            className={classes.feesInput}\n                            onChange={(e) => updateFeesHandler(e, key, index)}\n                          />\n                          <FormControlLabel\n                            value=\"top\"\n                            control={(\n                              <Switch\n                                color=\"primary\"\n                                checked={Boolean(item.active)}\n                                onChange={(e) => updateStatusHandler(e, key, index)}\n                              />\n                            )}\n                            label={item.active ? \"Active\" : \"Inactive\"}\n                            labelPlacement=\"top\"\n                          />\n                        </Grid>\n                      )\n                      : \"\"\n                  );\n                })}\n              </Grid>\n            ))\n            : \"Fetching Data...\"\n        }\n      </Grid>\n    </Container>\n  );\n};\n\nexport default AppointmentTypesUser;\n"],"sourceRoot":""}