{"version":3,"sources":["screens/patient-portal/Billing/components/NewTransactionForm.js","screens/patient-portal/Billing/components/ViewTransactionDetails.js","screens/patient-portal/Billing/Billing.js","components/Dialog/index.js","services/patient_portal/patient-portal.service.js","static/transactionForm.js"],"names":["useStyles","makeStyles","theme","inputRow","margin","spacing","formInput","marginBottom","customLabel","fontSize","color","NewTransactionForm","props","classes","lastVisitedPatient","useAuth","enqueueSnackbar","useSnackbar","isOpen","onClose","reloadData","useState","date","type","paymentType","amount","accountNum","notes","formFields","setFormFields","handleInputChnage","e","target","value","name","Dialog","open","title","message","Grid","container","justify","Typography","variant","onSubmit","preventDefault","reqBody","data","dt","moment","format","patient_id","id","client_id","type_id","payment_type","note","account_number","PatientPortalService","createBilling","then","response","className","TransactionFormFields","map","item","alignItems","lg","htmlFor","label","md","baseType","TextField","required","fullWidth","onChange","select","placeholder","options","option","MenuItem","multiline","rows","Button","onClick","cancelForm","hideActions","size","ViewTransactionDetails","component","tran_type","root","flexGrow","padding","paddingBottom","subTitle","viewIcon","cursor","centered","textAlign","borderTop","shiftContent","paddingTop","textButton","makePaymentButton","marginLeft","StyledTableCell","withStyles","head","whiteSpace","fontWeight","borderBottom","body","TableCell","StyledTableRow","lineHeight","TableRow","Billing","billings","setBillings","newPaymentDialog","setNewPaymentDialog","selectedPayment","setSelectedPayment","balance","setBalance","fetchBillings","useCallback","getBillings","res","fetchBalance","getBalance","length","useEffect","Boolean","sm","xs","TableContainer","tableContainer","Table","table","TableHead","align","TableBody","scope","account_num","toFixed","hasValue","colSpan","resMessage","clsx","createStyles","titleContainer","minHeight","content","maxHeight","fullScreenContent","fullHeight","buttonClose","position","right","top","save","background","palette","success","minWidth","cancel","error","DialogForm","applyForm","applyButtonText","cancelButtonText","fullScreen","transitionComponent","maxWidth","TransitionComponent","aria-label","disableTypography","defaultProps","undefined","axios","get","API_BASE","headers","authHeader","payload","patientId","put","patient","url","params","post","appointmentId","pharmacyId","testId","a","delete"],"mappings":"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","file":"static/js/73.80f65f3a.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n\nimport {\n  TextField,\n  Button,\n  Grid,\n  Typography,\n  MenuItem,\n} from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport moment from \"moment\";\nimport { useSnackbar } from \"notistack\";\nimport PropTypes from \"prop-types\";\n\nimport Dialog from \"../../../../components/Dialog\";\nimport useAuth from \"../../../../hooks/useAuth\";\nimport PatientPortalService from \"../../../../services/patient_portal/patient-portal.service\";\nimport { TransactionFormFields } from \"../../../../static/transactionForm\";\n\nconst useStyles = makeStyles((theme) => ({\n  inputRow: {\n    margin: theme.spacing(3, 0),\n  },\n  formInput: {\n    marginBottom: theme.spacing(1),\n  },\n  customLabel: {\n    fontSize: 16,\n    color: \"#37474f\",\n  },\n}));\n\nconst NewTransactionForm = (props) => {\n  const classes = useStyles();\n  const { lastVisitedPatient } = useAuth();\n  const { enqueueSnackbar } = useSnackbar();\n  const { isOpen, onClose, reloadData } = props;\n\n  const [formFields, setFormFields] = useState({\n    date: \"\",\n    type: \"\",\n    paymentType: \"\",\n    amount: \"\",\n    accountNum: \"\",\n    notes: \"\",\n  });\n\n  const handleInputChnage = (e) => {\n    const { value, name } = e.target;\n    setFormFields({\n      ...formFields,\n      [name]: value,\n    });\n  };\n\n  const onFormSubmit = (e) => {\n    e.preventDefault();\n    const reqBody = {\n      data: {\n        dt: moment(formFields.date).format(\"YYYY-MM-DD hh:mm\"),\n        patient_id: lastVisitedPatient.id,\n        client_id: lastVisitedPatient.client_id,\n        type_id: formFields.type,\n        payment_type: formFields.paymentType,\n        amount: formFields.amount,\n        note: formFields.notes,\n        account_number: formFields.accountNum,\n      },\n    };\n    PatientPortalService.createBilling(reqBody)\n      .then((response) => {\n        enqueueSnackbar(`${response.message}`, { variant: \"success\" });\n        reloadData();\n        onClose();\n      });\n  };\n\n  return (\n    <Dialog\n      open={isOpen}\n      title={\" \"}\n      message={(\n        <>\n          <Grid container justify=\"space-between\">\n            <Typography variant=\"h3\" color=\"textSecondary\">\n              New Transaction\n            </Typography>\n          </Grid>\n          <form onSubmit={onFormSubmit}>\n            <Grid className={classes.inputRow}>\n              {TransactionFormFields.map((item) => (\n                <Grid\n                  key={item.name}\n                  container\n                  alignItems=\"center\"\n                  className={classes.formInput}\n                >\n                  <Grid item lg={2}>\n                    <label htmlFor={item.label} variant=\"h4\" color=\"textSecondary\">\n                      {item.label}\n                    </label>\n                  </Grid>\n                  <Grid item md={4}>\n                    {item.baseType === \"input\" ? (\n                      <TextField\n                        variant=\"standard\"\n                        name={item.name}\n                        id={item.id}\n                        type={item.type}\n                        required\n                        fullWidth\n                        value={formFields[item.name]}\n                        onChange={(e) => handleInputChnage(e)}\n                      />\n                    ) : (\n                      <TextField\n                        select\n                        placeholder={item.label}\n                        id={item.id}\n                        name={item.name}\n                        value={formFields[item.name]}\n                        required\n                        fullWidth\n                        onChange={(e) => handleInputChnage(e)}\n                      >\n                        {item.options.map((option) => (\n                          <MenuItem key={option.value} value={option.value}>\n                            {option.label}\n                          </MenuItem>\n                        ))}\n                      </TextField>\n                    )}\n                  </Grid>\n                </Grid>\n              ))}\n              <Grid className={classes.formInput} item lg={2}>\n                <Typography className={classes.customLabel} color=\"textSecondary\">\n                  Notes\n                </Typography>\n              </Grid>\n              <Grid item md={12}>\n                <TextField\n                  variant=\"outlined\"\n                  name=\"notes\"\n                  id=\"notes\"\n                  type=\"text\"\n                  required\n                  fullWidth\n                  value={formFields.notes}\n                  onChange={(e) => handleInputChnage(e)}\n                  multiline\n                  rows={5}\n                />\n              </Grid>\n            </Grid>\n\n            <Grid container justify=\"space-between\">\n              <Button\n                variant=\"outlined\"\n                type=\"submit\"\n              >\n                Save\n              </Button>\n              <Button\n                variant=\"outlined\"\n                onClick={() => onClose()}\n              >\n                Cancel\n              </Button>\n            </Grid>\n          </form>\n        </>\n      )}\n      cancelForm={() => onClose()}\n      hideActions\n      size=\"md\"\n    />\n  );\n};\n\nNewTransactionForm.propTypes = {\n  isOpen: PropTypes.bool.isRequired,\n  onClose: PropTypes.func.isRequired,\n  reloadData: PropTypes.func.isRequired,\n};\n\nexport default NewTransactionForm;\n","import React from \"react\";\n\nimport {\n  Button,\n  Grid,\n  Typography,\n} from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport moment from \"moment\";\nimport PropTypes from \"prop-types\";\n\nimport Dialog from \"../../../../components/Dialog\";\n\nconst useStyles = makeStyles((theme) => ({\n  inputRow: {\n    margin: theme.spacing(3, 0),\n  },\n  formInput: {\n    marginBottom: theme.spacing(2),\n  },\n  customLabel: {\n    fontSize: 16,\n    color: \"#37474f\",\n  },\n}));\n\nconst ViewTransactionDetails = (props) => {\n  const classes = useStyles();\n  const { isOpen, onClose, data } = props;\n\n  return (\n    <Dialog\n      open={isOpen}\n      title={\" \"}\n      message={(\n        <>\n          <Grid container justify=\"space-between\">\n            <Typography variant=\"h3\" color=\"textSecondary\">\n              View Transaction\n            </Typography>\n            <Button\n              variant=\"outlined\"\n              onClick={() => onClose()}\n            >\n              Cancel\n            </Button>\n          </Grid>\n\n          <Grid className={classes.inputRow}>\n            <Grid\n              container\n              alignItems=\"center\"\n              className={classes.formInput}\n            >\n              <Grid item lg={2}>\n                <Typography color=\"textSecondary\">\n                  Date\n                </Typography>\n              </Grid>\n              <Grid item md={4}>\n                <Typography component=\"div\" variant=\"h5\">\n                  {moment(data.dt).format(\"MMM D YYYY\")}\n                </Typography>\n              </Grid>\n            </Grid>\n\n            <Grid\n              container\n              alignItems=\"center\"\n              className={classes.formInput}\n            >\n              <Grid item lg={2}>\n                <Typography color=\"textSecondary\">\n                  Type\n                </Typography>\n              </Grid>\n              <Grid item md={4}>\n                <Typography component=\"div\" variant=\"h5\">\n                  {data.tran_type}\n                </Typography>\n              </Grid>\n            </Grid>\n\n            <Grid\n              container\n              alignItems=\"center\"\n              className={classes.formInput}\n            >\n              <Grid item lg={2}>\n                <Typography color=\"textSecondary\">\n                  Amount\n                </Typography>\n              </Grid>\n              <Grid item md={4}>\n                <Typography component=\"div\" variant=\"h5\">\n                  $\n                  {data.amount}\n                </Typography>\n              </Grid>\n            </Grid>\n\n            <Grid\n              container\n              alignItems=\"center\"\n              className={classes.formInput}\n            >\n              <Grid item lg={2}>\n                <Typography color=\"textSecondary\">\n                  Payment Type\n                </Typography>\n              </Grid>\n              <Grid item md={4}>\n                <Typography component=\"div\" variant=\"h5\">\n                  {data.tran_type}\n                </Typography>\n              </Grid>\n            </Grid>\n\n            <Grid\n              container\n              alignItems=\"center\"\n              className={classes.formInput}\n            >\n              <Grid item lg={2}>\n                <Typography color=\"textSecondary\">\n                  Account Number\n                </Typography>\n              </Grid>\n              <Grid item md={4}>\n                <Typography component=\"div\" variant=\"h5\">\n                  {data.account_number || \"-\"}\n                </Typography>\n              </Grid>\n            </Grid>\n\n            <Grid\n              container\n              alignItems=\"center\"\n              className={classes.formInput}\n            >\n              <Grid item lg={2}>\n                <Typography color=\"textSecondary\">\n                  Created\n                </Typography>\n              </Grid>\n              <Grid item md={4}>\n                <Typography component=\"div\" variant=\"h5\">\n                  {moment(data.dt).format(\"MMM D YYYY\")}\n                </Typography>\n              </Grid>\n            </Grid>\n          </Grid>\n        </>\n      )}\n      cancelForm={() => onClose()}\n      hideActions\n      size=\"md\"\n    />\n  );\n};\n\nViewTransactionDetails.propTypes = {\n  isOpen: PropTypes.bool.isRequired,\n  onClose: PropTypes.func.isRequired,\n  data: PropTypes.objectOf(PropTypes.any).isRequired,\n};\n\nexport default ViewTransactionDetails;\n","import React, { useState, useEffect, useCallback } from \"react\";\n\nimport { makeStyles, withStyles } from \"@material-ui/core\";\nimport Button from \"@material-ui/core/Button\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Typography from \"@material-ui/core/Typography\";\nimport ViewIcon from \"@material-ui/icons/VisibilityOutlined\";\nimport clsx from \"clsx\";\nimport moment from \"moment\";\n\nimport useAuth from \"../../../hooks/useAuth\";\nimport PatientPortalService from \"../../../services/patient_portal/patient-portal.service\";\nimport { hasValue } from \"../../../utils/helpers\";\nimport NewTransactionForm from \"./components/NewTransactionForm\";\nimport ViewTransactionDetails from \"./components/ViewTransactionDetails\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n    padding: \"40px 0px\",\n  },\n  title: {\n    paddingBottom: theme.spacing(0.5),\n  },\n  subTitle: {\n    fontSize: \"14px\",\n  },\n  viewIcon: {\n    cursor: \"pointer\",\n    fontSize: \"1rem\",\n  },\n  centered: {\n    textAlign: \"center\",\n  },\n  borderTop: {\n    borderTop: \"1px solid\",\n  },\n  shiftContent: {\n    paddingTop: \"10px !important\",\n  },\n  textButton: {\n    cursor: \"pointer\",\n  },\n  makePaymentButton: {\n    marginLeft: theme.spacing(4),\n  },\n}));\n\nconst StyledTableCell = withStyles(() => ({\n  head: {\n    whiteSpace: \"nowrap\",\n    fontSize: \"12px\",\n    fontWeight: 700,\n    padding: \"6px 24px 6px 2px\",\n    borderBottom: \"unset\",\n  },\n  body: {\n    fontSize: 12,\n    borderBottom: \"unset\",\n  },\n}))(TableCell);\n\nconst StyledTableRow = withStyles(() => ({\n  root: {\n    fontSize: 14,\n    \"& th\": {\n      fontSize: 12,\n      whiteSpace: \"nowrap\",\n      padding: \"2px 16px 2px 2px\",\n      lineHeight: \"14px\",\n    },\n    \"& td\": {\n      fontSize: 12,\n      whiteSpace: \"nowrap\",\n      padding: \"2px 16px 2px 2px\",\n      lineHeight: \"14px\",\n    },\n  },\n}))(TableRow);\n\nconst Billing = () => {\n  const classes = useStyles();\n  const { lastVisitedPatient } = useAuth();\n  const [billings, setBillings] = useState([]);\n  const [newPaymentDialog, setNewPaymentDialog] = useState(false);\n  const [selectedPayment, setSelectedPayment] = useState(null);\n  const [balance, setBalance] = useState(null);\n\n  const fetchBillings = useCallback(() => {\n    PatientPortalService.getBillings(lastVisitedPatient).then((res) => {\n      setBillings(res.data);\n    });\n  }, [lastVisitedPatient]);\n\n  const fetchBalance = useCallback(() => {\n    PatientPortalService.getBalance(lastVisitedPatient).then((res) => {\n      setBalance(res.data && res.data.length ? res.data[0].amount : \"\");\n    });\n  }, [lastVisitedPatient]);\n\n  useEffect(() => {\n    fetchBillings();\n    fetchBalance();\n  }, [fetchBillings, fetchBalance]);\n\n  return (\n    <>\n      {!!newPaymentDialog && (\n        <NewTransactionForm\n          isOpen={newPaymentDialog}\n          onClose={() => setNewPaymentDialog(false)}\n          reloadData={fetchBillings}\n        />\n      )}\n      {!!selectedPayment && (\n        <ViewTransactionDetails\n          isOpen={Boolean(selectedPayment)}\n          onClose={() => setSelectedPayment(null)}\n          data={selectedPayment}\n        />\n      )}\n      <div className={classes.root}>\n        <Grid\n          item\n          sm={7}\n          xs={12}\n        >\n          <Grid\n            container\n            justify=\"flex-start\"\n          >\n            <Typography\n              component=\"h1\"\n              variant=\"h2\"\n              color=\"textPrimary\"\n              className={classes.title}\n            >\n              Provider Billing\n            </Typography>\n            <Button\n              variant=\"outlined\"\n              color=\"primary\"\n              onClick={() => setNewPaymentDialog(true)}\n              className={classes.makePaymentButton}\n            >\n              Make Payment\n            </Button>\n          </Grid>\n        </Grid>\n\n        <Typography\n          variant=\"h5\"\n          color=\"textPrimary\"\n          className={classes.subTitle}\n        >\n          This page is used to view billings.\n        </Typography>\n        <Grid item md={10} sm={12} xs={12}>\n          {Boolean(billings.length) && (\n            <TableContainer className={classes.tableContainer}>\n              <Table size=\"small\" className={classes.table}>\n                <TableHead>\n                  <TableRow>\n                    <StyledTableCell>Date</StyledTableCell>\n                    <StyledTableCell>Transaction Type</StyledTableCell>\n                    <StyledTableCell>Account Number</StyledTableCell>\n                    <StyledTableCell>Amount</StyledTableCell>\n                    <StyledTableCell align=\"center\">View</StyledTableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {billings.map((item) => (\n                    <StyledTableRow key={`${item.dt}_${item.amount}_${item.tran_type}`}>\n                      <StyledTableCell component=\"th\" scope=\"item\">\n                        {moment(item.dt).format(\"MMM D YYYY\")}\n                      </StyledTableCell>\n                      <StyledTableCell>{item.tran_type}</StyledTableCell>\n                      <StyledTableCell>{item.account_num || \"-\"}</StyledTableCell>\n                      <StyledTableCell>\n                        $\n                        {item?.amount?.toFixed(2)}\n                      </StyledTableCell>\n                      <StyledTableCell\n                        className={classes.centered}\n                      >\n                        <ViewIcon\n                          className={classes.viewIcon}\n                          onClick={() => setSelectedPayment(item)}\n                        />\n                      </StyledTableCell>\n                    </StyledTableRow>\n                  ))}\n                  {(hasValue(balance) && billings.length) ? (\n                    <StyledTableRow>\n                      <StyledTableCell colSpan={2} />\n                      <StyledTableCell\n                        align=\"right\"\n                        classes={{ body: classes.shiftContent }}\n                      >\n                        <Typography className={classes.resMessage}>\n                          Balance\n                        </Typography>\n                      </StyledTableCell>\n                      <StyledTableCell\n                        className={clsx(\n                          classes.borderTop,\n                          classes.shiftContent,\n                        )}\n                      >\n                        <Typography className={classes.resMessage}>\n                          $\n                          {balance?.toFixed(2)}\n                        </Typography>\n                      </StyledTableCell>\n                    </StyledTableRow>\n                  ) : null}\n                </TableBody>\n              </Table>\n            </TableContainer>\n          )}\n        </Grid>\n      </div>\n    </>\n  );\n};\n\nexport default Billing;\n","import React from \"react\";\n\nimport { IconButton, Button, Typography } from \"@material-ui/core\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport { createStyles, makeStyles } from \"@material-ui/core/styles\";\nimport CloseIcon from \"@material-ui/icons/CloseOutlined\";\nimport clsx from \"clsx\";\nimport PropTypes from \"prop-types\";\n\nconst useStyles = makeStyles((theme) => createStyles({\n  titleContainer: {\n    textAlign: \"center\",\n    borderBottom: \"1px solid #ddd\",\n    minHeight: 53,\n  },\n  content: {\n    padding: \"1rem 2rem\",\n    maxHeight: \"86vh\",\n  },\n  fullScreenContent: {\n    maxHeight: \"unset\",\n  },\n  fullHeight: {\n    minHeight: \"86vh\",\n  },\n  buttonClose: {\n    position: \"absolute\",\n    right: theme.spacing(1),\n    top: theme.spacing(1),\n    padding: theme.spacing(1),\n  },\n  save: {\n    background: theme.palette.success,\n    minWidth: 100,\n  },\n  cancel: {\n    background: theme.palette.error,\n    minWidth: 100,\n  },\n}));\n\nconst DialogForm = ({\n  title,\n  open,\n  message,\n  applyForm,\n  cancelForm,\n  hideActions,\n  applyButtonText,\n  cancelButtonText,\n  size,\n  fullScreen,\n  fullHeight,\n  transitionComponent,\n}) => {\n  const classes = useStyles();\n  return (\n    <div>\n      <Dialog\n        fullScreen={Boolean(fullScreen)}\n        open={open}\n        onClose={cancelForm}\n        fullWidth\n        maxWidth={size}\n        TransitionComponent={transitionComponent}\n      // disableBackdropClick //enable esc button close and backdrop click\n      >\n        {cancelForm && (\n          <IconButton\n            className={classes.buttonClose}\n            onClick={cancelForm}\n            aria-label=\"close\"\n          >\n            <CloseIcon fontSize=\"small\" />\n          </IconButton>\n        )}\n        <DialogTitle disableTypography className={classes.titleContainer} id=\"form-dialog-title\">\n          <Typography variant=\"h5\">{title}</Typography>\n        </DialogTitle>\n        <DialogContent\n          className={clsx({\n            [classes.content]: true, // always apply\n            [classes.fullHeight]: fullHeight, // only when fullHeight === true\n            [classes.fullScreenContent]: fullScreen, // only when fullScreen === true\n          })}\n        >\n          {message}\n        </DialogContent>\n        {hideActions ? null : (\n          <>\n            <DialogActions align=\"center\">\n              {applyForm && (\n                <Button\n                  className={classes.save}\n                  onClick={applyForm}\n                  color=\"primary\"\n                  type=\"submit\"\n                  variant=\"contained\"\n                >\n                  {applyButtonText}\n                </Button>\n              )}\n              {cancelForm && (\n                <Button\n                  className={classes.cancel}\n                  onClick={cancelForm}\n                  color=\"secondary\"\n                  type=\"submit\"\n                  variant=\"contained\"\n                >\n                  {cancelButtonText}\n                </Button>\n              )}\n            </DialogActions>\n          </>\n        )}\n      </Dialog>\n    </div>\n  );\n};\n\nDialogForm.defaultProps = {\n  title: \"\",\n  message: null,\n  applyForm: () => { },\n  cancelForm: () => { },\n  hideActions: true,\n  applyButtonText: \"Continue\",\n  cancelButtonText: \"Cancel\",\n  size: \"lg\",\n  fullScreen: false,\n  fullHeight: false,\n  transitionComponent: undefined,\n};\n\nDialogForm.propTypes = {\n  title: PropTypes.string,\n  open: PropTypes.bool.isRequired,\n  message: PropTypes.node,\n  applyForm: PropTypes.func,\n  cancelForm: PropTypes.func,\n  hideActions: PropTypes.bool,\n  applyButtonText: PropTypes.string,\n  cancelButtonText: PropTypes.string,\n  size: PropTypes.string,\n  fullScreen: PropTypes.bool,\n  fullHeight: PropTypes.bool,\n  transitionComponent: PropTypes.node,\n};\n\nexport default DialogForm;\n","import axios from \"axios\";\n\nimport { API_BASE } from \"../../utils/API_BASE\";\nimport authHeader from \"../auth-header\";\n\nclass PatientPortalService {\n  // patient profile\n  getProfile() {\n    return axios.get(`${API_BASE}/client-portal/patient`, { headers: authHeader() }).then((res) => res.data);\n  }\n\n  updateProfile(payload, patientId) {\n    return axios.put(`${API_BASE}/client-portal/patient/${patientId}`, payload, {\n      headers: authHeader(),\n    });\n  }\n\n  // appointments\n  getPractitioners(patient) {\n    let url = `${API_BASE}/client-portal/practitioners`;\n    if (patient) {\n      // eslint-disable-next-line max-len\n      url = `${API_BASE}/client-portal/practitioners/?patient_id=${patient.id}&client_id=${patient.client_id}`;\n    }\n    return axios\n      .get(url, {\n        headers: authHeader(),\n      })\n      .then((res) => res.data);\n  }\n\n  getPractitionerDates(patient) {\n    let url = `${API_BASE}/client-portal/practitioner-dates`;\n    if (patient) {\n      // eslint-disable-next-line max-len\n      url = `${API_BASE}/client-portal/practitioner-dates/?patient_id=${patient.id}&client_id=${patient.client_id}`;\n    }\n    return axios\n      .get(url, {\n        headers: authHeader(),\n      })\n      .then((res) => res.data);\n  }\n\n  getBookedAppointments(patient, params) {\n    let url = `${API_BASE}/client-portal/booked-appointments`;\n    if (patient) {\n      // eslint-disable-next-line max-len\n      url = `${API_BASE}/client-portal/booked-appointments?patient_id=${patient.id}&client_id=${patient.client_id}`;\n    }\n    return axios\n      .get(url, {\n        headers: authHeader(),\n        params,\n      })\n      .then((res) => res.data);\n  }\n\n  getAppointmentTypesByPractitionerId(data) {\n    return axios\n      .post(`${API_BASE}/client-portal/appointment-types`, data, {\n        headers: authHeader(),\n      })\n      .then((res) => res.data);\n  }\n\n  bookAppointment(data) {\n    return axios\n      .post(`${API_BASE}/client-portal/appointment`, data, {\n        headers: authHeader(),\n      })\n      .then((res) => res.data);\n  }\n\n  updateAppointment(payload, appointmentId) {\n    return axios\n      .put(`${API_BASE}/client-portal/appointment/${appointmentId}`, payload, {\n        headers: authHeader(),\n      })\n      .then((res) => res.data);\n  }\n\n  // encounters\n  getEncounters(patient) {\n    let url = `${API_BASE}/client-portal/encounters`;\n    if (patient) {\n      // eslint-disable-next-line max-len\n      url = `${API_BASE}/client-portal/encounters/?patient_id=${patient.id}&client_id=${patient.client_id}`;\n    }\n    return axios\n      .get(url, {\n        headers: authHeader(),\n      })\n      .then((res) => res.data);\n  }\n\n  // lab/documents\n  getLabDocuments(patient) {\n    let url = `${API_BASE}/client-portal/labs`;\n    if (patient) {\n      // eslint-disable-next-line max-len\n      url = `${API_BASE}/client-portal/labs/?patient_id=${patient.id}&client_id=${patient.client_id}`;\n    }\n    return axios\n      .get(url, {\n        headers: authHeader(),\n      })\n      .then((res) => res.data);\n  }\n\n  createLabDocuments(patient, reqBody) {\n    let url = `${API_BASE}/client-portal/labs`;\n    if (patient) {\n      // eslint-disable-next-line max-len\n      url = `${API_BASE}/client-portal/labs/?patient_id=${patient.id}&client_id=${patient.client_id}`;\n    }\n    return axios\n      .post(url, reqBody, {\n        headers: authHeader(),\n      })\n      .then((res) => res.data);\n  }\n\n  // Billings\n  getBillings(patient) {\n    let url = `${API_BASE}/client-portal/billings`;\n    if (patient) {\n      // eslint-disable-next-line max-len\n      url = `${API_BASE}/client-portal/billings/?patient_id=${patient.id}&client_id=${patient.client_id}`;\n    }\n\n    return axios\n      .get(url, {\n        headers: authHeader(),\n      })\n      .then((res) => res.data);\n  }\n\n  createBilling(data) {\n    return axios\n      .post(`${API_BASE}/client-portal/billings`, data, {\n        headers: authHeader(),\n      })\n      .then((res) => res.data);\n  }\n\n  getBalance(patient) {\n    let url = `${API_BASE}/client-portal/balance`;\n    if (patient) {\n      // eslint-disable-next-line max-len\n      url = `${API_BASE}/client-portal/balance/?patient_id=${patient.id}&client_id=${patient.client_id}`;\n    }\n    return axios\n      .get(url, {\n        headers: authHeader(),\n      })\n      .then((res) => res.data);\n  }\n\n  // Payment Methods\n  getPaymentMethods(patient) {\n    let url = `${API_BASE}/patient-portal/payment-methods`;\n    if (patient) {\n      // eslint-disable-next-line max-len\n      url = `${API_BASE}/patient-portal/payment-methods/?patient_id=${patient.id}&client_id=${patient.client_id}`;\n    }\n    return axios\n      .get(url, {\n        headers: authHeader(),\n      })\n      .then((res) => res.data);\n  }\n\n  // Pharmacies\n  getPharmacies() {\n    return axios\n      .get(`${API_BASE}/client-portal/pharmacy`, {\n        headers: authHeader(),\n      })\n      .then((res) => res.data);\n  }\n\n  searchPharmacies(data) {\n    return axios\n      .post(`${API_BASE}/client-portal/pharmacy/search`, data, {\n        headers: authHeader(),\n      })\n      .then((res) => res.data);\n  }\n\n  updatePharmacy(pharmacyId, payload) {\n    return axios.put(`${API_BASE}/client-portal/pharmacy/${pharmacyId}`, payload, {\n      headers: authHeader(),\n    })\n      .then((res) => res.data);\n  }\n\n  // Requisitions\n  getRequisitions(patient) {\n    let url = `${API_BASE}/client-portal/lab_requisitions`;\n    if (patient) {\n      // eslint-disable-next-line max-len\n      url = `${API_BASE}/client-portal/lab_requisitions/?patient_id=${patient.id}&client_id=${patient.client_id}`;\n    }\n    return axios\n      .get(url, {\n        headers: authHeader(),\n      })\n      .then((res) => res.data);\n  }\n\n  // Lab billing\n  getLabBilling(patient) {\n    let url = `${API_BASE}/client-portal/lab_billing`;\n    if (patient) {\n        // eslint-disable-next-line max-len\n      url = `${API_BASE}/client-portal/lab_billing/?patient_id=${patient.id}&client_id=${patient.client_id}`;\n    }\n    return axios\n      .get(url, {\n        headers: authHeader(),\n      })\n      .then((res) => res.data);\n  }\n\n\n  // test list\n  getTestList(patient) {\n    let url = `${API_BASE}/client-portal/lab_requisitions/test-list`;\n    if (patient) {\n      // eslint-disable-next-line max-len\n      url = `${API_BASE}/client-portal/lab_requisitions/?patient_id=${patient.id}&client_id=${patient.client_id}`;\n    }\n    return axios\n      .get(url, {\n        headers: authHeader(),\n      })\n      .then((res) => res.data);\n  }\n\n  async getTestProfileInfo(testId) {\n    const url = `${API_BASE}/client-portal/lab_requisitions/test-profile-info?testId=${testId}`;\n\n    const res = await axios.get(url, {\n      headers: authHeader(),\n    });\n    return res.data;\n  }\n\n  async getProfileTests(testId) {\n    const url = `${API_BASE}/client-portal/lab_requisitions/profile-tests?testId=${testId}`;\n\n    const res = await axios.get(url, {\n      headers: authHeader(),\n    });\n\n    return res.data;\n  }\n\n  // Handouts\n  getHandouts() {\n    return axios\n      .get(`${API_BASE}/client-portal/handouts`, {\n        headers: authHeader(),\n      })\n      .then((res) => res.data);\n  }\n\n  createHandouts() {\n    return axios\n      .post(`${API_BASE}/client-portal/handouts`, {\n        headers: authHeader(),\n      })\n      .then((res) => res.data);\n  }\n\n  deleteHandout(id) {\n    return axios\n      .delete(`${API_BASE}/client-portal/handouts/${id}`, {\n        headers: authHeader(),\n      })\n      .then((res) => res.data);\n  }\n\n  // Prescriptions\n  getPrescriptions() {\n    return axios\n      .get(`${API_BASE}/client-portal/prescription`, {\n        headers: authHeader(),\n      })\n      .then((res) => res.data);\n  }\n}\n\nexport default new PatientPortalService();\n","export const TransactionFormFields = [\n  {\n    name: \"type\",\n    id: \"transactionTypes\",\n    label: \"Transaction Type\",\n    baseType: \"select\",\n    type: null,\n    options: [],\n  },\n  {\n    name: \"amount\",\n    id: \"amount\",\n    label: \"Amount\",\n    baseType: \"input\",\n    type: \"number\",\n    options: [],\n  },\n  // {\n  //   name: \"paymentType\",\n  //   id: \"paymentType\",\n  //   label: \"Payment Type\",\n  //   baseType: \"select\",\n  //   type: null,\n  //   options: [\n  //     {\n  //       label: \"\",\n  //       value: \"\",\n  //     },\n  //     {\n  //       label: \"Card\",\n  //       value: \"C\",\n  //     },\n  //     {\n  //       label: \"ACH\",\n  //       value: \"A\",\n  //     },\n  //     {\n  //       label: \"Cheque\",\n  //       value: \"CH\",\n  //     },\n  //     {\n  //       label: \"Other\",\n  //       value: \"O\",\n  //     },\n  //   ],\n  // },\n  {\n    name: \"accountNum\",\n    id: \"paymentOptions\",\n    label: \"Payment Method\",\n    baseType: \"select\",\n    type: \"number\",\n    options: [],\n  },\n];\n"],"sourceRoot":""}