{"version":3,"sources":["services/patient_portal/messages.service.js","screens/patient-portal/Messages/components/MessageModal.js","screens/patient-portal/Messages/Messages.js"],"names":["getMessages","axios","get","API_BASE","headers","authHeader","getMessageUsers","createMessage","data","post","updateMessage","put","id","deleteMessage","delete","useStyles","makeStyles","theme","modalTitle","backgroundColor","palette","primary","light","color","fontSize","modalContent","paddingLeft","spacing","paddingTop","paddingRight","paddingBottom","modalAction","borderTop","background","default","display","justifyContent","gutterBottom","marginBottom","w100","minWidth","MessageModal","props","isOpen","onClose","selectedMessage","title","reloadData","classes","enqueueSnackbar","useSnackbar","useState","users","setUsers","selectedUser","setSelectedUser","message","setMessage","subject","setSubject","useEffect","MessagesService","then","res","user_id_to","handleClose","Dialog","maxWidth","open","DialogTitle","className","DialogContent","style","flexDirection","FormControl","variant","customSelect","size","InputLabel","htmlFor","Select","native","value","onChange","event","target","inputProps","name","label","aria-label","map","user","firstname","lastname","TextField","type","required","fullWidth","multiline","rows","DialogActions","Button","onClick","formData","response","handleMessageUpdate","handleMessageSubmission","defaultProps","root","flexGrow","padding","titleSection","alignItems","newMessage","marginLeft","content","marginTop","divider","margin","labelBold","fontWeight","mr1","marginRight","Messages","useAuth","messages","setMessages","setSelectedMessage","setOpen","modalView","setModalView","fetchMessages","a","msg","getTitle","useCallback","userName","Typography","component","Grid","container","item","xs","moment","created","format","user_to_from","patient_to_from","user_to_name","user_id_from","onHandleReplyClick","createdTime","subtract","handleMessageEdit","handleMessageDelete","Divider"],"mappings":"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","file":"static/js/112.9792bbf9.chunk.js","sourcesContent":["import axios from \"axios\";\n\nimport { API_BASE } from \"../../utils/API_BASE\";\nimport authHeader from \"../auth-header\";\n\nclass MessagesService {\n  getMessages = () => axios.get(`${API_BASE}/client-portal/messages`, {\n    headers: authHeader(),\n  });\n\n  getMessageUsers = () => axios.get(`${API_BASE}/client-portal/messages/users`, {\n    headers: authHeader(),\n  });\n\n  createMessage = (data) => axios.post(`${API_BASE}/client-portal/messages`, data, {\n    headers: authHeader(),\n  });\n\n  updateMessage = (data) => axios.put(`${API_BASE}/client-portal/messages/${data.data.id}`, data, {\n    headers: authHeader(),\n  });\n\n  deleteMessage = (id) => axios.delete(`${API_BASE}/client-portal/messages/${id}`, {\n    headers: authHeader(),\n  });\n}\n\nexport default new MessagesService();\n","import React, { useEffect, useState } from \"react\";\n\nimport {\n  Button, makeStyles, TextField,\n} from \"@material-ui/core\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport Select from \"@material-ui/core/Select\";\nimport { useSnackbar } from \"notistack\";\nimport PropTypes from \"prop-types\";\n\nimport MessagesService from \"../../../../services/patient_portal/messages.service\";\n\nconst useStyles = makeStyles((theme) => ({\n  modalTitle: {\n    backgroundColor: theme.palette.primary.light,\n    \"& h2\": {\n      color: \"#fff\",\n      fontSize: \"16px\",\n    },\n  },\n  modalContent: {\n    paddingLeft: theme.spacing(3),\n    paddingTop: theme.spacing(3),\n    paddingRight: theme.spacing(3),\n    paddingBottom: theme.spacing(6),\n    fontSize: \"18px\",\n    \"& p\": {\n      fontSize: \"16px\",\n    },\n  },\n  modalAction: {\n    borderTop: `1px solid ${theme.palette.background.default}`,\n    display: \"flex\",\n    justifyContent: \"space-between\",\n    paddingTop: theme.spacing(2),\n    paddingBottom: theme.spacing(2),\n    paddingLeft: theme.spacing(3),\n    paddingRight: theme.spacing(3),\n  },\n  gutterBottom: {\n    marginBottom: theme.spacing(2),\n  },\n  w100: {\n    minWidth: 100,\n  },\n}));\n\nconst MessageModal = (props) => {\n  const {\n    isOpen, onClose, selectedMessage, title, reloadData,\n  } = props;\n  const classes = useStyles();\n  const { enqueueSnackbar } = useSnackbar();\n  const [users, setUsers] = useState([]);\n  const [selectedUser, setSelectedUser] = useState(\"\");\n  const [message, setMessage] = useState(\"\");\n  const [subject, setSubject] = useState(\"\");\n\n  const fetchUsers = () => {\n    MessagesService.getMessageUsers().then((res) => {\n      setUsers(res.data.data);\n    });\n  };\n\n  useEffect(() => {\n    fetchUsers();\n    if (selectedMessage) {\n      setSubject(selectedMessage.subject);\n      setMessage(selectedMessage.message);\n      setSelectedUser(selectedMessage.user_id_to);\n    }\n  }, [selectedMessage]);\n\n  const handleClose = () => {\n    onClose();\n  };\n\n  const handleMessageSubmission = () => {\n    const formData = {\n      data: {\n        user_id_to: selectedUser,\n        subject,\n        message,\n      },\n    };\n    MessagesService.createMessage(formData).then((response) => {\n      enqueueSnackbar(`${response.data.message}`, {\n        variant: \"success\",\n      });\n      reloadData();\n      handleClose();\n    });\n  };\n\n  const handleMessageUpdate = () => {\n    const formData = {\n      data: {\n        id: selectedMessage.id,\n        user_id_to: selectedUser,\n        subject,\n        message,\n      },\n    };\n    MessagesService.updateMessage(formData).then((response) => {\n      enqueueSnackbar(`${response.data.message}`, {\n        variant: \"success\",\n      });\n      reloadData();\n      handleClose();\n    });\n  };\n\n  return (\n    <Dialog\n      maxWidth=\"sm\"\n      open={isOpen}\n      onClose={handleClose}\n    >\n      <DialogTitle className={classes.modalTitle}>\n        {title}\n      </DialogTitle>\n      <DialogContent className={classes.modalContent} style={{ minWidth: \"600px\" }}>\n        <div style={{ display: \"flex\", flexDirection: \"column\" }}>\n          <FormControl\n            variant=\"outlined\"\n            className={classes.customSelect}\n            size=\"small\"\n          >\n            <InputLabel htmlFor=\"age-native-simple\">To</InputLabel>\n            <Select\n              native\n              value={selectedUser}\n              onChange={(event) => setSelectedUser(event.target.value)}\n              inputProps={{\n                name: \"type\",\n                id: \"age-native-simple\",\n              }}\n              label=\"To\"\n              className={classes.gutterBottom}\n            >\n              <option aria-label=\"None\" value=\"\" />\n              {users.map((user) => (\n                <option key={user.id} value={user.id}>\n                  {`${user.firstname} ${user.lastname}`}\n                </option>\n              ))}\n            </Select>\n          </FormControl>\n          {/* Commented out as per CLIN-114 */}\n          {/* <TextField\n            fullWidth\n            margin=\"normal\"\n            variant=\"outlined\"\n            label=\"Subject\"\n            size=\"small\"\n            value={subject}\n            onChange={(event) => setSubject(event.target.value)}\n            className={classes.gutterBottom}\n          /> */}\n          <TextField\n            variant=\"outlined\"\n            name=\"notes\"\n            id=\"notes\"\n            type=\"text\"\n            label=\"Message\"\n            required\n            fullWidth\n            value={message}\n            onChange={(event) => setMessage(event.target.value)}\n            multiline\n            rows={5}\n          />\n        </div>\n      </DialogContent>\n      <DialogActions className={classes.modalAction}>\n        <Button\n          variant=\"outlined\"\n          className={classes.w100}\n          onClick={handleClose}\n        >\n          Cancel\n        </Button>\n        {\n          selectedMessage\n            ? (\n              <Button\n                variant=\"outlined\"\n                color=\"primary\"\n                className={classes.w100}\n                onClick={() => handleMessageUpdate()}\n              >\n                Update\n              </Button>\n            )\n            : (\n              <Button\n                variant=\"outlined\"\n                color=\"primary\"\n                className={classes.w100}\n                onClick={() => handleMessageSubmission()}\n              >\n                Send\n              </Button>\n            )\n        }\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nMessageModal.defaultProps = {\n  selectedMessage: null,\n};\n\nMessageModal.propTypes = {\n  isOpen: PropTypes.bool.isRequired,\n  onClose: PropTypes.func.isRequired,\n  reloadData: PropTypes.func.isRequired,\n  title: PropTypes.string.isRequired,\n  selectedMessage: PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    user_id_to: PropTypes.number.isRequired,\n    subject: PropTypes.string.isRequired,\n    message: PropTypes.string.isRequired,\n  }),\n};\n\nexport default MessageModal;\n","import React, { useCallback, useEffect, useState } from \"react\";\n\nimport {\n  Button, Divider, Grid, makeStyles,\n} from \"@material-ui/core\";\nimport Typography from \"@material-ui/core/Typography\";\nimport moment from \"moment\";\nimport { useSnackbar } from \"notistack\";\n\nimport useAuth from \"../../../hooks/useAuth\";\nimport MessagesService from \"../../../services/patient_portal/messages.service\";\nimport MessageModal from \"./components/MessageModal\";\n\nconst isLessThan60Minutes = (createdTime) => (moment()\n  .subtract(60, \"minutes\")\n  .format()\n  < moment(createdTime)\n    .format()\n);\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n    padding: \"40px 0px\",\n  },\n  title: {\n    paddingBottom: theme.spacing(1),\n  },\n  titleSection: {\n    display: \"flex\",\n    alignItems: \"center\",\n  },\n  newMessage: {\n    fontSize: \"14px\",\n    marginLeft: theme.spacing(4),\n  },\n  content: {\n    marginTop: \"30px\",\n  },\n  divider: {\n    margin: \"10px 0 16px 0\",\n  },\n  labelBold: {\n    fontWeight: \"bold\",\n  },\n  mr1: {\n    marginRight: theme.spacing(1),\n  },\n}));\n\nexport default function Messages() {\n  const classes = useStyles();\n  const { user } = useAuth();\n  const { enqueueSnackbar } = useSnackbar();\n  const [messages, setMessages] = useState([]);\n  const [selectedMessage, setSelectedMessage] = useState(null);\n  const [open, setOpen] = useState(false);\n\n  const [modalView, setModalView] = useState(\"new\");\n\n  const fetchMessages = async () => {\n    const msg = await MessagesService.getMessages();\n    setMessages(msg.data.data);\n  };\n\n  useEffect(() => {\n    fetchMessages();\n  }, []);\n\n  const handleClose = () => {\n    setOpen(false);\n    if (selectedMessage) {\n      setSelectedMessage(null);\n    }\n  };\n\n  const onNewMessageButton = () => {\n    setModalView(\"new\");\n    setOpen(true);\n  };\n\n  const onHandleReplyClick = (msg) => {\n    setModalView(\"reply\");\n    setSelectedMessage(msg);\n    setOpen(true);\n  };\n\n  const handleMessageEdit = (msg) => {\n    setModalView(\"edit\");\n    setSelectedMessage(msg);\n    setOpen(true);\n  };\n\n  const handleMessageDelete = (msg) => {\n    MessagesService.deleteMessage(msg.id).then((response) => {\n      enqueueSnackbar(`${response.data.message}`, {\n        variant: \"success\",\n      });\n      fetchMessages();\n    });\n  };\n\n  const getTitle = useCallback((msg) => {\n    let title = \"\";\n    const subject = msg?.subject;\n    if (modalView === \"new\") {\n      title = \"Send A Secure Message\";\n    } else if (modalView === \"edit\") {\n      title = `Edit Message || ${subject}`;\n    } else if (modalView === \"reply\") {\n      title = `Reply Message || ${subject}`;\n    }\n    return title;\n  }, [modalView]);\n\n  const userName = `${user.firstname} ${user.lastname}`;\n\n  return (\n    <>\n      {open && (\n        <MessageModal\n          isOpen={open}\n          onClose={handleClose}\n          title={getTitle(selectedMessage)}\n          reloadData={fetchMessages}\n          selectedMessage={selectedMessage}\n        />\n      )}\n      <div className={classes.root}>\n        <div className={classes.titleSection}>\n          <Typography component=\"h1\" variant=\"h2\" color=\"textPrimary\" className={classes.title}>\n            Messages\n          </Typography>\n          <Button\n            className={classes.newMessage}\n            onClick={() => onNewMessageButton()}\n            variant=\"outlined\"\n            color=\"primary\"\n          >\n            New Message\n          </Button>\n        </div>\n        <Typography component=\"p\" variant=\"body2\" color=\"textPrimary\">\n          This page is used to send administrative messages to your practitioner. To send a new message click\n          New Message.\n        </Typography>\n\n        <div className={classes.content}>\n          {messages.map((msg) => (\n            <div key={msg.id}>\n              <Grid container spacing={4} alignItems=\"flex-start\">\n                <Grid item xs={6}>\n                  <Typography component=\"p\" variant=\"body2\" color=\"textPrimary\">\n                    <span className={classes.labelBold}>Time: </span>\n                    <span className={classes.mr1}>\n                      {moment(msg.created).format(\"ll, h:mmA\")}\n                    </span>\n                    <span className={classes.labelBold}>From: </span>\n                    <span className={classes.mr1}>\n                      {msg.user_to_from || msg.patient_to_from}\n                    </span>\n                    <span className={classes.labelBold}>To: </span>\n                    <span className={classes.mr1}>\n                      {msg.user_to_name ? msg.user_to_name : userName}\n                    </span>\n                    <br />\n                    {msg.message}\n                  </Typography>\n                </Grid>\n                <Grid item xs={6}>\n                  <Grid container spacing={2}>\n                    <Grid item>\n                      {msg.user_id_from\n                        && (\n                          <Button size=\"small\" variant=\"outlined\" onClick={() => onHandleReplyClick(msg)}>\n                            Reply\n                          </Button>\n                        )}\n                    </Grid>\n                    {\n                      isLessThan60Minutes(msg.created) && (\n                        <>\n                          <Grid item>\n                            <Button size=\"small\" variant=\"outlined\" onClick={() => handleMessageEdit(msg)}>\n                              Edit\n                            </Button>\n                          </Grid>\n                          <Grid item>\n                            <Button size=\"small\" variant=\"outlined\" onClick={() => handleMessageDelete(msg)}>\n                              Delete\n                            </Button>\n                          </Grid>\n                        </>\n                      )\n                    }\n                  </Grid>\n                </Grid>\n              </Grid>\n              <Divider className={classes.divider} />\n            </div>\n          ))}\n          {/* {messages.length === 0 && <p>No records found!</p>} */}\n        </div>\n      </div>\n    </>\n  );\n}\n"],"sourceRoot":""}