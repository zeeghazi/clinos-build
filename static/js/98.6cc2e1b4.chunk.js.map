{"version":3,"sources":["services/manage/emailPatient.service.js","screens/Client/Manage/EmailPatients/Dialog/ConfirmEmail.js","screens/Client/Manage/EmailPatients/Dialog/EditEmail.js","screens/Client/Manage/EmailPatients/EmailPatients.js"],"names":["axios","get","API_BASE","headers","authHeader","payload","put","post","date","delete","useStyles","makeStyles","theme","title","backgroundColor","palette","primary","light","color","fontSize","content","paddingLeft","spacing","paddingTop","paddingRight","paddingBottom","emailDataWrap","record","display","marginBottom","lineHeight","fontWeight","minWidth","marginRight","modalAction","borderTop","background","default","justifyContent","ConfirmEmail","isOpen","onClose","onSave","props","classes","useState","emailData","setEmailData","useEffect","Dialog","fullWidth","maxWidth","open","aria-labelledby","aria-describedby","DialogTitle","id","className","DialogContent","DialogContentText","emailStatus","subject","message","DialogActions","Button","size","variant","onClick","style","borderColor","colors","orange","data","statusWrapper","status","formControl","flexDirection","alignItems","text","secondary","formLabel","width","formHelperText","formField","flex","formFieldLarge","formFieldSmall","textArea","marginTop","EditEmail","onUpdate","enqueueSnackbar","useSnackbar","selectedEmail","handleOnChange","event","target","name","value","root","FormControl","component","TextField","autoFocus","label","margin","autoComplete","onChange","Typography","RadioGroup","aria-label","FormControlLabel","control","Radio","multiline","InputProps","normalOutline","inputComponent","TextareaAutosize","rows","EmailPatient","updateEmailHistory","then","response","flexGrow","padding","fields","texArea","next","historyTop","tableContainer","borderRadius","border","height","noRecords","marginLeft","LightTooltip","withStyles","tooltip","common","white","boxShadow","shadows","Tooltip","StyledTableCell","head","grey","body","TableCell","StyledTableRow","action","hover","TableRow","EmailPatients","setMessage","emailHistory","setEmailHistory","setEmailStatus","isModalOpen","setIsModalOpen","isEditModalOpen","setIsEditModalOpen","setSelectedEmail","fetchEmailHistory","useCallback","getEmailHistory","e","disabled","TableContainer","Paper","Table","table","TableHead","TableBody","length","map","history","whiteSpace","scope","moment","created","format","overFlowControl","substring","created_user","actions","createdTime","subtract","IconButton","createdDate","deleteEmailHistory","colSpan","align","createEmailHistory","handleSave"],"mappings":"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","file":"static/js/98.6cc2e1b4.chunk.js","sourcesContent":["import axios from \"axios\";\n\nimport { API_BASE } from \"../../utils/API_BASE\";\nimport authHeader from \"../auth-header\";\n\nclass EmailPatient {\n  getEmailHistory() {\n    return axios.get(`${API_BASE}/email/history`, {\n      headers: authHeader(),\n    });\n  }\n\n  updateEmailHistory(payload) {\n    return axios.put(\n      `${API_BASE}/email/history`,\n      payload,\n      {\n        headers: authHeader(),\n      },\n    );\n  }\n\n  createEmailHistory(payload) {\n    return axios.post(`${API_BASE}/email/history`, payload, {\n      headers: authHeader(),\n    });\n  }\n\n  deleteEmailHistory(date) {\n    return axios.delete(\n      `${API_BASE}/email/history/${date}`,\n      {\n        headers: authHeader(),\n      },\n    );\n  }\n}\n\nexport default new EmailPatient();\n","import React, { useEffect, useState } from \"react\";\n\nimport { colors } from \"@material-ui/core\";\nimport Button from \"@material-ui/core/Button\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport PropTypes from \"prop-types\";\n\nconst useStyles = makeStyles((theme) => ({\n  title: {\n    backgroundColor: theme.palette.primary.light,\n    \"& h2\": {\n      color: \"#fff\",\n      fontSize: \"16px\",\n    },\n  },\n  content: {\n    paddingLeft: theme.spacing(3),\n    paddingTop: theme.spacing(3),\n    paddingRight: theme.spacing(3),\n    paddingBottom: theme.spacing(6),\n    fontSize: \"18px\",\n    \"& p\": {\n      fontSize: \"16px\",\n    },\n  },\n  emailDataWrap: {\n    paddingTop: theme.spacing(2),\n  },\n  record: {\n    display: \"flex\",\n    marginBottom: theme.spacing(1),\n    fontSize: \"16px\",\n    lineHeight: \"24px\",\n    \"& p:first-child\": {\n      fontWeight: \"600\",\n      fontSize: \"18px\",\n      minWidth: \"87px\",\n      marginRight: theme.spacing(1),\n    },\n  },\n  modalAction: {\n    borderTop: `1px solid ${theme.palette.background.default}`,\n    display: \"flex\",\n    justifyContent: \"space-between\",\n    paddingTop: theme.spacing(2),\n    paddingBottom: theme.spacing(2),\n    paddingLeft: theme.spacing(3),\n    paddingRight: theme.spacing(3),\n  },\n}));\n\nconst ConfirmEmail = ({\n  isOpen,\n  onClose,\n  onSave,\n  ...props\n}) => {\n  const classes = useStyles();\n  const [emailData, setEmailData] = useState([]);\n  useEffect(() => {\n    setEmailData(props.emailData);\n    // eslint-disable-next-line react/destructuring-assignment\n  }, [props.emailData]);\n\n  const handleFormSubmission = () => {\n    onSave({ data: emailData });\n  };\n\n  return (\n    <div>\n      <Dialog\n        fullWidth\n        maxWidth=\"sm\"\n        open={isOpen}\n        onClose={onClose}\n        aria-labelledby=\"alert-dialog-title\"\n        aria-describedby=\"alert-dialog-description\"\n      >\n        <DialogTitle id=\"alert-dialog-title\" className={classes.title}>\n          Email Confirmation\n        </DialogTitle>\n        <DialogContent className={classes.content}>\n          <DialogContentText id=\"alert-dialog-description\">\n            It will send email to all patient.\n          </DialogContentText>\n          <div className={classes.emailDataWrap}>\n            {\n              emailData && (\n                <>\n                  <div className={classes.record}>\n                    <p>Status:</p>\n                    <p>{emailData.emailStatus === \"U\" ? \"Active\" : \"InActive\"}</p>\n                  </div>\n                  <div className={classes.record}>\n                    <p>Subject:</p>\n                    <p>{emailData?.subject}</p>\n                  </div>\n                  <div className={classes.record}>\n                    <p>message:</p>\n                    <p>{emailData.message}</p>\n                  </div>\n                </>\n              )\n            }\n\n          </div>\n        </DialogContent>\n        <DialogActions className={classes.modalAction}>\n          <Button\n            size=\"small\"\n            variant=\"outlined\"\n            onClick={() => onClose()}\n            style={{\n              borderColor: colors.orange[600],\n              color: colors.orange[600],\n            }}\n          >\n            Cancel\n          </Button>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            size=\"small\"\n            onClick={() => handleFormSubmission()}\n          >\n            Send\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n};\n\nConfirmEmail.propTypes = {\n  isOpen: PropTypes.bool.isRequired,\n  onClose: PropTypes.func.isRequired,\n  onSave: PropTypes.func.isRequired,\n  emailData: PropTypes.shape({\n    emailStatus: PropTypes.string,\n    // subject: PropTypes.string,\n    message: PropTypes.string,\n  }).isRequired,\n};\n\nexport default ConfirmEmail;\n","import React, { useEffect, useState } from \"react\";\n\nimport { colors } from \"@material-ui/core\";\nimport Button from \"@material-ui/core/Button\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Radio from \"@material-ui/core/Radio\";\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport TextareaAutosize from \"@material-ui/core/TextareaAutosize\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { useSnackbar } from \"notistack\";\nimport PropTypes from \"prop-types\";\n\nimport EmailPatient from \"../../../../../services/manage/emailPatient.service\";\n\nconst useStyles = makeStyles((theme) => ({\n  title: {\n    backgroundColor: theme.palette.primary.light,\n    \"& h2\": {\n      color: \"#fff\",\n    },\n  },\n  content: {\n    paddingTop: theme.spacing(2),\n    paddingBottom: theme.spacing(2),\n    fontSize: \"18px\",\n  },\n  statusWrapper: {\n    display: \"block\",\n  },\n  status: {\n    display: \"inline\",\n  },\n  formControl: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    color: theme.palette.text.secondary,\n    \"& .MuiSelect-select\": {\n      minWidth: 120,\n    },\n  },\n  formLabel: {\n    fontSize: \"14px\",\n    fontWeight: \"600\",\n    width: \"220px\",\n  },\n  formHelperText: {\n    // width: \"230px\",\n    fontSize: \"12px\",\n    paddingLeft: \"16px\",\n  },\n  formField: {\n    flex: 1,\n  },\n  modalAction: {\n    borderTop: `1px solid ${theme.palette.background.default}`,\n    display: \"flex\",\n    justifyContent: \"space-between\",\n    paddingTop: theme.spacing(2),\n    paddingBottom: theme.spacing(2),\n    paddingLeft: theme.spacing(3),\n    paddingRight: theme.spacing(3),\n  },\n  formFieldLarge: {\n    maxWidth: \"270px\",\n    flex: 1,\n    width: \"300px\",\n  },\n  formFieldSmall: {\n    maxWidth: \"100px\",\n    flex: 1,\n  },\n  textArea: {\n    marginTop: \"12px\",\n  },\n}));\n\nconst EditEmail = ({\n  isOpen,\n  onClose,\n  onUpdate,\n  ...props\n}) => {\n  const classes = useStyles();\n  const { enqueueSnackbar } = useSnackbar();\n  const [emailData, setEmailData] = useState([]);\n\n  useEffect(() => {\n    setEmailData(props.selectedEmail);\n    // eslint-disable-next-line react/destructuring-assignment\n  }, [props.selectedEmail]);\n\n  const handleFormSubmission = () => {\n    EmailPatient.updateEmailHistory({ data: { emailData } }).then((response) => {\n      enqueueSnackbar(`${response.data.message}`, {\n        variant: \"success\",\n      });\n      onUpdate();\n      onClose();\n    });\n  };\n\n  const handleOnChange = (event) => {\n    setEmailData({\n      ...emailData,\n      [event.target.name]: event.target.value,\n    });\n  };\n\n  return (\n    <div>\n      <Dialog\n        fullWidth\n        maxWidth=\"sm\"\n        open={isOpen}\n        onClose={onClose}\n        aria-labelledby=\"alert-dialog-title\"\n        aria-describedby=\"alert-dialog-description\"\n      >\n        <DialogTitle id=\"alert-dialog-title\" className={classes.title}>\n          Edit Email\n        </DialogTitle>\n        <DialogContent className={classes.content}>\n          <DialogContentText id=\"alert-dialog-description\">\n            Edit the following for this email\n          </DialogContentText>\n          <div className={classes.root}>\n            <FormControl component=\"div\" className={classes.formControl}>\n              <TextField\n                autoFocus\n                className={classes.formFieldLarge}\n                variant=\"outlined\"\n                label=\"Subject\"\n                margin=\"normal\"\n                fullWidth\n                name=\"subject\"\n                id=\"subject\"\n                autoComplete=\"subject\"\n                onChange={(event) => handleOnChange(event)}\n                value={emailData.subject}\n                size=\"small\"\n              />\n            </FormControl>\n            <div className={classes.statusWrapper}>\n              <Typography component=\"p\" variant=\"body2\" color=\"textPrimary\">\n                Patient Status:\n              </Typography>\n              <FormControl component=\"fieldset\">\n                <RadioGroup\n                  aria-label=\"status\"\n                  name=\"status\"\n                  value={emailData.status}\n                  onChange={handleOnChange}\n                  className={classes.status}\n                >\n                  <FormControlLabel value=\"U\" control={<Radio />} label=\"Active\" />\n                  <FormControlLabel value=\"R\" control={<Radio />} label=\"Inactive\" />\n                </RadioGroup>\n              </FormControl>\n            </div>\n            <FormControl\n              component=\"div\"\n              className={`${classes.formControl} ${classes.textArea}`}\n            >\n              <TextField\n                fullWidth\n                variant=\"outlined\"\n                label=\"Message\"\n                multiline\n                name=\"message\"\n                InputProps={{\n                  classes: classes.normalOutline,\n                  inputComponent: TextareaAutosize,\n                  rows: 8,\n                }}\n                value={emailData.message}\n                onChange={(event) => handleOnChange(event)}\n              />\n            </FormControl>\n          </div>\n        </DialogContent>\n        <DialogActions className={classes.modalAction}>\n          <Button\n            size=\"small\"\n            variant=\"outlined\"\n            onClick={() => onClose()}\n            style={{\n              borderColor: colors.orange[600],\n              color: colors.orange[600],\n            }}\n          >\n            Cancel\n          </Button>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            size=\"small\"\n            onClick={() => handleFormSubmission()}\n          >\n            Update\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n};\n\nEditEmail.propTypes = {\n  isOpen: PropTypes.bool.isRequired,\n  isConfirmView: PropTypes.bool.isRequired,\n  onClose: PropTypes.func.isRequired,\n  onUpdate: PropTypes.func.isRequired,\n  selectedEmail: PropTypes.shape({\n    id: PropTypes.number,\n    created: PropTypes.string,\n    created_user: PropTypes.string,\n    message: PropTypes.string,\n    status: PropTypes.string,\n    subject: PropTypes.string,\n  }).isRequired,\n};\n\nexport default EditEmail;\n","import React, { useCallback, useEffect, useState } from \"react\";\n\nimport { makeStyles, withStyles } from \"@material-ui/core\";\nimport Button from \"@material-ui/core/Button\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Radio from \"@material-ui/core/Radio\";\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport TextareaAutosize from \"@material-ui/core/TextareaAutosize\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\nimport Typography from \"@material-ui/core/Typography\";\nimport DeleteIcon from \"@material-ui/icons/DeleteOutline\";\nimport EditIcon from \"@material-ui/icons/EditOutlined\";\nimport moment from \"moment\";\nimport { useSnackbar } from \"notistack\";\n\nimport EmailPatient from \"../../../../services/manage/emailPatient.service\";\nimport ConfirmEmail from \"./Dialog/ConfirmEmail\";\nimport EditEmail from \"./Dialog/EditEmail\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n    padding: \"25px 0px\",\n  },\n  title: {\n    paddingBottom: theme.spacing(0.5),\n  },\n  statusWrapper: {\n    display: \"flex\",\n    alignItems: \"center\",\n    \"& p\": {\n      marginRight: theme.spacing(2),\n    },\n  },\n  emailStatus: {\n    display: \"inline\",\n  },\n\n  status: {\n    display: \"flex\",\n    alignItems: \"center\",\n  },\n  subject: {\n    width: \"50%\",\n  },\n  fields: {\n    display: \"flex\",\n    flexDirection: \"column\",\n  },\n  texArea: {\n    width: \"75%\",\n  },\n  next: {\n    margin: theme.spacing(3, 0, 2),\n    maxWidth: \"100px\",\n  },\n  historyTop: {\n    marginTop: \"15px\",\n  },\n  tableContainer: {\n    borderRadius: 0,\n    marginTop: \"5px\",\n    display: \"flex\",\n    border: \"black solid 1px\",\n    padding: \"5px\",\n    height: \"300px\",\n    flexDirection: \"row\",\n  },\n  noRecords: {\n    marginTop: theme.spacing(1),\n    marginLeft: theme.spacing(1),\n  },\n  marginRight: {\n    marginRight: theme.spacing(1),\n  },\n}));\n\nconst LightTooltip = withStyles((theme) => ({\n  tooltip: {\n    backgroundColor: theme.palette.common.white,\n    color: \"rgba(0, 0, 0, 0.87)\",\n    boxShadow: theme.shadows[1],\n    fontSize: 13,\n  },\n}))(Tooltip);\n\n\nconst StyledTableCell = withStyles((theme) => ({\n  head: {\n    backgroundColor: theme.palette.grey,\n    color: theme.palette.grey,\n    fontSize: \"12px\",\n    fontWeight: 700,\n  },\n  body: {\n    fontSize: 14,\n  },\n}))(TableCell);\n\nconst StyledTableRow = withStyles((theme) => ({\n  root: {\n    fontSize: 14,\n    \"&:nth-of-type(odd)\": {\n      backgroundColor: theme.palette.action.hover,\n    },\n    \"& th\": {\n      fontSize: 12,\n    },\n    \"& td\": {\n      fontSize: 12,\n    },\n  },\n}))(TableRow);\n\nconst isLessThan30Minutes = (createdTime) => (\n  moment()\n    .subtract(30, \"minutes\")\n    .format()\n  < moment(createdTime)\n    .format()\n);\n\n\nexport default function EmailPatients() {\n  const classes = useStyles();\n  const { enqueueSnackbar } = useSnackbar();\n  // const [subject, setSubject] = useState(\"\");\n  const [message, setMessage] = useState(\"\");\n  const [emailHistory, setEmailHistory] = useState([]);\n  const [emailStatus, setEmailStatus] = useState(\"\");\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [isEditModalOpen, setIsEditModalOpen] = useState(false);\n  const [selectedEmail, setSelectedEmail] = useState({});\n\n  const fetchEmailHistory = useCallback(() => {\n    EmailPatient.getEmailHistory().then((response) => {\n      setEmailHistory(response.data.data);\n    });\n  }, []);\n\n  useEffect(() => {\n    fetchEmailHistory();\n  }, [fetchEmailHistory]);\n\n  const handleEmailHistoryDeletion = (createdDate) => {\n    EmailPatient.deleteEmailHistory(moment(createdDate).format(\"YYYY-MM-DD HH:mm:ss\")).then((response) => {\n      enqueueSnackbar(`${response.data.message}`, {\n        variant: \"success\",\n      });\n      fetchEmailHistory();\n    });\n  };\n\n  const handleSave = (data) => {\n    EmailPatient.createEmailHistory(data).then((response) => {\n      enqueueSnackbar(`${response.data.message}`, {\n        variant: \"success\",\n      });\n      fetchEmailHistory();\n      setIsModalOpen();\n    });\n  };\n\n  const handleNextClick = () => {\n    setIsModalOpen(true);\n  };\n\n  const handleOnEdit = (data) => {\n    setIsEditModalOpen(true);\n    setSelectedEmail(data);\n  };\n\n  return (\n    <div className={classes.root}>\n      <Typography\n        component=\"h1\"\n        variant=\"h2\"\n        color=\"textPrimary\"\n        className={classes.title}\n      >\n        Email Patients\n      </Typography>\n      <Typography component=\"p\" variant=\"body2\" color=\"textPrimary\">\n        This pages send a message to all patients\n      </Typography>\n      <div className={classes.statusWrapper}>\n        <Typography component=\"p\" variant=\"body2\" color=\"textPrimary\">\n          Patient Status:\n        </Typography>\n        <FormControl component=\"fieldset\">\n          <RadioGroup\n            aria-label=\"status\"\n            name=\"status\"\n            value={emailStatus}\n            onChange={(e) => setEmailStatus(e.target.value)}\n            className={classes.emailStatus}\n          >\n            <FormControlLabel value=\"U\" control={<Radio />} label=\"Active\" />\n            <FormControlLabel value=\"R\" control={<Radio />} label=\"Inactive\" />\n          </RadioGroup>\n        </FormControl>\n      </div>\n      <div className={classes.fields}>\n        {/* Commented out as per CLIN-114 */}\n        {/* <TextField\n          className={classes.subject}\n          value={subject}\n          variant=\"outlined\"\n          margin=\"normal\"\n          id=\"subject\"\n          label=\"Subject\"\n          name=\"subject\"\n          autoComplete=\"subject\"\n          autoFocus\n          onChange={(event) => setSubject(event.target.value)}\n          size=\"small\"\n        /> */}\n        <TextField\n          autoFocus\n          fullWidth\n          variant=\"outlined\"\n          label=\"Message\"\n          className={classes.texArea}\n          InputProps={{\n            classes: classes.normalOutline,\n            inputComponent: TextareaAutosize,\n            rows: 8,\n          }}\n          value={message}\n          onChange={(event) => setMessage(event.target.value)}\n          size=\"small\"\n        />\n        <Button\n          disabled={!message}\n          variant=\"contained\"\n          color=\"primary\"\n          className={classes.next}\n          onClick={() => handleNextClick()}\n        >\n          Next\n        </Button>\n      </div>\n      <div className={classes.historyTop}>\n        <Typography component=\"p\" variant=\"body2\" color=\"textPrimary\">\n          History\n        </Typography>\n        <TableContainer component={Paper} className={classes.tableContainer}>\n          <Table\n            size=\"small\"\n            className={classes.table}\n          >\n            <TableHead>\n              <TableRow>\n                <StyledTableCell padding=\"checkbox\">Date</StyledTableCell>\n                <StyledTableCell padding=\"checkbox\">Subject</StyledTableCell>\n                <StyledTableCell padding=\"checkbox\">Message</StyledTableCell>\n                <StyledTableCell padding=\"checkbox\">Status</StyledTableCell>\n                <StyledTableCell padding=\"checkbox\">Sent By</StyledTableCell>\n                <StyledTableCell padding=\"checkbox\">Actions</StyledTableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {emailHistory.length\n                ? emailHistory.map((history) => (\n                  <StyledTableRow key={history.created}>\n                    <TableCell\n                      style={{ whiteSpace: \"nowrap\" }}\n                      padding=\"checkbox\"\n                      component=\"th\"\n                      scope=\"row\"\n                    >\n                      {moment(history.created).format(\"lll\")}\n                    </TableCell>\n                    <TableCell padding=\"checkbox\" component=\"th\" scope=\"row\">\n                      {history.subject}\n                    </TableCell>\n                    {history.message && history.message.length > 25 ? (\n                      <LightTooltip title={history.message}>\n                        <TableCell\n                          padding=\"checkbox\"\n                          className={classes.overFlowControl}\n                        >\n                          {`${history.message.substring(0, 25)}...`}\n                        </TableCell>\n                      </LightTooltip>\n                    ) : (\n                      <TableCell\n                        padding=\"checkbox\"\n                        className={classes.overFlowControl}\n                      >\n                        {history.message || \"\"}\n                      </TableCell>\n                    )}\n\n                    <TableCell padding=\"checkbox\" component=\"th\" scope=\"row\">\n                      {history.status\n                        ? history.status === \"U\" ? \"Active\" : \"InActive\"\n                        : \"\"}\n                    </TableCell>\n                    <TableCell padding=\"checkbox\">\n                      {history.created_user}\n                    </TableCell>\n                    <TableCell padding=\"checkbox\" className={classes.actions}>\n                      {isLessThan30Minutes(history.created)\n                        ? (\n                          <>\n                            <IconButton\n                              aria-label=\"edit\"\n                              className={classes.marginRight}\n                              onClick={() => handleOnEdit(history)}\n                            >\n                              <EditIcon fontSize=\"small\" />\n                            </IconButton>\n                            <IconButton\n                              aria-label=\"delete\"\n                              onClick={() => handleEmailHistoryDeletion(history.created)}\n                            >\n                              <DeleteIcon fontSize=\"small\" />\n                            </IconButton>\n                          </>\n                        )\n                        : \"\"}\n\n                    </TableCell>\n                  </StyledTableRow>\n                ))\n                : (\n                  <StyledTableRow>\n                    <TableCell colSpan={6}>\n                      <Typography align=\"center\" variant=\"body1\">\n                        No Records Found...\n                      </Typography>\n                    </TableCell>\n                  </StyledTableRow>\n                )}\n            </TableBody>\n          </Table>\n        </TableContainer>\n      </div>\n\n      {isModalOpen\n        && (\n          <ConfirmEmail\n            isOpen={isModalOpen}\n            onClose={() => setIsModalOpen(false)}\n            onSave={(data) => handleSave(data)}\n            emailData={{\n              // subject,\n              emailStatus,\n              message,\n            }}\n          />\n        )}\n      {isEditModalOpen\n        && (\n          <EditEmail\n            isOpen={isEditModalOpen}\n            onUpdate={() => fetchEmailHistory()}\n            onClose={() => setIsEditModalOpen(false)}\n            selectedEmail={selectedEmail}\n          />\n        )}\n    </div>\n  );\n}\n"],"sourceRoot":""}